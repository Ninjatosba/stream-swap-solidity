{
  "address": "0x8EF813d2017cd7eb7A815154c8A15de8A82e0ea2",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_uniswapV2Factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_uniswapV2Router",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "DifferentTokensRequired",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PoolCreationFailed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "stream",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "poolWrapper",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token1",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "token0Amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "token1Amount",
          "type": "uint256"
        }
      ],
      "name": "PoolCreated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "UNISWAP_V2_FACTORY",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UNISWAP_V2_ROUTER",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "token0",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token1",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount0",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount1",
              "type": "uint256"
            }
          ],
          "internalType": "struct PoolWrapperTypes.CreatePoolMsg",
          "name": "createPoolMsg",
          "type": "tuple"
        }
      ],
      "name": "createPool",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "poolAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token0",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token1",
              "type": "address"
            }
          ],
          "internalType": "struct PoolWrapperTypes.CreatedPoolInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stream",
          "type": "address"
        }
      ],
      "name": "getPoolInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "poolAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token0",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token1",
              "type": "address"
            }
          ],
          "internalType": "struct PoolWrapperTypes.CreatedPoolInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "streamPools",
      "outputs": [
        {
          "internalType": "address",
          "name": "poolAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token1",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x9bc28e39e8049a85f9ba6d0fe2ad2895ba796484dafc7ad59ea8aa2ae6072408",
  "receipt": {
    "to": null,
    "from": "0xB4eE189569597EFDB3bB48DB5ede8394d1D48e7b",
    "contractAddress": "0x8EF813d2017cd7eb7A815154c8A15de8A82e0ea2",
    "transactionIndex": 263,
    "gasUsed": "669710",
    "logsBloom": "0x
    "blockHash": "0xcf6566b103decc817f201f5ab0a6a47ae6cfcc06871ed2d94a4f0e73a0f956f2",
    "transactionHash": "0x9bc28e39e8049a85f9ba6d0fe2ad2895ba796484dafc7ad59ea8aa2ae6072408",
    "logs": [
      {
        "transactionIndex": 263,
        "blockNumber": 8682078,
        "transactionHash": "0x9bc28e39e8049a85f9ba6d0fe2ad2895ba796484dafc7ad59ea8aa2ae6072408",
        "address": "0x8EF813d2017cd7eb7A815154c8A15de8A82e0ea2",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000b4ee189569597efdb3bb48db5ede8394d1d48e7b"
        ],
        "data": "0x",
        "logIndex": 262,
        "blockHash": "0xcf6566b103decc817f201f5ab0a6a47ae6cfcc06871ed2d94a4f0e73a0f956f2"
      }
    ],
    "blockNumber": 8682078,
    "cumulativeGasUsed": "19651519",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x7E0987E5b3a30e3f2828572Bb659A548460a3003",
    "0xC532a74256D3Db42D0Bf7a0400fEFDbad7694008"
  ],
  "numDeployments": 1,
  "solcInputHash": "f877331f615334fb5951804fa5553efb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_uniswapV2Factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniswapV2Router\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"DifferentTokensRequired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PoolCreationFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stream\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"poolWrapper\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"token0Amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"token1Amount\",\"type\":\"uint256\"}],\"name\":\"PoolCreated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"UNISWAP_V2_FACTORY\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNISWAP_V2_ROUTER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"internalType\":\"struct PoolWrapperTypes.CreatePoolMsg\",\"name\":\"createPoolMsg\",\"type\":\"tuple\"}],\"name\":\"createPool\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"}],\"internalType\":\"struct PoolWrapperTypes.CreatedPoolInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stream\",\"type\":\"address\"}],\"name\":\"getPoolInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"}],\"internalType\":\"struct PoolWrapperTypes.CreatedPoolInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"streamPools\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"createPool((address,address,uint256,uint256))\":{\"params\":{\"createPoolMsg\":\"The parameters for pool creation and liquidity addition Callable by anyone\"}},\"getPoolInfo(address)\":{\"params\":{\"stream\":\"The stream address\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"createPool((address,address,uint256,uint256))\":{\"notice\":\"Creates a pool and adds liquidity\"},\"getPoolInfo(address)\":{\"notice\":\"Gets pool info for a stream\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/PoolWrapper.sol\":\"PoolWrapper\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xb264c03a3442eb37a68ad620cefd1182766b58bee6cec40343480392d6b14d69\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"src/PoolWrapper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { PoolWrapperTypes } from \\\"./types/PoolWrapperTypes.sol\\\";\\nimport { IUniswapV2Factory, IUniswapV2Router02 } from \\\"./interfaces/IUniswapV2.sol\\\";\\nimport { IPoolWrapperErrors } from \\\"./interfaces/IPoolWrapperErrors.sol\\\";\\n\\ncontract PoolWrapper is Ownable, IPoolWrapperErrors {\\n    using SafeERC20 for IERC20;\\n\\n    // Uniswap V2 addresses - these should be configurable per network\\n    address public immutable UNISWAP_V2_FACTORY;\\n    address public immutable UNISWAP_V2_ROUTER;\\n    \\n    // Mapping from stream address to pool info\\n    mapping(address => PoolWrapperTypes.CreatedPoolInfo) public streamPools;\\n\\n    event PoolCreated(\\n        address indexed stream,\\n        address indexed pool,\\n        address indexed poolWrapper,\\n        address token0,\\n        address token1,\\n        uint256 token0Amount,\\n        uint256 token1Amount\\n    );\\n\\n    constructor(address _uniswapV2Factory, address _uniswapV2Router) Ownable() {\\n        if (_uniswapV2Factory == address(0)) revert InvalidAddress();\\n        if (_uniswapV2Router == address(0)) revert InvalidAddress();\\n        \\n        UNISWAP_V2_FACTORY = _uniswapV2Factory;\\n        UNISWAP_V2_ROUTER = _uniswapV2Router;\\n    }\\n\\n    /**\\n     * @notice Creates a pool and adds liquidity\\n     * @param createPoolMsg The parameters for pool creation and liquidity addition\\n     * Callable by anyone\\n     */\\n    function createPool(\\n        PoolWrapperTypes.CreatePoolMsg calldata createPoolMsg\\n    ) external returns (PoolWrapperTypes.CreatedPoolInfo memory) {\\n        // Validate that the tokens are valid ERC20s\\n        if (createPoolMsg.token0 == address(0)) revert InvalidAddress();\\n        if (createPoolMsg.token1 == address(0)) revert InvalidAddress();\\n        if (createPoolMsg.token0 == createPoolMsg.token1) revert DifferentTokensRequired();\\n        if (createPoolMsg.amount0 == 0) revert InvalidAmount();\\n        if (createPoolMsg.amount1 == 0) revert InvalidAmount();\\n\\n        // Validate that the tokens are sent to this contract\\n        if (IERC20(createPoolMsg.token0).balanceOf(address(this)) < createPoolMsg.amount0) {\\n            revert InsufficientBalance();\\n        }\\n        if (IERC20(createPoolMsg.token1).balanceOf(address(this)) < createPoolMsg.amount1) {\\n            revert InsufficientBalance();\\n        }\\n\\n        // Check if pool already exists\\n        IUniswapV2Factory factory = IUniswapV2Factory(UNISWAP_V2_FACTORY);\\n        address existingPool = factory.getPair(createPoolMsg.token0, createPoolMsg.token1);\\n        \\n        address poolAddress;\\n        if (existingPool == address(0)) {\\n            // Create the pool\\n            poolAddress = factory.createPair(createPoolMsg.token0, createPoolMsg.token1);\\n            if (poolAddress == address(0)) revert PoolCreationFailed();\\n        } else {\\n            poolAddress = existingPool;\\n        }\\n\\n        // Add liquidity to the pool\\n        IUniswapV2Router02 router = IUniswapV2Router02(UNISWAP_V2_ROUTER);\\n        \\n        // Approve router to spend tokens\\n        IERC20(createPoolMsg.token0).approve(UNISWAP_V2_ROUTER, createPoolMsg.amount0);\\n        IERC20(createPoolMsg.token1).approve(UNISWAP_V2_ROUTER, createPoolMsg.amount1);\\n        \\n        // Add liquidity (returns actual amounts added and LP tokens received)\\n        (uint256 amountA, uint256 amountB, ) = router.addLiquidity(\\n            createPoolMsg.token0,\\n            createPoolMsg.token1,\\n            createPoolMsg.amount0,\\n            createPoolMsg.amount1,\\n            0, // amountAMin - accept any amount\\n            0, // amountBMin - accept any amount\\n            address(0), // LP tokens are burned\\n            block.timestamp + 300 // 5 minute deadline\\n        );\\n\\n        // Store the pool info\\n        PoolWrapperTypes.CreatedPoolInfo memory poolInfo = PoolWrapperTypes.CreatedPoolInfo({\\n            poolAddress: poolAddress,\\n            token0: createPoolMsg.token0,\\n            token1: createPoolMsg.token1\\n        });\\n\\n        streamPools[msg.sender] = poolInfo;\\n\\n        // Emit events\\n        emit PoolCreated(\\n            msg.sender,\\n            poolAddress,\\n            address(this),\\n            createPoolMsg.token0,\\n            createPoolMsg.token1,\\n            amountA,\\n            amountB\\n        );\\n\\n        return poolInfo;\\n    }\\n\\n    /**\\n     * @notice Gets pool info for a stream\\n     * @param stream The stream address\\n     */\\n    function getPoolInfo(address stream) external view returns (PoolWrapperTypes.CreatedPoolInfo memory) {\\n        return streamPools[stream];\\n    }\\n}\\n\",\"keccak256\":\"0xc2a20b340a2de54686ac3bb58b63f2b04a488dadad787f2cc28e49c74b7a093f\",\"license\":\"MIT\"},\"src/interfaces/IPoolWrapperErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/**\\n * @title IPoolWrapperErrors\\n * @dev Interface for custom errors used in the PoolWrapper contract\\n */\\ninterface IPoolWrapperErrors {\\n    error InvalidAddress();\\n    error InvalidAmount();\\n    error InsufficientBalance();\\n    error PoolCreationFailed();\\n    error DifferentTokensRequired();\\n} \",\"keccak256\":\"0x460a634236df513ce76ae7cb59b8741e7189f716310167b8e531604f8f70c7e7\",\"license\":\"MIT\"},\"src/interfaces/IUniswapV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\ninterface IUniswapV2Factory {\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n}\\n\\ninterface IUniswapV2Router02 {\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB, uint256 liquidity);\\n}\\n\\ninterface IUniswapV2Pair {\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x83195b720af475e27a529c583b578668b5a41f8365adf25b83a386977d270854\",\"license\":\"MIT\"},\"src/types/PoolWrapperTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nlibrary PoolWrapperTypes {\\n    struct CreatePoolMsg {\\n        address token0;\\n        address token1;\\n        uint256 amount0;\\n        uint256 amount1;\\n    }\\n\\n    struct CreatedPoolInfo {\\n        address poolAddress;\\n        address token0;\\n        address token1;\\n    }\\n}\\n\",\"keccak256\":\"0x5836346a21c27337ecac9a03a9d4878eaaec389fc46e11e70b3fa1c5e1dd406e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c03461010457601f610bd638819003918201601f19168301916001600160401b0383118484101761010957808492604094855283398101031261010457610052602061004b8361011f565b920161011f565b60008054336001600160a01b03198216811783556040519394936001600160a01b039390928416907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a3818316156100f557508216156100e35760805260a052604051610aa29081610134823960805181818161022d0152610791015260a05181818161031c01526107490152f35b60405163e6c4247b60e01b8152600490fd5b63e6c4247b60e01b8152600490fd5b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b03821682036101045756fe60406080815260048036101561001457600080fd5b600091823560e01c806306bfa9381461089f57806312b4682214610842578063715018a6146107e85780638da5cb5b146107c057806399d8fae31461077c578063a82ed9ec14610734578063b8985b40146101445763f2fde38b1461007857600080fd5b34610140576020366003190112610140576001600160a01b0382358181169391929084900361013c576100a9610a14565b83156100ea57505082546001600160a01b0319811683178455167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b906020608492519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152fd5b8480fd5b8280fd5b5082346107315760803660031901126107315761015f61098d565b506001600160a01b0390816101726109ac565b161561072257816101816109c7565b16156107225761018f6109ac565b82806101996109c7565b1691161461071357604435938415610705576064359081156106f757836101be6109ac565b1691855192836370a0823160e01b91828252308583015281602460209788935afa9081156106685790899187916106c2575b50106106b25783866102006109c7565b16916024895180948193825230888301525afa908115610639579082918691610681575b501061067257847f000000000000000000000000000000000000000000000000000000000000000016610294846102596109ac565b6102616109c7565b8a5163e6a4390560e01b81526001600160a01b039283168882019081529290911660208301529283918291604090910190565b0381855afa90811561066857869161064b575b50808716610643575096836102fe986102be6109ac565b906102c76109c7565b8a516364e329cb60e11b81526001600160a01b039384168882019081529390911660208401529a8b9283918a918391604090910190565b03925af197881561063957859861060a575b50858816156105fa575b7f00000000000000000000000000000000000000000000000000000000000000009083876103466109ac565b8a5163095ea7b360e01b8082526001600160a01b03871694820194855260208501869052939092899284928390036040019183918d91165af180156105f0576105d3575b5085886103956109c7565b8b519384526001600160a01b038616888501908152602081018890528492908390036040019183918c91165af180156105c95761059c575b506103d66109ac565b926103df6109c7565b9161012c42019283421161058957899461010494606097948b94888f958196519c8d9b8c9a62e8e33760e81b8c5216908a0152166024880152604487015260648601528360848601528360a48601528360c486015260e4850152165af191821561057f5783918493610545575b506104556109ac565b61045d6109c7565b9086888181519b61046d8d610939565b1697888c5282868d019416845282828d01951685523381526001865220818b5116926bffffffffffffffffffffffff60a01b9384835416178255826001830191511684825416179055600201925116908254161790556104cb6109ac565b946104d46109c7565b8188519716875216908501528484015260608301523091339060807fbc6f53152e9aa8c4c80947b978ba84ae6d4f83b9762aa13cddad1d22cf26d17391a45181516001600160a01b0390811682526020808401518216908301526040928301511691810191909152606090f35b0390f35b915091506060813d606011610577575b816105626060938361096b565b8101031261014057818151910151918761044c565b3d9150610555565b85513d85823e3d90fd5b634e487b7160e01b895260118752602489fd5b6105bb90863d88116105c2575b6105b3818361096b565b8101906109fc565b50896103cd565b503d6105a9565b89513d89823e3d90fd5b6105e990873d89116105c2576105b3818361096b565b508a61038a565b8a513d8a823e3d90fd5b86516337200b1d60e21b81528390fd5b61062b919850843d8611610632575b610623818361096b565b8101906109dd565b9688610310565b503d610619565b87513d87823e3d90fd5b90509661031a565b6106629150853d871161063257610623818361096b565b896102a7565b88513d88823e3d90fd5b508451631e9acf1760e31b8152fd5b809250858092503d83116106ab575b61069a818361096b565b8101031261013c5781905189610224565b503d610690565b8651631e9acf1760e31b81528390fd5b809250868092503d83116106f0575b6106db818361096b565b810103126106ec578890518a6101f0565b8580fd5b503d6106d1565b845163162908e360e11b8152fd5b835163162908e360e11b8152fd5b5050516351734ced60e01b8152fd5b50505163e6c4247b60e01b8152fd5b80fd5b838234610778578160031936011261077857517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b5080fd5b838234610778578160031936011261077857517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b838234610778578160031936011261077857905490516001600160a01b039091168152602090f35b8334610731578060031936011261073157610801610a14565b80546001600160a01b03198116825581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b509034610140576020366003190112610140576001600160a01b039190358281169081900361089b5783829160609552600160205220908282541692600281600185015416930154169181519384526020840152820152f35b8380fd5b509034610140576020366003190112610140576001600160a01b039190358281169081900361089b576105419382916108d661098d565b5081526001602052209160028251936108ee85610939565b828154168552826001820154166020860152015416818301525191829182919091604060608201938160018060a01b0391828151168552826020820151166020860152015116910152565b6060810190811067ffffffffffffffff82111761095557604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff82111761095557604052565b6040519061099a82610939565b60006040838281528260208201520152565b6004356001600160a01b03811681036109c25790565b600080fd5b6024356001600160a01b03811681036109c25790565b908160209103126109c257516001600160a01b03811681036109c25790565b908160209103126109c2575180151581036109c25790565b6000546001600160a01b03163303610a2857565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fdfea26469706673582212209f142e85781f1149112ee47706cc13ab4ba96b944006cdd715b0f9c10c9899a964736f6c63430008180033",
  "deployedBytecode": "0x60406080815260048036101561001457600080fd5b600091823560e01c806306bfa9381461089f57806312b4682214610842578063715018a6146107e85780638da5cb5b146107c057806399d8fae31461077c578063a82ed9ec14610734578063b8985b40146101445763f2fde38b1461007857600080fd5b34610140576020366003190112610140576001600160a01b0382358181169391929084900361013c576100a9610a14565b83156100ea57505082546001600160a01b0319811683178455167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b906020608492519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152fd5b8480fd5b8280fd5b5082346107315760803660031901126107315761015f61098d565b506001600160a01b0390816101726109ac565b161561072257816101816109c7565b16156107225761018f6109ac565b82806101996109c7565b1691161461071357604435938415610705576064359081156106f757836101be6109ac565b1691855192836370a0823160e01b91828252308583015281602460209788935afa9081156106685790899187916106c2575b50106106b25783866102006109c7565b16916024895180948193825230888301525afa908115610639579082918691610681575b501061067257847f000000000000000000000000000000000000000000000000000000000000000016610294846102596109ac565b6102616109c7565b8a5163e6a4390560e01b81526001600160a01b039283168882019081529290911660208301529283918291604090910190565b0381855afa90811561066857869161064b575b50808716610643575096836102fe986102be6109ac565b906102c76109c7565b8a516364e329cb60e11b81526001600160a01b039384168882019081529390911660208401529a8b9283918a918391604090910190565b03925af197881561063957859861060a575b50858816156105fa575b7f00000000000000000000000000000000000000000000000000000000000000009083876103466109ac565b8a5163095ea7b360e01b8082526001600160a01b03871694820194855260208501869052939092899284928390036040019183918d91165af180156105f0576105d3575b5085886103956109c7565b8b519384526001600160a01b038616888501908152602081018890528492908390036040019183918c91165af180156105c95761059c575b506103d66109ac565b926103df6109c7565b9161012c42019283421161058957899461010494606097948b94888f958196519c8d9b8c9a62e8e33760e81b8c5216908a0152166024880152604487015260648601528360848601528360a48601528360c486015260e4850152165af191821561057f5783918493610545575b506104556109ac565b61045d6109c7565b9086888181519b61046d8d610939565b1697888c5282868d019416845282828d01951685523381526001865220818b5116926bffffffffffffffffffffffff60a01b9384835416178255826001830191511684825416179055600201925116908254161790556104cb6109ac565b946104d46109c7565b8188519716875216908501528484015260608301523091339060807fbc6f53152e9aa8c4c80947b978ba84ae6d4f83b9762aa13cddad1d22cf26d17391a45181516001600160a01b0390811682526020808401518216908301526040928301511691810191909152606090f35b0390f35b915091506060813d606011610577575b816105626060938361096b565b8101031261014057818151910151918761044c565b3d9150610555565b85513d85823e3d90fd5b634e487b7160e01b895260118752602489fd5b6105bb90863d88116105c2575b6105b3818361096b565b8101906109fc565b50896103cd565b503d6105a9565b89513d89823e3d90fd5b6105e990873d89116105c2576105b3818361096b565b508a61038a565b8a513d8a823e3d90fd5b86516337200b1d60e21b81528390fd5b61062b919850843d8611610632575b610623818361096b565b8101906109dd565b9688610310565b503d610619565b87513d87823e3d90fd5b90509661031a565b6106629150853d871161063257610623818361096b565b896102a7565b88513d88823e3d90fd5b508451631e9acf1760e31b8152fd5b809250858092503d83116106ab575b61069a818361096b565b8101031261013c5781905189610224565b503d610690565b8651631e9acf1760e31b81528390fd5b809250868092503d83116106f0575b6106db818361096b565b810103126106ec578890518a6101f0565b8580fd5b503d6106d1565b845163162908e360e11b8152fd5b835163162908e360e11b8152fd5b5050516351734ced60e01b8152fd5b50505163e6c4247b60e01b8152fd5b80fd5b838234610778578160031936011261077857517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b5080fd5b838234610778578160031936011261077857517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b838234610778578160031936011261077857905490516001600160a01b039091168152602090f35b8334610731578060031936011261073157610801610a14565b80546001600160a01b03198116825581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b509034610140576020366003190112610140576001600160a01b039190358281169081900361089b5783829160609552600160205220908282541692600281600185015416930154169181519384526020840152820152f35b8380fd5b509034610140576020366003190112610140576001600160a01b039190358281169081900361089b576105419382916108d661098d565b5081526001602052209160028251936108ee85610939565b828154168552826001820154166020860152015416818301525191829182919091604060608201938160018060a01b0391828151168552826020820151166020860152015116910152565b6060810190811067ffffffffffffffff82111761095557604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff82111761095557604052565b6040519061099a82610939565b60006040838281528260208201520152565b6004356001600160a01b03811681036109c25790565b600080fd5b6024356001600160a01b03811681036109c25790565b908160209103126109c257516001600160a01b03811681036109c25790565b908160209103126109c2575180151581036109c25790565b6000546001600160a01b03163303610a2857565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fdfea26469706673582212209f142e85781f1149112ee47706cc13ab4ba96b944006cdd715b0f9c10c9899a964736f6c63430008180033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "createPool((address,address,uint256,uint256))": {
        "params": {
          "createPoolMsg": "The parameters for pool creation and liquidity addition Callable by anyone"
        }
      },
      "getPoolInfo(address)": {
        "params": {
          "stream": "The stream address"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "createPool((address,address,uint256,uint256))": {
        "notice": "Creates a pool and adds liquidity"
      },
      "getPoolInfo(address)": {
        "notice": "Gets pool info for a stream"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "src/PoolWrapper.sol:PoolWrapper",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2000,
        "contract": "src/PoolWrapper.sol:PoolWrapper",
        "label": "streamPools",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_struct(CreatedPoolInfo)8010_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(CreatedPoolInfo)8010_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct PoolWrapperTypes.CreatedPoolInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(CreatedPoolInfo)8010_storage"
      },
      "t_struct(CreatedPoolInfo)8010_storage": {
        "encoding": "inplace",
        "label": "struct PoolWrapperTypes.CreatedPoolInfo",
        "members": [
          {
            "astId": 8005,
            "contract": "src/PoolWrapper.sol:PoolWrapper",
            "label": "poolAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 8007,
            "contract": "src/PoolWrapper.sol:PoolWrapper",
            "label": "token0",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 8009,
            "contract": "src/PoolWrapper.sol:PoolWrapper",
            "label": "token1",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "96"
      }
    }
  }
}