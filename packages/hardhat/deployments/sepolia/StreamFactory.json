{
  "address": "0x4659490Fb09d6e6AAEE222Ed28E6309D9b63bA05",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_streamCreationFee",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_streamCreationFeeToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_exitFeePercent",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minWaitingDuration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minBootstrappingDuration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minStreamDuration",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_acceptedInSupplyTokens",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_feeCollector",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_protocolAdmin",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_tosVersion",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "BootstrappingDurationTooShort",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ContractFrozen",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FeeTransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientNativeToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientOutAmount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requiredTokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenBalance",
          "type": "uint256"
        }
      ],
      "name": "InsufficientTokenPayment",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidBootstrappingStartTime",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidBootstrappingTime",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidFeeCollector",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInSupplyToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidOutSupplyToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidProtocolAdmin",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidStreamEndTime",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidStreamStartTime",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidToSVersion",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidWithdrawAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotAdmin",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OperationNotAllowed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PaymentFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StreamAddressPredictionFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StreamDurationTooShort",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StreamEndMustBeAfterStart",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StreamInputTokenNotAccepted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StreamStartMustBeAfterBootstrapping",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TokenTransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Unauthorized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WaitingDurationTooShort",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "cap",
          "type": "uint256"
        }
      ],
      "name": "WithdrawAmountExceedsBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroOutSupplyNotAllowed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "subscriber",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "purchased",
          "type": "uint256"
        }
      ],
      "name": "Exited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newFeeCollector",
          "type": "address"
        }
      ],
      "name": "FeeCollectorUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "frozen",
          "type": "bool"
        }
      ],
      "name": "FrozenStateUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "ParamsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newProtocolAdmin",
          "type": "address"
        }
      ],
      "name": "ProtocolAdminUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "streamOutToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "streamInToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "streamFactoryAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "streamOutAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bootstrappingStartTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "streamStartTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "streamEndTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "threshold",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "streamName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "tosVersion",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "streamAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "streamId",
          "type": "uint16"
        }
      ],
      "name": "StreamCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "spentIn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "outRemaining",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum IStreamTypes.Status",
          "name": "status",
          "type": "uint8"
        }
      ],
      "name": "StreamFinalized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "enum IStreamTypes.Status",
          "name": "mainStatus",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lastUpdated",
          "type": "uint256"
        }
      ],
      "name": "StreamSynced",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "subscriber",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newShares",
          "type": "uint256"
        }
      ],
      "name": "Subscribed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "subscriber",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "NATIVE_TOKEN",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "acceptedInSupplyTokens",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_streamOutAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_outSupplyToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_bootstrappingStartTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_streamStartTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_streamEndTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_threshold",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_inSupplyToken",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_tosVersion",
          "type": "string"
        },
        {
          "internalType": "bytes32",
          "name": "_salt",
          "type": "bytes32"
        }
      ],
      "name": "createStream",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentStreamId",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "frozen",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getParams",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "streamCreationFee",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "streamCreationFeeToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "exitFeePercent",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minWaitingDuration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minBootstrappingDuration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minStreamDuration",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "feeCollector",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "protocolAdmin",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "tosVersion",
              "type": "string"
            }
          ],
          "internalType": "struct StreamFactory.Params",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_streamId",
          "type": "uint16"
        }
      ],
      "name": "getStream",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStreams",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "isAcceptedInSupplyToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_streamAddress",
          "type": "address"
        }
      ],
      "name": "isStream",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "params",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "streamCreationFee",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "streamCreationFeeToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "exitFeePercent",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minWaitingDuration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minBootstrappingDuration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minStreamDuration",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "feeCollector",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "protocolAdmin",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "tosVersion",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_salt",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "bytecodeHash",
          "type": "bytes32"
        }
      ],
      "name": "predictAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_frozen",
          "type": "bool"
        }
      ],
      "name": "setFrozen",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "streamAddresses",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokens_to_add",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "tokens_to_remove",
          "type": "address[]"
        }
      ],
      "name": "updateAcceptedTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeCollector",
          "type": "address"
        }
      ],
      "name": "updateFeeCollector",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_streamCreationFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_exitFeePercent",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minWaitingDuration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minBootstrappingDuration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minStreamDuration",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_tosVersion",
          "type": "string"
        }
      ],
      "name": "updateParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_protocolAdmin",
          "type": "address"
        }
      ],
      "name": "updateProtocolAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x23655ba908c47a583698fcf1a46d2a2ac24c670b12cb55395ad3af40e3077b3d",
  "receipt": {
    "to": null,
    "from": "0xB4eE189569597EFDB3bB48DB5ede8394d1D48e7b",
    "contractAddress": "0x4659490Fb09d6e6AAEE222Ed28E6309D9b63bA05",
    "transactionIndex": 62,
    "gasUsed": "3482752",
    "logsBloom": "0x
    "blockHash": "0x6512f4dfdcc03851d8c88a077a92f391a3f776f7c4db3cd13aad3b51031eca86",
    "transactionHash": "0x23655ba908c47a583698fcf1a46d2a2ac24c670b12cb55395ad3af40e3077b3d",
    "logs": [],
    "blockNumber": 7948881,
    "cumulativeGasUsed": "9211245",
    "status": 1,
    "byzantium": true
  },
  "args": [
    1,
    "0x0000000000000000000000000000000000000000",
    10000,
    1,
    1,
    1,
    [
      "0xbE5e6D39A06C323e2a213b49FDC8bfD8fC69a0E6"
    ],
    "0xB4eE189569597EFDB3bB48DB5ede8394d1D48e7b",
    "0xB4eE189569597EFDB3bB48DB5ede8394d1D48e7b",
    "1.0.0"
  ],
  "numDeployments": 1,
  "solcInputHash": "6e97e4d8d23708057404396368097ec5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_streamCreationFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_streamCreationFeeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_exitFeePercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minWaitingDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minBootstrappingDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minStreamDuration\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_acceptedInSupplyTokens\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_feeCollector\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_protocolAdmin\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_tosVersion\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"BootstrappingDurationTooShort\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ContractFrozen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FeeTransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientNativeToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientOutAmount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requiredTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenBalance\",\"type\":\"uint256\"}],\"name\":\"InsufficientTokenPayment\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidBootstrappingStartTime\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidBootstrappingTime\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidFeeCollector\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInSupplyToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidOutSupplyToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidProtocolAdmin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidStreamEndTime\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidStreamStartTime\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidToSVersion\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidWithdrawAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAdmin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OperationNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PaymentFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StreamAddressPredictionFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StreamDurationTooShort\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StreamEndMustBeAfterStart\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StreamInputTokenNotAccepted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StreamStartMustBeAfterBootstrapping\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenTransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WaitingDurationTooShort\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cap\",\"type\":\"uint256\"}],\"name\":\"WithdrawAmountExceedsBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroOutSupplyNotAllowed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"subscriber\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"purchased\",\"type\":\"uint256\"}],\"name\":\"Exited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newFeeCollector\",\"type\":\"address\"}],\"name\":\"FeeCollectorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenStateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ParamsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newProtocolAdmin\",\"type\":\"address\"}],\"name\":\"ProtocolAdminUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"streamOutToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"streamInToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"streamFactoryAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"streamOutAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bootstrappingStartTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"streamStartTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"streamEndTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"streamName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"tosVersion\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"streamAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"streamId\",\"type\":\"uint16\"}],\"name\":\"StreamCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"spentIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"outRemaining\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum IStreamTypes.Status\",\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"StreamFinalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum IStreamTypes.Status\",\"name\":\"mainStatus\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastUpdated\",\"type\":\"uint256\"}],\"name\":\"StreamSynced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"subscriber\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newShares\",\"type\":\"uint256\"}],\"name\":\"Subscribed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"subscriber\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"NATIVE_TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"acceptedInSupplyTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_streamOutAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_outSupplyToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_bootstrappingStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_streamStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_streamEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_inSupplyToken\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_tosVersion\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"_salt\",\"type\":\"bytes32\"}],\"name\":\"createStream\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentStreamId\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"frozen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getParams\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"streamCreationFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"streamCreationFeeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exitFeePercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minWaitingDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBootstrappingDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minStreamDuration\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"feeCollector\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"protocolAdmin\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"tosVersion\",\"type\":\"string\"}],\"internalType\":\"struct StreamFactory.Params\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_streamId\",\"type\":\"uint16\"}],\"name\":\"getStream\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStreams\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"isAcceptedInSupplyToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_streamAddress\",\"type\":\"address\"}],\"name\":\"isStream\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"params\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"streamCreationFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"streamCreationFeeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exitFeePercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minWaitingDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBootstrappingDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minStreamDuration\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"feeCollector\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"protocolAdmin\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"tosVersion\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_salt\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"bytecodeHash\",\"type\":\"bytes32\"}],\"name\":\"predictAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_frozen\",\"type\":\"bool\"}],\"name\":\"setFrozen\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"streamAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens_to_add\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"tokens_to_remove\",\"type\":\"address[]\"}],\"name\":\"updateAcceptedTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeCollector\",\"type\":\"address\"}],\"name\":\"updateFeeCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_streamCreationFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_exitFeePercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minWaitingDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minBootstrappingDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minStreamDuration\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tosVersion\",\"type\":\"string\"}],\"name\":\"updateParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_protocolAdmin\",\"type\":\"address\"}],\"name\":\"updateProtocolAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/StreamFactory.sol\":\"StreamFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/DecimalMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\n/**\\n * @title DecimalMath\\n * @dev Library for handling decimal math operations with fixed-point arithmetic\\n */\\nlibrary DecimalMath {\\n    // We'll use 6 decimal places for precision\\n    uint256 public constant DECIMAL_PRECISION = 1e6;\\n\\n    // Convert a regular number to a decimal representation\\n    function fromNumber(uint256 value) internal pure returns (uint256) {\\n        return value * DECIMAL_PRECISION;\\n    }\\n\\n    function floor(uint256 value) internal pure returns (uint256) {\\n        return value / DECIMAL_PRECISION;\\n    }\\n\\n    function ceil(uint256 value) internal pure returns (uint256) {\\n        return (value + DECIMAL_PRECISION - 1) / DECIMAL_PRECISION;\\n    }\\n\\n    // Multiply two decimal numbers\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return (a * b) / DECIMAL_PRECISION;\\n    }\\n\\n    // Divide two decimal numbers\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return (a * DECIMAL_PRECISION) / b;\\n    }\\n\\n    // Add two decimal numbers\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    // Subtract two decimal numbers\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n}\\n\",\"keccak256\":\"0xdb038cbc8622627104a809f5611671c530fef11321887f45571a3adcab32ba74\",\"license\":\"MIT\"},\"contracts/PositionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"./PositionTypes.sol\\\";   \\n\\ncontract PositionStorage {\\n    using PositionTypes for PositionTypes.Position;\\n\\n    mapping(address => PositionTypes.Position) private positions;\\n    address public immutable streamContractAddress;\\n\\n    constructor() {\\n        streamContractAddress = msg.sender;\\n    }\\n\\n    function getPosition(address _owner) external view returns (PositionTypes.Position memory) {\\n        return positions[_owner];\\n    }\\n\\n    modifier onlySender() {\\n        require(msg.sender == streamContractAddress, \\\"Position can only be set by the stream contract\\\");\\n        _;\\n    }\\n\\n    function createPosition(\\n        address owner,\\n        uint256 inBalance,\\n        uint256 shares,\\n        uint256 index\\n    ) external onlySender {\\n        positions[owner] = PositionTypes.Position(inBalance, shares, index, block.timestamp, 0, 0, 0, 0);\\n    }\\n\\n    function updatePosition(\\n        address owner,\\n        PositionTypes.Position memory position\\n    ) external onlySender {\\n        positions[owner] = position;\\n    }\\n\\n    function setExitDate(address owner, uint256 exitDate) external onlySender {\\n        positions[owner].exitDate = exitDate;\\n    }\\n}\\n\",\"keccak256\":\"0xf5b56d81625fd315cc1a54b027b39889def38c2c1bae955f0f0b5b660b9e05aa\",\"license\":\"MIT\"},\"contracts/PositionTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nlibrary PositionTypes {\\n    struct Position {\\n        uint256 inBalance;\\n        uint256 shares;\\n        uint256 index;\\n        uint256 lastUpdateTime;\\n        uint256 pendingReward;\\n        uint256 spentIn;\\n        uint256 purchased;\\n        uint256 exitDate;\\n    }\\n} \",\"keccak256\":\"0x3faa52f9c308a507bda7651b39975d6dd4a50599d5a5f353696b9c48153904f6\",\"license\":\"MIT\"},\"contracts/Stream.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"./PositionStorage.sol\\\";\\nimport \\\"./PositionTypes.sol\\\";\\nimport \\\"./StreamEvents.sol\\\";\\nimport \\\"./StreamErrors.sol\\\";\\nimport \\\"./StreamTypes.sol\\\";\\nimport \\\"./StreamFactory.sol\\\";\\nimport \\\"./DecimalMath.sol\\\";\\nimport \\\"./StreamMathLib.sol\\\";\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\ninterface IERC20 {\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address to, uint256 amount) external returns (bool);\\n}\\n\\ncontract Stream is IStreamErrors, IStreamEvents {\\n    address public creator;\\n    address public positionStorageAddress;\\n    string public name;\\n\\n    IStreamTypes.StreamState public streamState;\\n    IStreamTypes.StreamTokens public streamTokens;\\n    IStreamTypes.StreamMetadata public streamMetadata;\\n    IStreamTypes.StatusInfo public streamStatus;\\n    IStreamTypes.StreamTimes public streamTimes;\\n    address public factory;\\n\\n    PositionStorage public positionStorage;\\n\\n    // constructor should return its address\\n    constructor(\\n        uint256 _streamOutAmount,\\n        address _outSupplyToken,\\n        uint256 _bootstrappingStartTime,\\n        uint256 _streamStartTime,\\n        uint256 _streamEndTime,\\n        uint256 _threshold,\\n        string memory _name,\\n        address _inSupplyToken,\\n        address _creator\\n    ) {\\n        // Validate that output token is a valid ERC20\\n        if (!isValidERC20(_outSupplyToken, msg.sender)) {\\n            revert InvalidOutSupplyToken();\\n        }\\n\\n        // Check if the contract has enough balance of output token\\n        if (!hasEnoughBalance(_outSupplyToken, address(this), _streamOutAmount)) {\\n            revert InsufficientOutAmount();\\n        }\\n\\n        // Validate that in token is a valid ERC20\\n        if (!isValidERC20(_inSupplyToken, msg.sender)) {\\n            revert InvalidInSupplyToken();\\n        }\\n\\n        creator = _creator;\\n        positionStorage = new PositionStorage();\\n        positionStorageAddress = address(positionStorage);\\n\\n        streamState = IStreamTypes.StreamState({\\n            distIndex: 0,\\n            outRemaining: _streamOutAmount,\\n            inSupply: 0,\\n            spentIn: 0,\\n            shares: 0,\\n            currentStreamedPrice: 0,\\n            threshold: _threshold,\\n            outSupply: _streamOutAmount,\\n            lastUpdated: block.timestamp\\n        });\\n\\n        streamTokens = IStreamTypes.StreamTokens({ inSupplyToken: _inSupplyToken, outSupplyToken: _outSupplyToken });\\n\\n        streamMetadata = IStreamTypes.StreamMetadata({ name: _name });\\n\\n        streamStatus.status = IStreamTypes.Status.Waiting;\\n\\n        streamTimes = IStreamTypes.StreamTimes({\\n            bootstrappingStartTime: _bootstrappingStartTime,\\n            streamStartTime: _streamStartTime,\\n            streamEndTime: _streamEndTime\\n        });\\n\\n        // Store the factory address\\n        factory = msg.sender;\\n    }\\n\\n    function syncStream(\\n        IStreamTypes.StreamState memory state,\\n        IStreamTypes.StreamTimes memory times,\\n        uint256 nowTime\\n    ) internal pure returns (IStreamTypes.StreamState memory) {\\n        uint256 diff = StreamMathLib.calculateDiff(\\n            nowTime,\\n            times.streamStartTime,\\n            times.streamEndTime,\\n            state.lastUpdated\\n        );\\n\\n        if (diff > 0) {\\n            IStreamTypes.StreamState memory updatedState = StreamMathLib.calculateUpdatedState(state, diff);\\n            return updatedState;\\n        }\\n\\n        return state;\\n    }\\n\\n    function saveStreamState(IStreamTypes.StreamState memory state) internal {\\n        streamState = state;\\n    }\\n\\n    function loadStreamState() internal view returns (IStreamTypes.StreamState memory) {\\n        return streamState;\\n    }\\n\\n    /**\\n     * @dev Validates if an operation is allowed based on the current stream status\\n     * @param allowedStatuses Array of allowed statuses for the operation\\n     * @return bool True if the operation is allowed, false otherwise\\n     */\\n    function isOperationAllowed(\\n        IStreamTypes.Status currentStatus,\\n        IStreamTypes.Status[] memory allowedStatuses\\n    ) internal pure returns (bool) {\\n        for (uint256 i = 0; i < allowedStatuses.length; i++) {\\n            if (currentStatus == allowedStatuses[i]) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @dev Safely transfers tokens from the contract to a recipient\\n     * @param tokenAddress Address of the token to transfer\\n     * @param recipient Address of the recipient\\n     * @param amount Amount of tokens to transfer\\n     * @return bool True if the transfer was successful\\n     */\\n    function safeTokenTransfer(address tokenAddress, address recipient, uint256 amount) internal returns (bool) {\\n        if (amount == 0 || recipient == address(0)) {\\n            return true;\\n        }\\n\\n        IERC20 token = IERC20(tokenAddress);\\n        bool success = token.transfer(recipient, amount);\\n        if (!success) {\\n            revert PaymentFailed();\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Checks if the threshold has been reached for stream finalization\\n     * @return bool True if the threshold has been reached, false otherwise\\n     */\\n    function isThresholdReached(IStreamTypes.StreamState memory state) internal pure returns (bool) {\\n        return state.spentIn >= state.threshold;\\n    }\\n\\n    /**\\n     * @dev Validates a position exists and is active\\n     * @param position The position to validate\\n     * @return bool True if the position is valid and active\\n     */\\n    function isValidActivePosition(PositionTypes.Position memory position) internal pure returns (bool) {\\n        return position.shares > 0 && position.exitDate == 0;\\n    }\\n\\n    function withdraw(uint256 cap) external {\\n        if (cap == 0) {\\n            revert InvalidWithdrawAmount();\\n        }\\n\\n        // Load position once\\n        PositionTypes.Position memory position = loadPosition(msg.sender);\\n        if (position.shares == 0) {\\n            revert OperationNotAllowed();\\n        }\\n\\n        if (cap > position.inBalance) {\\n            revert WithdrawAmountExceedsBalance(cap);\\n        }\\n\\n        // load stream times\\n        IStreamTypes.StreamTimes memory times = loadStreamTimes();\\n\\n        // Load and update status\\n        IStreamTypes.StatusInfo memory status = loadStreamStatus();\\n        status = syncStreamStatus(status, times, block.timestamp);\\n\\n        // Check if operation is allowed\\n        IStreamTypes.Status[] memory allowedStatuses = new IStreamTypes.Status[](2);\\n        allowedStatuses[0] = IStreamTypes.Status.Active;\\n        allowedStatuses[1] = IStreamTypes.Status.Bootstrapping;\\n        isOperationAllowed(status.status, allowedStatuses);\\n\\n        // Save the updated status\\n        saveStreamStatus(status);\\n\\n        // Load and update stream state\\n        IStreamTypes.StreamState memory state = loadStream();\\n        state = syncStream(state, times, block.timestamp);\\n\\n        // Sync position with the updated state\\n        position = StreamMathLib.syncPosition(position, state.distIndex, state.shares, state.inSupply, block.timestamp);\\n\\n        if (cap == position.inBalance) {\\n            position.shares = 0;\\n            position.inBalance = 0;\\n        } else {\\n            position.shares =\\n                position.shares -\\n                StreamMathLib.computeSharesAmount(cap, true, state.inSupply, position.shares);\\n            position.inBalance = position.inBalance - cap;\\n        }\\n\\n        // Update stream state\\n        state.inSupply = state.inSupply - cap;\\n        state.shares = state.shares - StreamMathLib.computeSharesAmount(cap, true, state.inSupply, state.shares);\\n\\n        // Save everything at the end\\n        savePosition(msg.sender, position);\\n        saveStream(state);\\n\\n        // Token transfer\\n        safeTokenTransfer(streamTokens.inSupplyToken, msg.sender, cap);\\n        emit Withdrawn(msg.sender, cap);\\n    }\\n\\n    function subscribe(uint256 amountIn) external payable {\\n        // Load status once\\n        IStreamTypes.StatusInfo memory status = loadStreamStatus();\\n        IStreamTypes.StreamTimes memory times = loadStreamTimes();\\n        // Update the loaded status\\n        status = syncStreamStatus(status, times, block.timestamp);\\n\\n        // Check if operation is allowed with the updated status\\n        IStreamTypes.Status[] memory allowedStatuses = new IStreamTypes.Status[](2);\\n        allowedStatuses[0] = IStreamTypes.Status.Bootstrapping;\\n        allowedStatuses[1] = IStreamTypes.Status.Active;\\n        isOperationAllowed(status.status, allowedStatuses);\\n        // Save the updated status\\n        saveStreamStatus(status);\\n\\n        // Validate if sender has enough tokens\\n        IERC20 streamInToken = IERC20(streamTokens.inSupplyToken);\\n        uint256 streamInTokenBalance = streamInToken.balanceOf(msg.sender);\\n        if (streamInTokenBalance < amountIn) {\\n            revert InsufficientTokenPayment(amountIn, streamInTokenBalance);\\n        }\\n\\n        // Transfer tokens from sender to this contract\\n        bool success = streamInToken.transferFrom(msg.sender, address(this), amountIn);\\n        if (!success) {\\n            revert PaymentFailed();\\n        }\\n\\n        // Load position once\\n        PositionTypes.Position memory position = loadPosition(msg.sender);\\n\\n        // Load stream state once\\n        IStreamTypes.StreamState memory state = loadStream();\\n\\n        // Update the stream state\\n        state = syncStream(state);\\n\\n        uint256 newShares = 0;\\n\\n        if (position.shares == 0) {\\n            // New position case\\n            newShares = StreamMathLib.computeSharesAmount(amountIn, false, state.inSupply, state.shares);\\n            position = PositionTypes.Position({\\n                inBalance: amountIn,\\n                shares: newShares,\\n                index: state.distIndex,\\n                lastUpdateTime: block.timestamp,\\n                pendingReward: 0,\\n                spentIn: 0,\\n                purchased: 0,\\n                exitDate: 0\\n            });\\n        } else {\\n            // Update existing position\\n            newShares = StreamMathLib.computeSharesAmount(amountIn, false, state.inSupply, state.shares);\\n            position = StreamMathLib.syncPosition(\\n                position,\\n                state.distIndex,\\n                state.shares,\\n                state.inSupply,\\n                block.timestamp\\n            );\\n            position.inBalance += amountIn;\\n            position.shares += newShares;\\n        }\\n\\n        // Update StreamState\\n        state.inSupply += amountIn;\\n        state.shares += newShares;\\n\\n        // Save everything once we're done modifying\\n        savePosition(msg.sender, position);\\n        saveStream(state);\\n\\n        // Emit event\\n        emit Subscribed(msg.sender, amountIn, newShares);\\n    }\\n\\n    function exitStream() external {\\n        // Load position\\n        PositionTypes.Position memory position = loadPosition(msg.sender);\\n\\n        // Check if position is valid and active\\n        if (!isValidActivePosition(position)) {\\n            revert OperationNotAllowed();\\n        }\\n\\n        // Load and update stream state\\n        IStreamTypes.StreamState memory state = loadStream();\\n        state = syncStream(state);\\n\\n        // Sync position with updated state\\n        position = StreamMathLib.syncPosition(position, state.distIndex, state.shares, state.inSupply, block.timestamp);\\n\\n        // Load and update status\\n        IStreamTypes.StatusInfo memory status = loadStreamStatus();\\n        IStreamTypes.StreamTimes memory times = loadStreamTimes();\\n        status = syncStreamStatus(status, times, block.timestamp);\\n\\n        bool thresholdReached = isThresholdReached(state);\\n\\n        if (\\n            (status.status == IStreamTypes.Status.Ended && thresholdReached) ||\\n            (status.status == IStreamTypes.Status.FinalizedStreamed)\\n        ) {\\n            // Normal exit\\n            // Refund in_amount remaining if any in position\\n            if (position.inBalance > 0) {\\n                safeTokenTransfer(streamTokens.inSupplyToken, msg.sender, position.inBalance);\\n            }\\n            // send out_amount earned to position owner\\n            safeTokenTransfer(streamTokens.outSupplyToken, msg.sender, position.purchased);\\n        } else {\\n            // Refund total in_amount\\n            uint256 total_amount = position.inBalance + position.spentIn;\\n            safeTokenTransfer(streamTokens.inSupplyToken, msg.sender, total_amount);\\n        }\\n\\n        // Set exit date\\n        position.exitDate = block.timestamp;\\n\\n        // Save everything\\n        saveStreamStatus(status);\\n        saveStream(state);\\n        savePosition(msg.sender, position);\\n\\n        emit Exited(msg.sender, position.purchased);\\n    }\\n\\n    function finalizeStream() external {\\n        assertIsCreator();\\n\\n        // Load and update status\\n        IStreamTypes.StatusInfo memory status = loadStreamStatus();\\n        IStreamTypes.StreamTimes memory times = loadStreamTimes();\\n        status = syncStreamStatus(status, times, block.timestamp);\\n\\n        // Check if operation is allowed\\n        IStreamTypes.Status[] memory allowedStatuses = new IStreamTypes.Status[](1);\\n        allowedStatuses[0] = IStreamTypes.Status.Ended;\\n        isOperationAllowed(status.status, allowedStatuses);\\n\\n        // Load and update stream state\\n        IStreamTypes.StreamState memory state = loadStream();\\n        state = syncStream(state, times, block.timestamp);\\n\\n        bool thresholdReached = isThresholdReached(state);\\n\\n        if (thresholdReached) {\\n            // Get fee collector from factory\\n            StreamFactory factoryContract = StreamFactory(factory);\\n            StreamFactory.Params memory params = factoryContract.getParams();\\n            address feeCollector = params.feeCollector;\\n            uint256 exitFeePercent = params.exitFeePercent;\\n            console.log(\\\"exitFeePercent: %s\\\", exitFeePercent);\\n            console.log(\\\"state.spentIn: %s\\\", state.spentIn);\\n\\n            // Calculate exit fee\\n            (uint256 feeAmount, uint256 creatorRevenue) = StreamMathLib.calculateExitFee(state.spentIn, exitFeePercent);\\n            console.log(\\\"feeAmount: %s\\\", feeAmount);\\n            console.log(\\\"creatorRevenue: %s\\\", creatorRevenue);\\n\\n            // Transfer fee to fee collector if needed\\n            if (feeAmount > 0) {\\n                safeTokenTransfer(streamTokens.inSupplyToken, feeCollector, feeAmount);\\n            }\\n\\n            // Send revenue to creator\\n            safeTokenTransfer(streamTokens.inSupplyToken, creator, creatorRevenue);\\n\\n            // Update status\\n            status.status = IStreamTypes.Status.FinalizedStreamed;\\n\\n            // Refund out tokens to creator if left any\\n            if (state.outRemaining > 0) {\\n                safeTokenTransfer(streamTokens.outSupplyToken, creator, state.outRemaining);\\n            }\\n        } else {\\n            // Update status\\n            status.status = IStreamTypes.Status.FinalizedRefunded;\\n\\n            // Refund out tokens to creator\\n            safeTokenTransfer(streamTokens.outSupplyToken, creator, state.outSupply);\\n        }\\n\\n        // Save everything\\n        saveStreamStatus(status);\\n        saveStream(state);\\n\\n        emit StreamFinalized(creator, state.spentIn, state.outRemaining, status.status);\\n    }\\n\\n    function syncStreamExternal() external {\\n        // Load, update and save stream state\\n        IStreamTypes.StreamState memory state = loadStream();\\n        IStreamTypes.StreamTimes memory times = loadStreamTimes();\\n        state = syncStream(state, times, block.timestamp);\\n        saveStream(state);\\n\\n        // Load, update and save status\\n        IStreamTypes.StatusInfo memory status = loadStreamStatus();\\n        status = syncStreamStatus(status, times, block.timestamp);\\n        saveStreamStatus(status);\\n    }\\n\\n    /**\\n     * @dev Checks if an address is a valid ERC20 token\\n     * @param tokenAddress The token address to validate\\n     * @param testAccount The account to use for testing the token interface\\n     * @return isValid True if the address implements the ERC20 interface\\n     */\\n    function isValidERC20(address tokenAddress, address testAccount) internal view returns (bool isValid) {\\n        if (tokenAddress == address(0)) {\\n            return false;\\n        }\\n\\n        try IERC20(tokenAddress).balanceOf(testAccount) returns (uint256) {\\n            return true;\\n        } catch {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Checks if an account has sufficient token balance\\n     * @param tokenAddress The ERC20 token address\\n     * @param account The account to check balance for\\n     * @param requiredAmount The minimum required balance\\n     * @return hasEnoughBalance True if the account has sufficient balance\\n     */\\n    function hasEnoughBalance(\\n        address tokenAddress,\\n        address account,\\n        uint256 requiredAmount\\n    ) internal view returns (bool) {\\n        IERC20 token = IERC20(tokenAddress);\\n        uint256 balance = token.balanceOf(account);\\n        return balance >= requiredAmount;\\n    }\\n\\n    // Load helpers\\n    function loadStream() internal view returns (IStreamTypes.StreamState memory) {\\n        return streamState;\\n    }\\n\\n    function loadStreamStatus() internal view returns (IStreamTypes.StatusInfo memory) {\\n        return streamStatus;\\n    }\\n\\n    function loadPosition(address user) internal view returns (PositionTypes.Position memory) {\\n        return positionStorage.getPosition(user);\\n    }\\n\\n    function loadStreamTimes() internal view returns (IStreamTypes.StreamTimes memory) {\\n        return streamTimes;\\n    }\\n\\n    // Save helpers\\n    function saveStream(IStreamTypes.StreamState memory state) internal {\\n        streamState = state;\\n    }\\n\\n    function saveStreamStatus(IStreamTypes.StatusInfo memory status) internal {\\n        streamStatus = status;\\n    }\\n\\n    function savePosition(address user, PositionTypes.Position memory position) internal {\\n        positionStorage.updatePosition(user, position);\\n    }\\n\\n    // Refactored syncStream to work directly with a provided memory object\\n    function syncStream(IStreamTypes.StreamState memory state) internal view returns (IStreamTypes.StreamState memory) {\\n        IStreamTypes.StreamTimes memory times = loadStreamTimes();\\n\\n        uint256 diff = StreamMathLib.calculateDiff(\\n            block.timestamp,\\n            times.streamStartTime,\\n            times.streamEndTime,\\n            state.lastUpdated\\n        );\\n\\n        if (diff > 0) {\\n            state = StreamMathLib.calculateUpdatedState(state, diff);\\n            state.lastUpdated = block.timestamp;\\n        }\\n\\n        return state;\\n    }\\n\\n    // Refactored syncStreamStatus to work directly with a provided memory object\\n    function syncStreamStatus(\\n        IStreamTypes.StatusInfo memory status,\\n        IStreamTypes.StreamTimes memory times,\\n        uint256 nowTime\\n    ) internal pure returns (IStreamTypes.StatusInfo memory) {\\n        status.status = StreamMathLib.calculateStreamStatus(\\n            status.status,\\n            nowTime,\\n            times.bootstrappingStartTime,\\n            times.streamStartTime,\\n            times.streamEndTime\\n        );\\n\\n        return status;\\n    }\\n\\n    /**\\n     * @dev Ensure value is non-zero\\n     * @param value The value to check\\n     * @param errorMessage The error message to revert with\\n     */\\n    function assertNonZero(uint256 value, string memory errorMessage) internal pure {\\n        if (value == 0) revert(errorMessage);\\n    }\\n\\n    /**\\n     * @dev Ensure sender is the creator\\n     */\\n    function assertIsCreator() internal view {\\n        if (msg.sender != creator) revert Unauthorized();\\n    }\\n\\n    /**\\n     * @dev Ensure status matches expected value\\n     * @param status Current status to check\\n     * @param expectedStatus Status that is expected\\n     */\\n    function assertStatus(IStreamTypes.Status status, IStreamTypes.Status expectedStatus) internal pure {\\n        if (status != expectedStatus) revert OperationNotAllowed();\\n    }\\n\\n    /**\\n     * @dev Assert that the cap does not exceed balance\\n     * @param cap Amount to withdraw\\n     * @param balance Available balance\\n     */\\n    function assertWithinBalance(uint256 cap, uint256 balance) internal pure {\\n        if (cap > balance) revert WithdrawAmountExceedsBalance(cap);\\n    }\\n}\\n\",\"keccak256\":\"0x9acd9abb17f73a4c5f8397ddc5ffdadadaa7827ad150d23bd5e12938a76810af\",\"license\":\"MIT\"},\"contracts/StreamErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\ninterface IStreamErrors {\\n    // Stream errors\\n    error InvalidBootstrappingStartTime();\\n    error InvalidStreamStartTime();\\n    error InvalidStreamEndTime();\\n    error StreamDurationTooShort();\\n    error BootstrappingDurationTooShort();\\n    error WaitingDurationTooShort();\\n    error InsufficientTokenPayment(uint256 requiredTokenAmount, uint256 tokenBalance);\\n    error InvalidOutSupplyToken();\\n    error InvalidInSupplyToken();\\n    error PaymentFailed();\\n    error OperationNotAllowed();\\n    error Unauthorized();\\n    error InvalidWithdrawAmount();\\n    error WithdrawAmountExceedsBalance(uint256 cap);\\n    error InsufficientOutAmount();\\n    // StreamFactory errors\\n    error ContractFrozen();\\n    error ZeroOutSupplyNotAllowed();\\n    error StreamInputTokenNotAccepted();\\n    error InvalidBootstrappingTime();\\n    error StreamStartMustBeAfterBootstrapping();\\n    error StreamEndMustBeAfterStart();\\n    error InvalidToSVersion();\\n    error InsufficientNativeToken();\\n    error FeeTransferFailed();\\n    error TokenTransferFailed();\\n    error StreamAddressPredictionFailed();\\n    error InvalidFeeCollector();\\n    error InvalidProtocolAdmin();\\n    error NotAdmin();\\n} \",\"keccak256\":\"0x35981c293ad8143f03db46b4af890a12c20cb48a78fbb326551121f273c6a9d8\",\"license\":\"MIT\"},\"contracts/StreamEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"./StreamTypes.sol\\\";\\n\\ninterface IStreamEvents {\\n    event StreamCreated(\\n        address indexed streamOutToken,\\n        address indexed streamInToken,\\n        address indexed streamFactoryAddress,\\n        uint256 streamOutAmount,\\n        uint256 bootstrappingStartTime,\\n        uint256 streamStartTime,\\n        uint256 streamEndTime,\\n        uint256 threshold,\\n        string streamName,\\n        string tosVersion,\\n        address streamAddress,\\n        uint16 streamId\\n    );\\n\\n    event StreamSynced(IStreamTypes.Status mainStatus, uint256 lastUpdated);\\n\\n    event Subscribed(address indexed subscriber, uint256 amountIn, uint256 newShares);\\n    event Withdrawn(address indexed subscriber, uint256 amountIn);\\n    event Exited(address indexed subscriber, uint256 purchased);\\n    event StreamFinalized(address indexed creator, uint256 spentIn, uint256 outRemaining, IStreamTypes.Status status);\\n    event ParamsUpdated();\\n    event FeeCollectorUpdated(address newFeeCollector);\\n    event ProtocolAdminUpdated(address newProtocolAdmin);\\n    event FrozenStateUpdated(bool frozen);\\n}\\n\",\"keccak256\":\"0xba6c26dcb6f3491d054f36267adec361c946853a106ae5c6300a3f5ad1c7aa9f\",\"license\":\"MIT\"},\"contracts/StreamFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"./Stream.sol\\\";\\nimport \\\"./StreamEvents.sol\\\";\\nimport \\\"./StreamErrors.sol\\\";\\n\\ncontract StreamFactory is IStreamEvents, IStreamErrors {\\n    struct Params {\\n        uint256 streamCreationFee; // Fixed fee to create a stream\\n        address streamCreationFeeToken; // Token used for creation fee,\\n        uint256 exitFeePercent; // Fee percentage when exiting a stream\\n        uint256 minWaitingDuration; // Minimum waiting period\\n        uint256 minBootstrappingDuration; // Minimum bootstrapping period\\n        uint256 minStreamDuration; // Minimum duration for a stream\\n        address feeCollector; // Address where fees are collected\\n        address protocolAdmin; // Admin address for protocol\\n        string tosVersion; // Terms of service version\\n    }\\n\\n    mapping(address => bool) public acceptedInSupplyTokens;\\n\\n    address public constant NATIVE_TOKEN = address(0);\\n\\n    uint16 public currentStreamId;\\n\\n    Params public params;\\n    mapping(uint16 => address) public streamAddresses;\\n\\n    bool public frozen;\\n\\n    constructor(\\n        uint256 _streamCreationFee,\\n        address _streamCreationFeeToken,\\n        uint256 _exitFeePercent,\\n        uint256 _minWaitingDuration,\\n        uint256 _minBootstrappingDuration,\\n        uint256 _minStreamDuration,\\n        address[] memory _acceptedInSupplyTokens,\\n        address _feeCollector,\\n        address _protocolAdmin,\\n        string memory _tosVersion\\n    ) {\\n        if (_feeCollector == address(0)) revert InvalidFeeCollector();\\n        if (_protocolAdmin == address(0)) revert InvalidProtocolAdmin();\\n\\n        params = Params({\\n            streamCreationFee: _streamCreationFee,\\n            streamCreationFeeToken: _streamCreationFeeToken,\\n            exitFeePercent: _exitFeePercent,\\n            minWaitingDuration: _minWaitingDuration,\\n            minBootstrappingDuration: _minBootstrappingDuration,\\n            minStreamDuration: _minStreamDuration,\\n            feeCollector: _feeCollector,\\n            protocolAdmin: _protocolAdmin,\\n            tosVersion: _tosVersion\\n        });\\n\\n        // Set accepted tokens\\n        for (uint i = 0; i < _acceptedInSupplyTokens.length; i++) {\\n            acceptedInSupplyTokens[_acceptedInSupplyTokens[i]] = true;\\n        }\\n        currentStreamId = 0;\\n    }\\n\\n    modifier onlyAdmin() {\\n        if (msg.sender != params.protocolAdmin) revert NotAdmin();\\n        _;\\n    }\\n\\n    function updateParams(\\n        uint256 _streamCreationFee,\\n        uint256 _exitFeePercent,\\n        uint256 _minWaitingDuration,\\n        uint256 _minBootstrappingDuration,\\n        uint256 _minStreamDuration,\\n        string memory _tosVersion\\n    ) external onlyAdmin {\\n        params.streamCreationFee = _streamCreationFee;\\n        params.exitFeePercent = _exitFeePercent;\\n        params.minWaitingDuration = _minWaitingDuration;\\n        params.minBootstrappingDuration = _minBootstrappingDuration;\\n        params.minStreamDuration = _minStreamDuration;\\n        params.tosVersion = _tosVersion;\\n\\n        emit ParamsUpdated();\\n    }\\n\\n    function updateFeeCollector(address _feeCollector) external onlyAdmin {\\n        if (_feeCollector == address(0)) revert InvalidFeeCollector();\\n        params.feeCollector = _feeCollector;\\n        emit FeeCollectorUpdated(_feeCollector);\\n    }\\n\\n    function updateProtocolAdmin(address _protocolAdmin) external onlyAdmin {\\n        if (_protocolAdmin == address(0)) revert InvalidProtocolAdmin();\\n        params.protocolAdmin = _protocolAdmin;\\n        emit ProtocolAdminUpdated(_protocolAdmin);\\n    }\\n\\n    function updateAcceptedTokens(\\n        address[] calldata tokens_to_add,\\n        address[] calldata tokens_to_remove\\n    ) external onlyAdmin {\\n        for (uint i = 0; i < tokens_to_add.length; i++) {\\n            acceptedInSupplyTokens[tokens_to_add[i]] = true;\\n        }\\n        for (uint i = 0; i < tokens_to_remove.length; i++) {\\n            acceptedInSupplyTokens[tokens_to_remove[i]] = false;\\n        }\\n    }\\n\\n    function isAcceptedInSupplyToken(address token) public view returns (bool) {\\n        return acceptedInSupplyTokens[token];\\n    }\\n\\n    function createStream(\\n        uint256 _streamOutAmount,\\n        address _outSupplyToken,\\n        uint256 _bootstrappingStartTime,\\n        uint256 _streamStartTime,\\n        uint256 _streamEndTime,\\n        uint256 _threshold,\\n        string memory _name,\\n        address _inSupplyToken,\\n        string memory _tosVersion,\\n        bytes32 _salt\\n    ) external payable {\\n        // Check if contract is accepting new streams (not frozen)\\n        if (frozen) revert ContractFrozen();\\n\\n        // Validate input parameters\\n        if (_streamOutAmount == 0) revert ZeroOutSupplyNotAllowed();\\n        if (!acceptedInSupplyTokens[_inSupplyToken]) revert StreamInputTokenNotAccepted();\\n\\n        // Validate time parameters using validateStreamTimes\\n        validateStreamTimes(block.timestamp, _bootstrappingStartTime, _streamStartTime, _streamEndTime);\\n\\n        // Validate TOS version\\n        if (keccak256(abi.encodePacked(_tosVersion)) != keccak256(abi.encodePacked(params.tosVersion)))\\n            revert InvalidToSVersion();\\n\\n        // Load creation fee\\n        uint256 creationFee = params.streamCreationFee;\\n        if (creationFee > 0) {\\n            if (params.streamCreationFeeToken == address(0)) {\\n                // Native token\\n                if (msg.value < creationFee) revert InsufficientNativeToken();\\n                // Transfer fee to fee collector\\n                if (!payable(params.feeCollector).send(creationFee)) revert FeeTransferFailed();\\n            } else {\\n                // ERC20 token\\n                if (\\n                    !IERC20(params.streamCreationFeeToken).transferFrom(\\n                        msg.sender,\\n                        address(params.feeCollector),\\n                        creationFee\\n                    )\\n                ) revert TokenTransferFailed();\\n            }\\n        }\\n        // Predict stream address\\n        bytes32 bytecodeHash = keccak256(\\n            abi.encodePacked(\\n                type(Stream).creationCode,\\n                abi.encode(\\n                    _streamOutAmount,\\n                    _outSupplyToken,\\n                    _bootstrappingStartTime,\\n                    _streamStartTime,\\n                    _streamEndTime,\\n                    _threshold,\\n                    _name,\\n                    _inSupplyToken,\\n                    msg.sender\\n                )\\n            )\\n        );\\n\\n        address predictedAddress = predictAddress(address(this), _salt, bytecodeHash);\\n        // Transfer out denom to stream contract\\n        if (!IERC20(_outSupplyToken).transferFrom(msg.sender, predictedAddress, _streamOutAmount))\\n            revert TokenTransferFailed();\\n        // Deploy new stream contract with all parameters\\n        Stream newStream = new Stream{ salt: _salt }(\\n            _streamOutAmount,\\n            _outSupplyToken,\\n            _bootstrappingStartTime,\\n            _streamStartTime,\\n            _streamEndTime,\\n            _threshold,\\n            _name,\\n            _inSupplyToken,\\n            msg.sender\\n        );\\n\\n        if (address(newStream) != predictedAddress) revert StreamAddressPredictionFailed();\\n        streamAddresses[currentStreamId] = address(newStream);\\n\\n        emit StreamCreated(\\n            _outSupplyToken,\\n            _inSupplyToken,\\n            address(this),\\n            _streamOutAmount,\\n            _bootstrappingStartTime,\\n            _streamStartTime,\\n            _streamEndTime,\\n            _threshold,\\n            _name,\\n            _tosVersion,\\n            address(newStream),\\n            currentStreamId\\n        );\\n        currentStreamId++;\\n    }\\n\\n    function getStreams() external view returns (address[] memory) {\\n        address[] memory streams = new address[](currentStreamId);\\n        for (uint16 i = 0; i < currentStreamId; i++) {\\n            streams[i] = streamAddresses[i];\\n        }\\n        return streams;\\n    }\\n\\n    function getStream(uint16 _streamId) external view returns (address) {\\n        return streamAddresses[_streamId];\\n    }\\n\\n    function isStream(address _streamAddress) external view returns (bool) {\\n        for (uint16 i = 0; i < currentStreamId; i++) {\\n            if (streamAddresses[i] == _streamAddress) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function getParams() external view returns (Params memory) {\\n        return params;\\n    }\\n\\n    // Optional: Add ability to transfer ownership\\n    function transferOwnership(address newOwner) external onlyAdmin {\\n        if (newOwner == address(0)) revert InvalidProtocolAdmin();\\n        params.protocolAdmin = newOwner;\\n    }\\n\\n    function setFrozen(bool _frozen) external onlyAdmin {\\n        frozen = _frozen;\\n        emit FrozenStateUpdated(_frozen);\\n    }\\n\\n    function predictAddress(address creator, bytes32 _salt, bytes32 bytecodeHash) public pure returns (address) {\\n        return address(uint160(uint(keccak256(abi.encodePacked(bytes1(0xff), creator, _salt, bytecodeHash)))));\\n    }\\n\\n    function validateStreamTimes(\\n        uint256 nowTime,\\n        uint256 _bootstrappingStartTime,\\n        uint256 _startTime,\\n        uint256 _endTime\\n    ) internal view {\\n        if (nowTime > _bootstrappingStartTime) revert InvalidBootstrappingStartTime();\\n        if (_bootstrappingStartTime > _startTime) revert InvalidStreamStartTime();\\n        if (_startTime > _endTime) revert InvalidStreamEndTime();\\n        if (_endTime - _startTime < params.minStreamDuration) revert StreamDurationTooShort();\\n        if (_startTime - _bootstrappingStartTime < params.minBootstrappingDuration)\\n            revert BootstrappingDurationTooShort();\\n        if (_bootstrappingStartTime - nowTime < params.minWaitingDuration) revert WaitingDurationTooShort();\\n    }\\n}\\n\",\"keccak256\":\"0x56efe4a5f6ad863d5ab8ae0dee787b3fdc0ddcd80c2926f046e2989d896d7c17\",\"license\":\"MIT\"},\"contracts/StreamMathLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./StreamTypes.sol\\\";\\nimport \\\"./DecimalMath.sol\\\";\\nimport \\\"./PositionTypes.sol\\\";\\n\\nlibrary StreamMathLib {\\n    /**\\n     * @dev Calculates the time difference ratio between current time and last updated time\\n     * @param currentTimestamp Current timestamp\\n     * @param streamStartTime Timestamp when the stream starts\\n     * @param streamEndTime Timestamp when the stream ends\\n     * @param lastUpdated Timestamp when the stream was last updated\\n     * @return The ratio of time elapsed since last update compared to total remaining time (scaled by 1e18)\\n     */\\n    function calculateDiff(\\n        uint256 currentTimestamp,\\n        uint256 streamStartTime,\\n        uint256 streamEndTime,\\n        uint256 lastUpdated\\n    ) internal pure returns (uint256) {\\n        // If the stream is not started yet or already ended, return 0\\n        if (currentTimestamp < streamStartTime || lastUpdated >= streamEndTime) {\\n            return 0;\\n        }\\n\\n        // If lastUpdated is before start time, set it to start time\\n        uint256 effectiveLastUpdated = lastUpdated;\\n        if (effectiveLastUpdated < streamStartTime) {\\n            effectiveLastUpdated = streamStartTime;\\n        }\\n\\n        // If current time is past end time, use end time instead\\n        uint256 effectiveNow = currentTimestamp;\\n        if (effectiveNow > streamEndTime) {\\n            effectiveNow = streamEndTime;\\n        }\\n\\n        uint256 numerator = effectiveNow - effectiveLastUpdated;\\n        uint256 denominator = streamEndTime - effectiveLastUpdated;\\n\\n        if (denominator == 0 || numerator == 0) {\\n            return 0;\\n        }\\n        // Return ratio of time elapsed since last update compared to total remaining time\\n        return (numerator * 1e18) / denominator;\\n    }\\n\\n    /**\\n     * @dev Calculates the stream status based on the current state and timestamp\\n     * @param currentStatus Current status of the stream\\n     * @param currentTime Current timestamp to check against\\n     * @param bootstrappingStartTime Timestamp when bootstrapping phase starts\\n     * @param streamStartTime Timestamp when active streaming starts\\n     * @param streamEndTime Timestamp when streaming ends\\n     * @return IStreamTypes.Status The calculated stream status\\n     */\\n    function calculateStreamStatus(\\n        IStreamTypes.Status currentStatus,\\n        uint256 currentTime,\\n        uint256 bootstrappingStartTime,\\n        uint256 streamStartTime,\\n        uint256 streamEndTime\\n    ) internal pure returns (IStreamTypes.Status) {\\n        // Don't update if stream is in a final state\\n        if (\\n            currentStatus == IStreamTypes.Status.Cancelled ||\\n            currentStatus == IStreamTypes.Status.FinalizedRefunded ||\\n            currentStatus == IStreamTypes.Status.FinalizedStreamed\\n        ) {\\n            return currentStatus;\\n        }\\n\\n        // Update status based on current timestamp\\n        if (currentTime < bootstrappingStartTime) {\\n            return IStreamTypes.Status.Waiting;\\n        } else if (currentTime >= bootstrappingStartTime && currentTime < streamStartTime) {\\n            return IStreamTypes.Status.Bootstrapping;\\n        } else if (currentTime >= streamStartTime && currentTime < streamEndTime) {\\n            return IStreamTypes.Status.Active;\\n        } else if (currentTime >= streamEndTime) {\\n            return IStreamTypes.Status.Ended;\\n        }\\n\\n        // This should never be reached, but return current status as fallback\\n        return currentStatus;\\n    }\\n\\n    /**\\n     * @dev Calculates updated stream state based on time difference\\n     * @param state Current stream state\\n     * @param diff Time difference in seconds\\n     * @return Updated stream state\\n     */\\n    function calculateUpdatedState(\\n        IStreamTypes.StreamState memory state,\\n        uint256 diff\\n    ) internal pure returns (IStreamTypes.StreamState memory) {\\n        // Create a copy of the state to avoid modifying the input\\n        IStreamTypes.StreamState memory newState = state;\\n\\n        if (newState.shares > 0 && diff > 0) {\\n            // Calculate new distribution balance and spent in amount\\n            uint256 newDistributionBalance = (newState.outRemaining * diff) / 1e18;\\n            uint256 spentIn = (newState.inSupply * diff) / 1e18;\\n\\n            // Update state variables\\n            newState.spentIn += spentIn;\\n            newState.inSupply -= spentIn;\\n\\n            if (newDistributionBalance > 0) {\\n                newState.outRemaining -= newDistributionBalance;\\n                // Update distribution index (shares are in base units, multiply by 1e18 for precision)\\n                newState.distIndex += (newDistributionBalance * 1e18) / newState.shares;\\n                // Update current streamed price\\n                newState.currentStreamedPrice = (spentIn * 1e18) / newDistributionBalance;\\n            }\\n        }\\n\\n        return newState;\\n    }\\n\\n    function computeSharesAmount(\\n        uint256 amountIn,\\n        bool roundUp,\\n        uint256 inSupply,\\n        uint256 totalShares\\n    ) internal pure returns (uint256) {\\n        if (totalShares == 0 || amountIn == 0) {\\n            return amountIn;\\n        }\\n\\n        uint256 totalSharesIn = totalShares * amountIn;\\n        if (roundUp) {\\n            return (totalSharesIn + inSupply - 1) / inSupply;\\n        } else {\\n            return totalSharesIn / inSupply;\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates the exit fee amount based on the spent in amount\\n     * @param spentInAmount Amount of tokens spent in the stream\\n     * @return feeAmount The calculated fee amount\\n     * @return remainingAmount The remaining amount after fee deduction\\n     */\\n    function calculateExitFee(\\n        uint256 spentInAmount,\\n        uint256 exitFeePercent\\n    ) internal pure returns (uint256 feeAmount, uint256 remainingAmount) {\\n        uint256 decimalExitFee = exitFeePercent;\\n        uint256 decimalSpentIn = DecimalMath.fromNumber(spentInAmount);\\n\\n        // Calculate exit fee amount using DecimalMath\\n        uint256 exitFeeAmount = DecimalMath.mul(decimalSpentIn, decimalExitFee);\\n        feeAmount = DecimalMath.floor(exitFeeAmount);\\n        remainingAmount = spentInAmount - feeAmount;\\n\\n        return (feeAmount, remainingAmount);\\n    }\\n\\n    function syncPosition(\\n        PositionTypes.Position memory position,\\n        uint256 distIndex,\\n        uint256 shares,\\n        uint256 inSupply,\\n        uint256 nowTime\\n    ) internal pure returns (PositionTypes.Position memory) {\\n        // Create a new position in memory to store the updated values\\n        PositionTypes.Position memory updatedPosition = PositionTypes.Position({\\n            inBalance: position.inBalance,\\n            shares: position.shares,\\n            index: position.index,\\n            lastUpdateTime: position.lastUpdateTime,\\n            pendingReward: position.pendingReward,\\n            spentIn: position.spentIn,\\n            purchased: position.purchased,\\n            exitDate: position.exitDate\\n        });\\n\\n        // Calculate index difference for distributions since last update\\n        uint256 indexDiff = distIndex - updatedPosition.index;\\n        uint256 spent = 0;\\n        uint256 purchased = 0;\\n\\n        // Only process if there are shares in the stream\\n        if (shares > 0) {\\n            // Calculate purchased amount based on position shares and index difference\\n            uint256 positionPurchased = (updatedPosition.shares * indexDiff) / 1e18 + updatedPosition.pendingReward;\\n            // Calculate remaining balance based on current shares ratio\\n            uint256 inRemaining = (inSupply * updatedPosition.shares) / shares;\\n            // Calculate spent amount\\n            spent = updatedPosition.inBalance - inRemaining;\\n            updatedPosition.spentIn += spent;\\n            updatedPosition.inBalance = inRemaining;\\n\\n            // Update purchased amount\\n            purchased = positionPurchased;\\n            updatedPosition.purchased += purchased;\\n        }\\n\\n        // Update position tracking\\n        updatedPosition.index = distIndex;\\n        updatedPosition.lastUpdateTime = nowTime;\\n\\n        return updatedPosition;\\n    }\\n}\\n\",\"keccak256\":\"0x6caf65976c6e92123920dd8a218b1a6337a61b82b23d4af0b461186e9fb3d546\",\"license\":\"MIT\"},\"contracts/StreamTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\ninterface IStreamTypes {\\n    enum Status {\\n        Waiting,\\n        Bootstrapping,\\n        Active,\\n        Ended,\\n        FinalizedRefunded,\\n        FinalizedStreamed,\\n        Cancelled\\n    }\\n\\n    struct StatusInfo {\\n        Status status;\\n    }\\n\\n    struct StreamTimes {\\n        uint256 bootstrappingStartTime;\\n        uint256 streamStartTime;\\n        uint256 streamEndTime;\\n    }\\n\\n    struct StreamMetadata {\\n        string name;\\n    }\\n\\n    struct StreamState {\\n        uint256 outRemaining;\\n        uint256 distIndex;\\n        uint256 spentIn;\\n        uint256 shares;\\n        uint256 currentStreamedPrice;\\n        uint256 threshold;\\n        uint256 inSupply;\\n        uint256 outSupply;\\n        uint256 lastUpdated;\\n    }\\n\\n    struct StreamTokens {\\n        address inSupplyToken;\\n        address outSupplyToken;\\n    }\\n}\\n\",\"keccak256\":\"0xf818d196fbfb1b7ed4c8ffac72fc0c1d95f7ac5f7a4d92e071a255c1699fc241\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nlibrary console {\\n    address constant CONSOLE_ADDRESS =\\n        0x000000000000000000636F6e736F6c652e6c6f67;\\n\\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            pop(\\n                staticcall(\\n                    gas(),\\n                    consoleAddress,\\n                    add(payload, 32),\\n                    mload(payload),\\n                    0,\\n                    0\\n                )\\n            )\\n        }\\n    }\\n\\n    function _castToPure(\\n      function(bytes memory) internal view fnIn\\n    ) internal pure returns (function(bytes memory) pure fnOut) {\\n        assembly {\\n            fnOut := fnIn\\n        }\\n    }\\n\\n    function _sendLogPayload(bytes memory payload) internal pure {\\n        _castToPure(_sendLogPayloadImplementation)(payload);\\n    }\\n\\n    function log() internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n    }\\n\\n    function logInt(int256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n    }\\n\\n    function logUint(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function logString(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function logBool(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function logAddress(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n    }\\n\\n    function log(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function log(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function log(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function log(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function log(uint256 p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n}\\n\",\"keccak256\":\"0xf2560b5386574153057104d19a9e68a32ee912cf23c0c8df1fe9a0607f42d543\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234620004905762003f08803803806200001d81620004b3565b92833961014082828101031262000490578151906200003f60208401620004d9565b604084015191606085015193608086015160a08701519060c088015160018060401b0381116200049057880196848901601f8901121562000490578751976001600160401b0389116200043d578860051b60206200009f818301620004b3565b809b81520190878c016020828501011162000490579060208301915b6020818501018310620004955750505050620000da60e08a01620004d9565b93620000ea6101008b01620004d9565b6101208b01519a9096906001600160401b038c116200049057818101601f8d83010112156200049057808c01519b6001600160401b038d116200043d578c926200013e601f8501601f1916602001620004b3565b9d8e528201602084838501010111620004905760005b8d848210620004775760009401602001939093525050506001600160a01b0385161562000465576001600160a01b0386161562000453576040519661012088016001600160401b038111898210176200043d5760409081528289526001600160a01b0391821660208a018190529089018a9052606089018490526080890185905260a0890186905295811660c08901819052961660e088018190526101009097018a9052600255600380546001600160a01b0319908116909517905560049687556005556006556007556008805482169092179091556009805490911690911790558251916001600160401b0383116200042857600a54926001938481811c911680156200041d575b60208210146200040857601f8111620003ac575b506020601f821160011462000334578190859660009262000328575b5050600019600383901b1c191690841b17600a555b6000935b620002c5575b825461ffff191683556040516139f99081620004ef8239f35b8051841015620003225760018060a01b0360208560051b8301015116600052600060205260406000208360ff1982541617905560001984146200030d578280940193620002a6565b601182634e487b7160e01b6000525260246000fd5b620002ac565b0151905038806200028d565b600a600090815260008051602062003ee88339815191529690601f198416905b8181106200039557509186979184889594106200037b575b505050811b01600a55620002a2565b015160001960f88460031b161c191690553880806200036c565b838301518955978701976020938401930162000354565b600a60005260008051602062003ee8833981519152601f830160051c81019160208410620003fd575b601f0160051c019085905b828110620003f057505062000271565b60008155018590620003e0565b9091508190620003d5565b602284634e487b7160e01b6000525260246000fd5b90607f16906200025d565b604182634e487b7160e01b6000525260246000fd5b634e487b7160e01b600052604160045260246000fd5b604051632bf75bc360e21b8152600490fd5b60405163bb0bac9960e01b8152600490fd5b9060209182828181878901010151920101520162000154565b600080fd5b6020808093620004a586620004d9565b8152019301929150620000bb565b6040519190601f01601f191682016001600160401b038111838210176200043d57604052565b51906001600160a01b0382168203620004905756fe60808060405260043610156200001457600080fd5b60003560e01c908163054f7d9c146200109f5750806314d98de5146200107b5780631c2a28f71462000fd757806331f7d964146200105d57806342d6b34b146200101a5780635a91b3b21462000fd75780635e615a6b1462000ea7578063774ef43b146200017a5780637c526bb31462000da35780637e932d321462000d33578063bfb792241462000d00578063c101944d1462000b3e578063c1d3be8b1462000ac4578063cff0ab961462000a35578063d04fed631462000912578063d2c35ce81462000884578063dce27b6a14620001bd578063e899f3d7146200017a5763f2fde38b146200010457600080fd5b3462000175576020366003190112620001755762000121620010c1565b600954906001600160a01b0390818316330362000163571690811562000151576001600160a01b03191617600955005b604051632bf75bc360e21b8152600490fd5b604051637bfa4b9f60e01b8152600490fd5b600080fd5b3462000175576020366003190112620001755760043561ffff81168091036200017557600052600b602052602060018060a01b0360406000205416604051908152f35b61014036600319011262000175576024356001600160a01b0381169003620001755760c43567ffffffffffffffff811162000175576200020290369060040162001199565b60e4356001600160a01b038116900362000175576101043567ffffffffffffffff811162000175576200023a90369060040162001199565b60ff600c5416620008725760043515620008605760e4356001600160a01b031660009081526020819052604090205460ff16156200084e5760443542116200083c57606435604435116200082a57608435606435116200081857620002a4606435608435620014a3565b600754116200080657620002bd604435606435620014a3565b60065411620007f457620002d442604435620014a3565b60055411620007e25760405160208101906200030b6020828551620002fd8187858a01620010d8565b810103808452018262001176565b519020604051600a548160006200032283620011f5565b9260018116908115620007c2575060011462000771575b6200034e925003601f19810183528262001176565b60208151910120036200075f57600254806200065f575b506200041d6040516200037e60206124f2018262001176565b6124f281526124f2620014b26020830139604051620003cb81620003bc3360e4358960a43560843560643560443560243560043560208b0162001351565b03601f19810183528262001176565b6200040f6020604051809382620003ec8184019788815193849201620010d8565b82016200040282518093868085019101620010d8565b0103808452018262001176565b519020610124353062001445565b6040516323b872dd60e01b8152336004808301919091526001600160a01b03831660248301523560448201526020818060648101038160006024356001600160a01b03165af1908115620005f55760009162000629575b50156200061757604051806124f281011067ffffffffffffffff6124f28301111762000601576124f2620014b28239610124359080620004cf3360e4358860a4356084356064356044356024356004356124f28b0162001351565b03906000f5908115620005f5576001600160a01b0390811690821603620005e35761ffff91620005d4918360015416600052600b602052604060002060018060a01b0382166001600160601b0360a01b825416179055600154946200057f858716936200057060405193600435855260443560208601526064356040860152608435606086015260a43560808601526101208060a0870152850190620010fd565b9083820360c0850152620010fd565b6001600160a01b0392831660e08301526101008201849052309260e435811692602435909116917fd82fd25f2c186bf678ec89d69b74509fb3d3043ede4957173642a7e407e23219919081900390a4620013a8565b61ffff19909216911617600155005b604051636d80044f60e01b8152600490fd5b6040513d6000823e3d90fd5b634e487b7160e01b600052604160045260246000fd5b60405163022e258160e11b8152600490fd5b62000650915060203d60201162000657575b62000647818362001176565b81019062001337565b8462000474565b503d6200063b565b6003546001600160a01b031680620006d55750803410620006c3576008546000918291829182916001600160a01b0316828215620006b9575bf115620006a7575b8262000365565b604051634033e4e360e01b8152600490fd5b506108fc62000698565b6040516332201f6960e11b8152600490fd5b6008546040516323b872dd60e01b81523360048201526001600160a01b0390911660248201526044810192909252602090829060649082906000905af1908115620005f5576000916200073b575b50620006a05760405163022e258160e11b8152600490fd5b62000758915060203d602011620006575762000647818362001176565b8362000723565b604051635d0b6cc760e01b8152600490fd5b5050600a60005281600080516020620039a48339815191526000905b838210620007a757505060206200034e9282010162000339565b6020919250806001915483858801015201910183916200078d565b602092506200034e94915060ff1916828401528015150282010162000339565b604051635bdfbd0360e11b8152600490fd5b6040516372904fb160e01b8152600490fd5b6040516318861b4960e01b8152600490fd5b6040516349f8456b60e11b8152600490fd5b604051633060050d60e21b8152600490fd5b6040516341f01d5760e01b8152600490fd5b60405163cc3ca47b60e01b8152600490fd5b604051634d5bb2d560e11b8152600490fd5b604051634051e96160e01b8152600490fd5b34620001755760203660031901126200017557620008a1620010c1565b6009546001600160a01b03919082163303620001635716801562000900576020817fe5693914d19c789bdee50a362998c0bc8d035a835f9871da5d51152f0582c34f926001600160601b0360a01b6008541617600855604051908152a1005b60405163bb0bac9960e01b8152600490fd5b3462000175576000366003190112620001755761ffff60019080825416916200093b83620013bc565b916200094b604051938462001176565b838352816200095a85620013bc565b9460209283860196601f19013688376000925b620009b9575b50505060405192818401908285525180915260408401949160005b8281106200099c5785870386f35b83516001600160a01b03168752958101959281019284016200098e565b8083979597969496168281101562000a285780600052600b875260018060a01b0360406000205416908551111562000a12578362000a069188621fffe08b9760051b1688010152620013a8565b9294969593956200096d565b634e487b7160e01b600052603260045260246000fd5b5095939594929462000973565b3462000175576000366003190112620001755760025460018060a01b039062000ac0826003541692600454906005549060065460075490826008541692600954169362000a8162001232565b95604051998a998a5260208a015260408901526060880152608087015260a086015260c085015260e084015261012080610100850152830190620010fd565b0390f35b3462000175576020366003190112620001755762000ae1620010c1565b600954906001600160a01b0390818316330362000163571690811562000151576001600160a01b03191681176009556040519081527f1af81a401acf01a36af32532151690df1252f468decdeb32a9252e7e15d0a30f90602090a1005b34620001755760c0366003190112620001755767ffffffffffffffff60a435818111620001755762000b7590369060040162001199565b6009549091906001600160a01b0316330362000163576004356002556024356004556044356005556064356006556084356007558151908111620006015762000bc0600a54620011f5565b601f811162000ca7575b50602080601f831160011462000c2f5750819260009262000c23575b50508160011b916000199060031b1c191617600a555b7f4e5005547c24dfd12003c2845fd20f2071c49fa3cd30b0be7a064e3f4c3f8d2a600080a1005b01519050828062000be6565b90601f19831693600a600052600080516020620039a4833981519152926000905b86821062000c8e575050836001951062000c74575b505050811b01600a5562000bfc565b015160001960f88460031b161c1916905582808062000c65565b8060018596829496860151815501950193019062000c50565b600a600052600080516020620039a4833981519152601f830160051c8101916020841062000cf5575b601f0160051c01905b81811062000ce8575062000bca565b6000815560010162000cd9565b909150819062000cd0565b34620001755760203660031901126200017557602062000d2962000d23620010c1565b620013d5565b6040519015158152f35b3462000175576020366003190112620001755760043580151580910362000175576009546001600160a01b03163303620001635760207f5e836595170048222f815b36aad9e5217a02753f833b3e65739120eb989cf8b49160ff19600c541660ff821617600c55604051908152a1005b3462000175576040366003190112620001755767ffffffffffffffff600435818111620001755762000dda90369060040162001124565b91602435908111620001755762000df690369060040162001124565b600954909391926001600160a01b0392909183163303620001635760005b81811062000e6b5750505060005b83811062000e2c57005b808262000e4962000e4362000e6594888862001311565b62001322565b166000526000602052604060002060ff198154169055620012eb565b62000e22565b808462000e8262000e4362000ea194868862001311565b1660005260006020526040600020600160ff19825416179055620012eb565b62000e14565b3462000175576000366003190112620001755760405162000ec88162001158565b6000815260006020820152600060408201526000606082015260006080820152600060a0820152600060c0820152600060e0820152606061010080920152602062000ac0604051809362000f1c8262001158565b600254825260018060a01b038060035416858401908152816004546040860190815260055460608701908152600654608088019081526007549160a0890192835284600854169360c08a019485528580600954169760e08c019889528a62000f8362001232565b9c019b8c526040519e8f9e8f9181835251910152511660408d01525160608c01525160808b01525160a08a01525160c0890152511660e08701525116908401525161012080840152610140830190620010fd565b346200017557602036600319011262000175576001600160a01b0362000ffc620010c1565b166000526000602052602060ff604060002054166040519015158152f35b3462000175576060366003190112620001755760206200104b6200103d620010c1565b604435906024359062001445565b6040516001600160a01b039091168152f35b34620001755760003660031901126200017557602060405160008152f35b34620001755760003660031901126200017557602061ffff60015416604051908152f35b3462000175576000366003190112620001755760209060ff600c541615158152f35b600435906001600160a01b03821682036200017557565b60005b838110620010ec5750506000910152565b8181015183820152602001620010db565b906020916200111881518092818552858086019101620010d8565b601f01601f1916010190565b9181601f84011215620001755782359167ffffffffffffffff831162000175576020808501948460051b0101116200017557565b610120810190811067ffffffffffffffff8211176200060157604052565b90601f8019910116810190811067ffffffffffffffff8211176200060157604052565b81601f82011215620001755780359067ffffffffffffffff8211620006015760405192620011d2601f8401601f19166020018562001176565b828452602083830101116200017557816000926020809301838601378301015290565b90600182811c9216801562001227575b60208310146200121157565b634e487b7160e01b600052602260045260246000fd5b91607f169162001205565b60405190600082600a54916200124883620011f5565b80835292600190818116908115620012c7575060011462001275575b50620012739250038362001176565b565b600a60009081529150600080516020620039a48339815191525b848310620012ab57506200127393505081016020013862001264565b81935090816020925483858a010152019101909185926200128f565b9050602092506200127394915060ff191682840152151560051b8201013862001264565b6000198114620012fb5760010190565b634e487b7160e01b600052601160045260246000fd5b919081101562000a125760051b0190565b356001600160a01b0381168103620001755790565b908160209103126200017557518015158103620001755790565b979998946101009792946200139b9497928a5260018060a01b03978880971660208c015260408b015260608a0152608089015260a08801526101208060c0890152870190620010fd565b961660e085015216910152565b61ffff809116908114620012fb5760010190565b67ffffffffffffffff8111620006015760051b60200190565b600061ffff916001838194825416915b620013f5575b5050505050600090565b80841693828510156200143e578594600052600b60205260018060a01b0380604060002054169085161462001436576200142f90620013a8565b93620013e5565b505050505090565b50620013eb565b909160405192602084019260ff60f81b84526001600160601b03199060601b16602185015260358401526055830152605582526080820182811067ffffffffffffffff8211176200060157604052905190206001600160a01b031690565b91908203918211620012fb5756fe608080604052346200054a57620024f280380380916200002082856200054f565b8339810190610120818303126200054a57805190620000426020820162000573565b60408201519060608301519260808101519460a082015160c083015160018060401b0381116200054a57830188601f820112156200054a578051906001600160401b0382116200039b5760405199620000a6601f8401601f19166020018c6200054f565b828b52602083830101116200054a5760005b8281106200053557505060206000918a010152620000e8610100620000e060e0860162000573565b940162000573565b620000f4338662000588565b1562000523576040516370a0823160e01b81523060048201526020816024816001600160a01b038a165afa8015620004b5578491600091620004e5575b5010620004d35762000144338562000588565b15620004c157600080546001600160a01b0319166001600160a01b03929092169190911790556040516001600160401b036104e38201908111908211176200039b576104e36200200f8239806104e3810103906000f08015620004b557601480546001600160a01b03929092166001600160a01b031992831681179091556001805490921617905560405161012081018082116001600160401b03909111176200039b576101208101604052828152600060208201526000604082015260006060820152600060808201528160a0820152600060c08201528260e0820152610100429101528160035560006004556000600555600060065560006007556008556000600955600a5542600b556040519081604081011060018060401b036040840111176200039b57604082810181526001600160a01b03918216808452939091166020928301819052600c80546001600160a01b03199081169095179055600d8054909416179092559051908101906001600160401b038211818310176200039b5760409190915284905283516001600160401b0381116200039b57600e54600181811c91168015620004aa575b60208210146200049457601f81116200042a575b50602094601f8211600114620003bd57948192939495600092620003b1575b50508160011b916000199060031b1c191617600e555b600f805460ff19169055604051606081016001600160401b038111828210176200039b578491604091825283815284602082015201526010556011556012553360018060a01b03196013541617601355604051611a0290816200060d8239f35b634e487b7160e01b600052604160045260246000fd5b01519050388062000325565b601f19821695600e60005260206000209160005b8881106200041157508360019596979810620003f7575b505050811b01600e556200033b565b015160001960f88460031b161c19169055388080620003e8565b91926020600181928685015181550194019201620003d1565b600e6000527fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fd601f830160051c8101916020841062000489575b601f0160051c01905b8181106200047c575062000306565b600081556001016200046d565b909150819062000464565b634e487b7160e01b600052602260045260246000fd5b90607f1690620002f2565b6040513d6000823e3d90fd5b604051632181b39760e01b8152600490fd5b6040516357084d7360e11b8152600490fd5b91506020823d6020116200051a575b8162000503602093836200054f565b810103126200051757508390513862000131565b80fd5b3d9150620004f4565b6040516372146d6160e11b8152600490fd5b60208183018101518c830182015201620000b8565b600080fd5b601f909101601f19168101906001600160401b038211908210176200039b57604052565b51906001600160a01b03821682036200054a57565b6001600160a01b03908116919082156200060457602460209260405194859384926370a0823160e01b84521660048301525afa9081620005d3575b50620005ce57600090565b600190565b602090813d8111620005fc575b620005ec81836200054f565b810103126200054a5738620005c3565b503d620005e0565b50505060009056fe608060408181526004918236101561001657600080fd5b60009260e0918435831c90816302d05d3f14610f165750806306fdde0314610e485780630e5634df14610d2c5780630f574ba714610a6b5780632e1a7d4d1461089d57806334793e05146108505780638a03764f1461081f5780638cd47415146107f5578063af5c3ac4146107cb578063c0ae398c14610769578063c45a01551461073f578063cbf0641514610560578063d08452c21461052c578063e427d08c146104fe5763f69e8fba146100cb57600080fd5b346104fa57836003193601126104fa5783546001600160a01b039390841692338490036104ed576100fa6112e8565b9461010f610106611420565b968742916115ae565b9183519661011c88610fc2565b6001885260209788368183013760036101348261106b565b52845160078110156104da57916101506101609289959461114c565b50429061015b61128a565b611112565b966101748860a06040820151910151111590565b156104bf5750888360135416865193848092635e615a6b60e01b82525afa9182156104b557899261038d575b5050838260c083015116910151906101e08286516101bd81610fc2565b60128152716578697446656550657263656e743a20257360701b8b820152611974565b848701610215815187516101f381610fc2565b601181527073746174652e7370656e74496e3a20257360781b8c820152611974565b5191620f42409081840284810483148515171561037a579180610240610249936102c09796956115ea565b040480936110aa565b9161027781885161025981610fc2565b600d81526c666565416d6f756e743a20257360981b8d820152611974565b6102a983885161028681610fc2565b601281527163726561746f72526576656e75653a20257360701b8d820152611974565b80610364575b505082600c5416838a5416906111ba565b506005825284518061034a575b505b6102d8826114a5565b6102e18561145e565b86541694828501519451915193600785101561033757509282610333926060957f423655f1f3de1bcb0a4e39a00d01e1e3d389d77ef6ce384e129be79181ef9d8e979551958652850152830190611048565ba280f35b634e487b7160e01b885260219052602487fd5b61035d9082600d5416838a5416906111ba565b50386102cd565b6103729185600c54166111ba565b5038806102af565b634e487b7160e01b8c526011895260248cfd5b9091503d808a833e61039f8183610fde565b81019088818303126104b157805167ffffffffffffffff91828211610492570190610120828403126104ad578651936103d785610f6d565b825185526103e68b8401611276565b8b8601528783015188860152606083015160608601526080830151608086015260a083015160a086015261041c60c08401611276565b60c086015261042c818401611276565b908501526101009182810151908282116104a957019083601f830112156104925781519081116104965787519361046c601f8301601f19168d0186610fde565b8185528b828401011161049257610488918b8086019101611000565b82015238806101a0565b8b80fd5b634e487b7160e01b8c526041895260248cfd5b8c80fd5b8a80fd5b8980fd5b85513d8b823e3d90fd5b6104d492855283600d541691880151916111ba565b506102cf565b634e487b7160e01b8b526021885260248bfd5b50516282b42960e81b8152fd5b8380fd5b5050503461052857816003193601126105285760015490516001600160a01b039091168152602090f35b5080fd5b83853461055d578060031936011261055d5750600c54600d5482516001600160a01b03928316815291166020820152f35b80fd5b509291903461073b578260031936011261073b5761057d33611350565b6020810151151580610730575b15610720576105ba6105a261059d61128a565b611563565b916020830151606084015160c085015191429361187f565b916105d66105c66112e8565b42906105d0611420565b906115ae565b906105ea8360a06040820151910151111590565b968251600781101561070d576003149788610705575b5087156106d8575b50610653929161064e9160c09697986000146106ac5785518061068d575b50600d54868801516106429133906001600160a01b03166111ba565b505b42908601526114a5565b61145e565b61065d81336114bf565b015190519081527f920bb94eb3842a728db98228c375ff6b00c5bc5a54fac6736155517a0a20a61a60203392a280f35b600c546106a5919033906001600160a01b03166111ba565b5038610626565b6106d26106bf875160a089015190611269565b600c5433906001600160a01b03166111ba565b50610644565b9650815160078110156106f2576005149650610653610608565b634e487b7160e01b875260218852602487fd5b975038610600565b634e487b7160e01b885260218252602488fd5b8251637a851da960e11b81528590fd5b50818101511561058a565b8280fd5b5050503461052857816003193601126105285760135490516001600160a01b039091168152602090f35b5091346104fa57836003193601126104fa5761012093506003549254916005546006546007546008549160095493600a5496600b549881519a8b5260208b01528901526060880152608087015260a086015260c0850152830152610100820152f35b505050346105285781600319360112610528576020906107f360ff600f541691518092611048565bf35b5050503461052857816003193601126105285760145490516001600160a01b039091168152602090f35b5050503461052857816003193601126105285760609060105490601154906012549181519384526020840152820152f35b843461055d578060031936011261055d5761089a61089561086f61128a565b61088661064e61087d611420565b92834291611112565b42906108906112e8565b6115ae565b6114a5565b80f35b508383346105285760208060031936011261073b578335918215610a5c576108c433611350565b8281015115610a4c5780518411610a35576108dd611420565b6108f06108e86112e8565b8242916115ae565b83516108fb81610fa6565b6002815284368783013760026109108261106b565b52600161091c8261108e565b5281516007811015610a22576109d49361096a7f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d59897969461096461064e956109749561114c565b506114a5565b429061015b61128a565b91858301516109cc610996606086019283519460c0880195429287519261187f565b9283518b146000146109f8578b898501528b84525b6109b68b82516110aa565b8091526109c6835180928d61183f565b906110aa565b9052336114bf565b600c546109ed90859033906001600160a01b03166111ba565b50519283523392a280f35b888401610a0e8c6109c68351809286519061183f565b9052610a1b8b85516110aa565b84526109ab565b634e487b7160e01b895260218a52602489fd5b81516318928cbf60e31b8152808701859052602490fd5b8151637a851da960e11b81528690fd5b51630db73cdf60e41b81528490fd5b509291602091826003193601126104fa57843592610a99610a8a6112e8565b610a92611420565b42916115ae565b8351610aa481610fa6565b600281528436848301376001610ab98261106b565b526002610ac58261108e565b5281516007811015610d1957610adf92916109649161114c565b600c5483516370a0823160e01b815233888201526001600160a01b03909116908281602481855afa908115610d0f578791610cde575b50858110610cc2575081869160648651809481936323b872dd60e01b8352338d8401523060248401528a60448401525af1908115610cb8578691610c8b575b5015610c7b57907ff94991dcbea6e8ac439cbc93bd9c62a4d39f04e0ad656df9a703f13552c2787f9291610b8733611350565b610b9261059d61128a565b908281015115600014610c2457508061064e610bbb60c0610c169401516060840151908a611812565b94898584015191885192610bce84610f3a565b8b84528888850152898401524260608401528160808401528160a08401528160c08401528201525b60c08301610c058a8251611269565b9052606083016109cc878251611269565b82519485528401523392a280f35b92508061064e610c5960c0610c169401805196610c4860608601988951908d611812565b97878601519051904293519261187f565b610c64898251611269565b8152848101610c74878251611269565b9052610bf6565b82516307a4ced160e51b81528690fd5b610cab9150823d8411610cb1575b610ca38183610fde565b81019061119d565b38610b54565b503d610c99565b84513d88823e3d90fd5b87604491878751926381ddee1b60e01b84528301526024820152fd5b90508281813d8311610d08575b610cf58183610fde565b81010312610d04575138610b15565b8680fd5b503d610ceb565b85513d89823e3d90fd5b634e487b7160e01b885260218952602488fd5b5082843461055d578060031936011261055d5781519181600e5492600184811c91818616958615610e3e575b6020968785108114610e2b578899509688969785829a529182600014610e04575050600114610da8575b505050610da49291610d95910385610fde565b51928284938452830190611023565b0390f35b9190869350600e83527fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fd5b828410610dec5750505082010181610d95610da4610d82565b8054848a018601528895508794909301928101610dd3565b60ff19168782015293151560051b86019093019350849250610d959150610da49050610d82565b634e487b7160e01b835260228a52602483fd5b92607f1692610d58565b5082843461055d578060031936011261055d578151918160025492600184811c91818616958615610f0c575b6020968785108114610e2b578899509688969785829a529182600014610e04575050600114610eb057505050610da49291610d95910385610fde565b9190869350600283527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace5b828410610ef45750505082010181610d95610da4610d82565b8054848a018601528895508794909301928101610edb565b92607f1692610e74565b85903461052857816003193601126105285790546001600160a01b03168152602090f35b610100810190811067ffffffffffffffff821117610f5757604052565b634e487b7160e01b600052604160045260246000fd5b610120810190811067ffffffffffffffff821117610f5757604052565b6020810190811067ffffffffffffffff821117610f5757604052565b6060810190811067ffffffffffffffff821117610f5757604052565b6040810190811067ffffffffffffffff821117610f5757604052565b90601f8019910116810190811067ffffffffffffffff821117610f5757604052565b60005b8381106110135750506000910152565b8181015183820152602001611003565b9060209161103c81518092818552858086019101611000565b601f01601f1916010190565b9060078210156110555752565b634e487b7160e01b600052602160045260246000fd5b8051156110785760200190565b634e487b7160e01b600052603260045260246000fd5b8051600110156110785760400190565b60078210156110555752565b919082039182116110b757565b634e487b7160e01b600052601160045260246000fd5b604051906110da82610f6d565b816101006000918281528260208201528260408201528260608201528260808201528260a08201528260c08201528260e08201520152565b916111379161111f6110cd565b5060406020820151910151906101008501519261161d565b80611140575090565b6111499161172f565b90565b91909160005b83518110156111955760208160051b850101516007808210156110555783101561105557821461118d5760001981146110b757600101611152565b506001925050565b506000925050565b908160209103126111b5575180151581036111b55790565b600080fd5b91909181158015611258575b6112505760446020926000604051958694859363a9059cbb60e01b855260018060a01b0380931660048601526024850152165af190811561124457600091611226575b501561121457600190565b6040516307a4ced160e51b8152600490fd5b61123e915060203d8111610cb157610ca38183610fde565b38611209565b6040513d6000823e3d90fd5b505050600190565b506001600160a01b038316156111c6565b919082018092116110b757565b51906001600160a01b03821682036111b557565b6112926110cd565b5060405161129f81610f6d565b6003548152600454602082015260055460408201526006546060820152600754608082015260085460a082015260095460c0820152600a5460e0820152600b5461010082015290565b60006040516112f681610f8a565b5260405161130381610f8a565b61114960ff600f54168261109e565b6040519061131f82610f3a565b8160e06000918281528260208201528260408201528260608201528260808201528260a08201528260c08201520152565b611358611312565b506014546040516316c1973960e01b81526001600160a01b0392831660048201529161010091829184916024918391165afa9081156112445760009161139f575b50905090565b82813d8311611419575b6113b38183610fde565b8101031261055d575060e0604051916113cb83610f3a565b805183526020810151602084015260408101516040840152606081015160608401526080810151608084015260a081015160a084015260c081015160c0840152015160e08201528038611399565b503d6113a9565b60006040805161142f81610fa6565b828152826020820152015260405161144681610fa6565b60105481526011546020820152601254604082015290565b8051600355602081015160045560408101516005556060810151600655608081015160075560a081015160085560c081015160095560e0810151600a556101000151600b55565b5160078110156110555760ff8019600f5416911617600f55565b6014546001600160a01b03908116803b156111b557600092836101249260e0604051978896879563159595fd841b875216600486015280516024860152602081015160448601526040810151606486015260608101516084860152608081015160a486015260a081015160c486015260c081015160e486015201516101048401525af180156112445761154f5750565b67ffffffffffffffff8111610f5757604052565b61156b6110cd565b50611574611420565b61159160406020830151920151916101009283850151914261161d565b8061159b57505090565b6115a5919261172f565b80914291015290565b9160006040516115bd81610f8a565b528251600781101561105557826115e49261114994519060406020840151930151936116b6565b8261109e565b818102929181159184041417156110b757565b8115611607570490565b634e487b7160e01b600052601260045260246000fd5b9290919282811080156116ac575b6116a3578261165493831061169b575b5081848211611693575b61164e916110aa565b926110aa565b8015801561168b575b61168457670de0b6b3a7640000918281029281840414901517156110b757611149916115fd565b5050600090565b50811561165d565b849150611645565b91503861163b565b50505050600090565b508382101561162b565b929190926007811015806110555760068214908115611722575b8115611712575b5061170a57508210156116ec57505050600090565b8110156116fa575050600190565b101561170557600290565b600390565b935050505090565b90506110555760058114386116d7565b50506004811460006116d0565b906117386110cd565b50606082018051151580611809575b61175057505090565b670de0b6b3a764000091826117668286516115ea565b04918361177860c087019384516115ea565b049160408601611789848251611269565b90526117968382516110aa565b9052821580156117a9575b505050505090565b6117b48487516110aa565b865284840290848204861417156110b7576117d09151906115fd565b6117df60208601918251611269565b90528281029281840414901517156110b7576117fa916115fd565b608082015238808080806117a1565b50811515611747565b9180158015611837575b611832576111499261182d916115ea565b6115fd565b505090565b50821561181c565b909180158015611877575b6113995761185c6118619284926115ea565b611269565b6000198101919082116110b757611149916115fd565b50811561184a565b93929361188a611312565b50805190602081015195604082015196606083015195608084015160a0850151916118ff60e060c08801519701519b6040519c8d996118c88b610f3a565b8a5260208a0196875260e060408b019a838c52606081019d8e526080810196875260a0810197885260c081019a8b520152896110aa565b9181611912575b50505050505050525290565b6119669561193d61182d92670de0b6b3a7640000611934611945978a516115ea565b04905190611269565b9551906115ea565b9061195b611954838c516110aa565b8251611269565b905288528251611269565b905238808080808080611906565b6000919082916119b960405180926119a56020830195632d839cb360e21b8752604060248501526064840190611023565b90604483015203601f198101835282610fde565b51906a636f6e736f6c652e6c6f675afa5056fea2646970667358221220c95c98cb0dfae07083b1e5c63270404cd482b3142bd5401bcd0129eb090ed57764736f6c6343000814003360a0806040523461003657336080526104a7908161003c823960805181818160800152818160ec015281816101a901526103580152f35b600080fdfe604060808152600436101561001357600080fd5b60009060e08235811c908163159595fd146102ce57816316c19739146101d85781635cb0175c14610194578163f8c4ee6d146100bf575063fb33ce811461005957600080fd5b346100bb57806003193601126100bb576100716103bb565b6001600160a01b03906100a7337f000000000000000000000000000000000000000000000000000000000000000084161461040d565b168252816020526007602435918320015580f35b5080fd5b905034610190576080366003190112610190576007906100dd6103bb565b906001600160a01b03610113337f000000000000000000000000000000000000000000000000000000000000000083161461040d565b61011b6103d6565b9460243586526020860160443581528187016064358152606088019142835260808901938a855260a08a01958b875260c08b01978c89528b01988c8a52168b528a6020528a20985189555160018901555160028801555160038701555160048601555160058501555160068401555191015580f35b8280fd5b5050346100bb57816003193601126100bb57517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b9050346101905760203660031901126101905781610100936101f86103bb565b81846102026103d6565b82815282602082015282868201528260608201528260808201528260a08201528260c0820152015260018060a01b0316815280602052206102416103d6565b9080549384835260018201549060208401918252600283015490808501918252600384015490606086019182526004850154926080870193845260058601549460a0880195865288600760068901549860c08b01998a52015498019788528251998a525160208a015251908801525160608701525160808601525160a08501525160c08401525190820152f35b90503461019057610120366003190112610190576102ea6103bb565b6101003660231901126103b7576007916103026103d6565b936024358552602085016044358152818601606435815260608701906084358252608088019260a435845260a089019460c435865260c08a019660e43588528a019761010435895260018060a01b039061037f827f000000000000000000000000000000000000000000000000000000000000000016331461040d565b168b528a6020528a20985189555160018901555160028801555160038701555160048601555160058501555160068401555191015580f35b8380fd5b600435906001600160a01b03821682036103d157565b600080fd5b60405190610100820182811067ffffffffffffffff8211176103f757604052565b634e487b7160e01b600052604160045260246000fd5b1561041457565b60405162461bcd60e51b815260206004820152602f60248201527f506f736974696f6e2063616e206f6e6c7920626520736574206279207468652060448201526e1cdd1c99585b4818dbdb9d1c9858dd608a1b6064820152608490fdfea26469706673582212200e736f41d0f700841c64e931e5d2c65e65de0d66e07534a99153a88a69263f6d64736f6c63430008140033c65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a8a2646970667358221220fabd9b1156174ea2988bed376d8080cedf7cc9c00840f3c15e8d2c6f50263a8a64736f6c63430008140033c65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a8",
  "deployedBytecode": "0x60808060405260043610156200001457600080fd5b60003560e01c908163054f7d9c146200109f5750806314d98de5146200107b5780631c2a28f71462000fd757806331f7d964146200105d57806342d6b34b146200101a5780635a91b3b21462000fd75780635e615a6b1462000ea7578063774ef43b146200017a5780637c526bb31462000da35780637e932d321462000d33578063bfb792241462000d00578063c101944d1462000b3e578063c1d3be8b1462000ac4578063cff0ab961462000a35578063d04fed631462000912578063d2c35ce81462000884578063dce27b6a14620001bd578063e899f3d7146200017a5763f2fde38b146200010457600080fd5b3462000175576020366003190112620001755762000121620010c1565b600954906001600160a01b0390818316330362000163571690811562000151576001600160a01b03191617600955005b604051632bf75bc360e21b8152600490fd5b604051637bfa4b9f60e01b8152600490fd5b600080fd5b3462000175576020366003190112620001755760043561ffff81168091036200017557600052600b602052602060018060a01b0360406000205416604051908152f35b61014036600319011262000175576024356001600160a01b0381169003620001755760c43567ffffffffffffffff811162000175576200020290369060040162001199565b60e4356001600160a01b038116900362000175576101043567ffffffffffffffff811162000175576200023a90369060040162001199565b60ff600c5416620008725760043515620008605760e4356001600160a01b031660009081526020819052604090205460ff16156200084e5760443542116200083c57606435604435116200082a57608435606435116200081857620002a4606435608435620014a3565b600754116200080657620002bd604435606435620014a3565b60065411620007f457620002d442604435620014a3565b60055411620007e25760405160208101906200030b6020828551620002fd8187858a01620010d8565b810103808452018262001176565b519020604051600a548160006200032283620011f5565b9260018116908115620007c2575060011462000771575b6200034e925003601f19810183528262001176565b60208151910120036200075f57600254806200065f575b506200041d6040516200037e60206124f2018262001176565b6124f281526124f2620014b26020830139604051620003cb81620003bc3360e4358960a43560843560643560443560243560043560208b0162001351565b03601f19810183528262001176565b6200040f6020604051809382620003ec8184019788815193849201620010d8565b82016200040282518093868085019101620010d8565b0103808452018262001176565b519020610124353062001445565b6040516323b872dd60e01b8152336004808301919091526001600160a01b03831660248301523560448201526020818060648101038160006024356001600160a01b03165af1908115620005f55760009162000629575b50156200061757604051806124f281011067ffffffffffffffff6124f28301111762000601576124f2620014b28239610124359080620004cf3360e4358860a4356084356064356044356024356004356124f28b0162001351565b03906000f5908115620005f5576001600160a01b0390811690821603620005e35761ffff91620005d4918360015416600052600b602052604060002060018060a01b0382166001600160601b0360a01b825416179055600154946200057f858716936200057060405193600435855260443560208601526064356040860152608435606086015260a43560808601526101208060a0870152850190620010fd565b9083820360c0850152620010fd565b6001600160a01b0392831660e08301526101008201849052309260e435811692602435909116917fd82fd25f2c186bf678ec89d69b74509fb3d3043ede4957173642a7e407e23219919081900390a4620013a8565b61ffff19909216911617600155005b604051636d80044f60e01b8152600490fd5b6040513d6000823e3d90fd5b634e487b7160e01b600052604160045260246000fd5b60405163022e258160e11b8152600490fd5b62000650915060203d60201162000657575b62000647818362001176565b81019062001337565b8462000474565b503d6200063b565b6003546001600160a01b031680620006d55750803410620006c3576008546000918291829182916001600160a01b0316828215620006b9575bf115620006a7575b8262000365565b604051634033e4e360e01b8152600490fd5b506108fc62000698565b6040516332201f6960e11b8152600490fd5b6008546040516323b872dd60e01b81523360048201526001600160a01b0390911660248201526044810192909252602090829060649082906000905af1908115620005f5576000916200073b575b50620006a05760405163022e258160e11b8152600490fd5b62000758915060203d602011620006575762000647818362001176565b8362000723565b604051635d0b6cc760e01b8152600490fd5b5050600a60005281600080516020620039a48339815191526000905b838210620007a757505060206200034e9282010162000339565b6020919250806001915483858801015201910183916200078d565b602092506200034e94915060ff1916828401528015150282010162000339565b604051635bdfbd0360e11b8152600490fd5b6040516372904fb160e01b8152600490fd5b6040516318861b4960e01b8152600490fd5b6040516349f8456b60e11b8152600490fd5b604051633060050d60e21b8152600490fd5b6040516341f01d5760e01b8152600490fd5b60405163cc3ca47b60e01b8152600490fd5b604051634d5bb2d560e11b8152600490fd5b604051634051e96160e01b8152600490fd5b34620001755760203660031901126200017557620008a1620010c1565b6009546001600160a01b03919082163303620001635716801562000900576020817fe5693914d19c789bdee50a362998c0bc8d035a835f9871da5d51152f0582c34f926001600160601b0360a01b6008541617600855604051908152a1005b60405163bb0bac9960e01b8152600490fd5b3462000175576000366003190112620001755761ffff60019080825416916200093b83620013bc565b916200094b604051938462001176565b838352816200095a85620013bc565b9460209283860196601f19013688376000925b620009b9575b50505060405192818401908285525180915260408401949160005b8281106200099c5785870386f35b83516001600160a01b03168752958101959281019284016200098e565b8083979597969496168281101562000a285780600052600b875260018060a01b0360406000205416908551111562000a12578362000a069188621fffe08b9760051b1688010152620013a8565b9294969593956200096d565b634e487b7160e01b600052603260045260246000fd5b5095939594929462000973565b3462000175576000366003190112620001755760025460018060a01b039062000ac0826003541692600454906005549060065460075490826008541692600954169362000a8162001232565b95604051998a998a5260208a015260408901526060880152608087015260a086015260c085015260e084015261012080610100850152830190620010fd565b0390f35b3462000175576020366003190112620001755762000ae1620010c1565b600954906001600160a01b0390818316330362000163571690811562000151576001600160a01b03191681176009556040519081527f1af81a401acf01a36af32532151690df1252f468decdeb32a9252e7e15d0a30f90602090a1005b34620001755760c0366003190112620001755767ffffffffffffffff60a435818111620001755762000b7590369060040162001199565b6009549091906001600160a01b0316330362000163576004356002556024356004556044356005556064356006556084356007558151908111620006015762000bc0600a54620011f5565b601f811162000ca7575b50602080601f831160011462000c2f5750819260009262000c23575b50508160011b916000199060031b1c191617600a555b7f4e5005547c24dfd12003c2845fd20f2071c49fa3cd30b0be7a064e3f4c3f8d2a600080a1005b01519050828062000be6565b90601f19831693600a600052600080516020620039a4833981519152926000905b86821062000c8e575050836001951062000c74575b505050811b01600a5562000bfc565b015160001960f88460031b161c1916905582808062000c65565b8060018596829496860151815501950193019062000c50565b600a600052600080516020620039a4833981519152601f830160051c8101916020841062000cf5575b601f0160051c01905b81811062000ce8575062000bca565b6000815560010162000cd9565b909150819062000cd0565b34620001755760203660031901126200017557602062000d2962000d23620010c1565b620013d5565b6040519015158152f35b3462000175576020366003190112620001755760043580151580910362000175576009546001600160a01b03163303620001635760207f5e836595170048222f815b36aad9e5217a02753f833b3e65739120eb989cf8b49160ff19600c541660ff821617600c55604051908152a1005b3462000175576040366003190112620001755767ffffffffffffffff600435818111620001755762000dda90369060040162001124565b91602435908111620001755762000df690369060040162001124565b600954909391926001600160a01b0392909183163303620001635760005b81811062000e6b5750505060005b83811062000e2c57005b808262000e4962000e4362000e6594888862001311565b62001322565b166000526000602052604060002060ff198154169055620012eb565b62000e22565b808462000e8262000e4362000ea194868862001311565b1660005260006020526040600020600160ff19825416179055620012eb565b62000e14565b3462000175576000366003190112620001755760405162000ec88162001158565b6000815260006020820152600060408201526000606082015260006080820152600060a0820152600060c0820152600060e0820152606061010080920152602062000ac0604051809362000f1c8262001158565b600254825260018060a01b038060035416858401908152816004546040860190815260055460608701908152600654608088019081526007549160a0890192835284600854169360c08a019485528580600954169760e08c019889528a62000f8362001232565b9c019b8c526040519e8f9e8f9181835251910152511660408d01525160608c01525160808b01525160a08a01525160c0890152511660e08701525116908401525161012080840152610140830190620010fd565b346200017557602036600319011262000175576001600160a01b0362000ffc620010c1565b166000526000602052602060ff604060002054166040519015158152f35b3462000175576060366003190112620001755760206200104b6200103d620010c1565b604435906024359062001445565b6040516001600160a01b039091168152f35b34620001755760003660031901126200017557602060405160008152f35b34620001755760003660031901126200017557602061ffff60015416604051908152f35b3462000175576000366003190112620001755760209060ff600c541615158152f35b600435906001600160a01b03821682036200017557565b60005b838110620010ec5750506000910152565b8181015183820152602001620010db565b906020916200111881518092818552858086019101620010d8565b601f01601f1916010190565b9181601f84011215620001755782359167ffffffffffffffff831162000175576020808501948460051b0101116200017557565b610120810190811067ffffffffffffffff8211176200060157604052565b90601f8019910116810190811067ffffffffffffffff8211176200060157604052565b81601f82011215620001755780359067ffffffffffffffff8211620006015760405192620011d2601f8401601f19166020018562001176565b828452602083830101116200017557816000926020809301838601378301015290565b90600182811c9216801562001227575b60208310146200121157565b634e487b7160e01b600052602260045260246000fd5b91607f169162001205565b60405190600082600a54916200124883620011f5565b80835292600190818116908115620012c7575060011462001275575b50620012739250038362001176565b565b600a60009081529150600080516020620039a48339815191525b848310620012ab57506200127393505081016020013862001264565b81935090816020925483858a010152019101909185926200128f565b9050602092506200127394915060ff191682840152151560051b8201013862001264565b6000198114620012fb5760010190565b634e487b7160e01b600052601160045260246000fd5b919081101562000a125760051b0190565b356001600160a01b0381168103620001755790565b908160209103126200017557518015158103620001755790565b979998946101009792946200139b9497928a5260018060a01b03978880971660208c015260408b015260608a0152608089015260a08801526101208060c0890152870190620010fd565b961660e085015216910152565b61ffff809116908114620012fb5760010190565b67ffffffffffffffff8111620006015760051b60200190565b600061ffff916001838194825416915b620013f5575b5050505050600090565b80841693828510156200143e578594600052600b60205260018060a01b0380604060002054169085161462001436576200142f90620013a8565b93620013e5565b505050505090565b50620013eb565b909160405192602084019260ff60f81b84526001600160601b03199060601b16602185015260358401526055830152605582526080820182811067ffffffffffffffff8211176200060157604052905190206001600160a01b031690565b91908203918211620012fb5756fe608080604052346200054a57620024f280380380916200002082856200054f565b8339810190610120818303126200054a57805190620000426020820162000573565b60408201519060608301519260808101519460a082015160c083015160018060401b0381116200054a57830188601f820112156200054a578051906001600160401b0382116200039b5760405199620000a6601f8401601f19166020018c6200054f565b828b52602083830101116200054a5760005b8281106200053557505060206000918a010152620000e8610100620000e060e0860162000573565b940162000573565b620000f4338662000588565b1562000523576040516370a0823160e01b81523060048201526020816024816001600160a01b038a165afa8015620004b5578491600091620004e5575b5010620004d35762000144338562000588565b15620004c157600080546001600160a01b0319166001600160a01b03929092169190911790556040516001600160401b036104e38201908111908211176200039b576104e36200200f8239806104e3810103906000f08015620004b557601480546001600160a01b03929092166001600160a01b031992831681179091556001805490921617905560405161012081018082116001600160401b03909111176200039b576101208101604052828152600060208201526000604082015260006060820152600060808201528160a0820152600060c08201528260e0820152610100429101528160035560006004556000600555600060065560006007556008556000600955600a5542600b556040519081604081011060018060401b036040840111176200039b57604082810181526001600160a01b03918216808452939091166020928301819052600c80546001600160a01b03199081169095179055600d8054909416179092559051908101906001600160401b038211818310176200039b5760409190915284905283516001600160401b0381116200039b57600e54600181811c91168015620004aa575b60208210146200049457601f81116200042a575b50602094601f8211600114620003bd57948192939495600092620003b1575b50508160011b916000199060031b1c191617600e555b600f805460ff19169055604051606081016001600160401b038111828210176200039b578491604091825283815284602082015201526010556011556012553360018060a01b03196013541617601355604051611a0290816200060d8239f35b634e487b7160e01b600052604160045260246000fd5b01519050388062000325565b601f19821695600e60005260206000209160005b8881106200041157508360019596979810620003f7575b505050811b01600e556200033b565b015160001960f88460031b161c19169055388080620003e8565b91926020600181928685015181550194019201620003d1565b600e6000527fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fd601f830160051c8101916020841062000489575b601f0160051c01905b8181106200047c575062000306565b600081556001016200046d565b909150819062000464565b634e487b7160e01b600052602260045260246000fd5b90607f1690620002f2565b6040513d6000823e3d90fd5b604051632181b39760e01b8152600490fd5b6040516357084d7360e11b8152600490fd5b91506020823d6020116200051a575b8162000503602093836200054f565b810103126200051757508390513862000131565b80fd5b3d9150620004f4565b6040516372146d6160e11b8152600490fd5b60208183018101518c830182015201620000b8565b600080fd5b601f909101601f19168101906001600160401b038211908210176200039b57604052565b51906001600160a01b03821682036200054a57565b6001600160a01b03908116919082156200060457602460209260405194859384926370a0823160e01b84521660048301525afa9081620005d3575b50620005ce57600090565b600190565b602090813d8111620005fc575b620005ec81836200054f565b810103126200054a5738620005c3565b503d620005e0565b50505060009056fe608060408181526004918236101561001657600080fd5b60009260e0918435831c90816302d05d3f14610f165750806306fdde0314610e485780630e5634df14610d2c5780630f574ba714610a6b5780632e1a7d4d1461089d57806334793e05146108505780638a03764f1461081f5780638cd47415146107f5578063af5c3ac4146107cb578063c0ae398c14610769578063c45a01551461073f578063cbf0641514610560578063d08452c21461052c578063e427d08c146104fe5763f69e8fba146100cb57600080fd5b346104fa57836003193601126104fa5783546001600160a01b039390841692338490036104ed576100fa6112e8565b9461010f610106611420565b968742916115ae565b9183519661011c88610fc2565b6001885260209788368183013760036101348261106b565b52845160078110156104da57916101506101609289959461114c565b50429061015b61128a565b611112565b966101748860a06040820151910151111590565b156104bf5750888360135416865193848092635e615a6b60e01b82525afa9182156104b557899261038d575b5050838260c083015116910151906101e08286516101bd81610fc2565b60128152716578697446656550657263656e743a20257360701b8b820152611974565b848701610215815187516101f381610fc2565b601181527073746174652e7370656e74496e3a20257360781b8c820152611974565b5191620f42409081840284810483148515171561037a579180610240610249936102c09796956115ea565b040480936110aa565b9161027781885161025981610fc2565b600d81526c666565416d6f756e743a20257360981b8d820152611974565b6102a983885161028681610fc2565b601281527163726561746f72526576656e75653a20257360701b8d820152611974565b80610364575b505082600c5416838a5416906111ba565b506005825284518061034a575b505b6102d8826114a5565b6102e18561145e565b86541694828501519451915193600785101561033757509282610333926060957f423655f1f3de1bcb0a4e39a00d01e1e3d389d77ef6ce384e129be79181ef9d8e979551958652850152830190611048565ba280f35b634e487b7160e01b885260219052602487fd5b61035d9082600d5416838a5416906111ba565b50386102cd565b6103729185600c54166111ba565b5038806102af565b634e487b7160e01b8c526011895260248cfd5b9091503d808a833e61039f8183610fde565b81019088818303126104b157805167ffffffffffffffff91828211610492570190610120828403126104ad578651936103d785610f6d565b825185526103e68b8401611276565b8b8601528783015188860152606083015160608601526080830151608086015260a083015160a086015261041c60c08401611276565b60c086015261042c818401611276565b908501526101009182810151908282116104a957019083601f830112156104925781519081116104965787519361046c601f8301601f19168d0186610fde565b8185528b828401011161049257610488918b8086019101611000565b82015238806101a0565b8b80fd5b634e487b7160e01b8c526041895260248cfd5b8c80fd5b8a80fd5b8980fd5b85513d8b823e3d90fd5b6104d492855283600d541691880151916111ba565b506102cf565b634e487b7160e01b8b526021885260248bfd5b50516282b42960e81b8152fd5b8380fd5b5050503461052857816003193601126105285760015490516001600160a01b039091168152602090f35b5080fd5b83853461055d578060031936011261055d5750600c54600d5482516001600160a01b03928316815291166020820152f35b80fd5b509291903461073b578260031936011261073b5761057d33611350565b6020810151151580610730575b15610720576105ba6105a261059d61128a565b611563565b916020830151606084015160c085015191429361187f565b916105d66105c66112e8565b42906105d0611420565b906115ae565b906105ea8360a06040820151910151111590565b968251600781101561070d576003149788610705575b5087156106d8575b50610653929161064e9160c09697986000146106ac5785518061068d575b50600d54868801516106429133906001600160a01b03166111ba565b505b42908601526114a5565b61145e565b61065d81336114bf565b015190519081527f920bb94eb3842a728db98228c375ff6b00c5bc5a54fac6736155517a0a20a61a60203392a280f35b600c546106a5919033906001600160a01b03166111ba565b5038610626565b6106d26106bf875160a089015190611269565b600c5433906001600160a01b03166111ba565b50610644565b9650815160078110156106f2576005149650610653610608565b634e487b7160e01b875260218852602487fd5b975038610600565b634e487b7160e01b885260218252602488fd5b8251637a851da960e11b81528590fd5b50818101511561058a565b8280fd5b5050503461052857816003193601126105285760135490516001600160a01b039091168152602090f35b5091346104fa57836003193601126104fa5761012093506003549254916005546006546007546008549160095493600a5496600b549881519a8b5260208b01528901526060880152608087015260a086015260c0850152830152610100820152f35b505050346105285781600319360112610528576020906107f360ff600f541691518092611048565bf35b5050503461052857816003193601126105285760145490516001600160a01b039091168152602090f35b5050503461052857816003193601126105285760609060105490601154906012549181519384526020840152820152f35b843461055d578060031936011261055d5761089a61089561086f61128a565b61088661064e61087d611420565b92834291611112565b42906108906112e8565b6115ae565b6114a5565b80f35b508383346105285760208060031936011261073b578335918215610a5c576108c433611350565b8281015115610a4c5780518411610a35576108dd611420565b6108f06108e86112e8565b8242916115ae565b83516108fb81610fa6565b6002815284368783013760026109108261106b565b52600161091c8261108e565b5281516007811015610a22576109d49361096a7f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d59897969461096461064e956109749561114c565b506114a5565b429061015b61128a565b91858301516109cc610996606086019283519460c0880195429287519261187f565b9283518b146000146109f8578b898501528b84525b6109b68b82516110aa565b8091526109c6835180928d61183f565b906110aa565b9052336114bf565b600c546109ed90859033906001600160a01b03166111ba565b50519283523392a280f35b888401610a0e8c6109c68351809286519061183f565b9052610a1b8b85516110aa565b84526109ab565b634e487b7160e01b895260218a52602489fd5b81516318928cbf60e31b8152808701859052602490fd5b8151637a851da960e11b81528690fd5b51630db73cdf60e41b81528490fd5b509291602091826003193601126104fa57843592610a99610a8a6112e8565b610a92611420565b42916115ae565b8351610aa481610fa6565b600281528436848301376001610ab98261106b565b526002610ac58261108e565b5281516007811015610d1957610adf92916109649161114c565b600c5483516370a0823160e01b815233888201526001600160a01b03909116908281602481855afa908115610d0f578791610cde575b50858110610cc2575081869160648651809481936323b872dd60e01b8352338d8401523060248401528a60448401525af1908115610cb8578691610c8b575b5015610c7b57907ff94991dcbea6e8ac439cbc93bd9c62a4d39f04e0ad656df9a703f13552c2787f9291610b8733611350565b610b9261059d61128a565b908281015115600014610c2457508061064e610bbb60c0610c169401516060840151908a611812565b94898584015191885192610bce84610f3a565b8b84528888850152898401524260608401528160808401528160a08401528160c08401528201525b60c08301610c058a8251611269565b9052606083016109cc878251611269565b82519485528401523392a280f35b92508061064e610c5960c0610c169401805196610c4860608601988951908d611812565b97878601519051904293519261187f565b610c64898251611269565b8152848101610c74878251611269565b9052610bf6565b82516307a4ced160e51b81528690fd5b610cab9150823d8411610cb1575b610ca38183610fde565b81019061119d565b38610b54565b503d610c99565b84513d88823e3d90fd5b87604491878751926381ddee1b60e01b84528301526024820152fd5b90508281813d8311610d08575b610cf58183610fde565b81010312610d04575138610b15565b8680fd5b503d610ceb565b85513d89823e3d90fd5b634e487b7160e01b885260218952602488fd5b5082843461055d578060031936011261055d5781519181600e5492600184811c91818616958615610e3e575b6020968785108114610e2b578899509688969785829a529182600014610e04575050600114610da8575b505050610da49291610d95910385610fde565b51928284938452830190611023565b0390f35b9190869350600e83527fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fd5b828410610dec5750505082010181610d95610da4610d82565b8054848a018601528895508794909301928101610dd3565b60ff19168782015293151560051b86019093019350849250610d959150610da49050610d82565b634e487b7160e01b835260228a52602483fd5b92607f1692610d58565b5082843461055d578060031936011261055d578151918160025492600184811c91818616958615610f0c575b6020968785108114610e2b578899509688969785829a529182600014610e04575050600114610eb057505050610da49291610d95910385610fde565b9190869350600283527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace5b828410610ef45750505082010181610d95610da4610d82565b8054848a018601528895508794909301928101610edb565b92607f1692610e74565b85903461052857816003193601126105285790546001600160a01b03168152602090f35b610100810190811067ffffffffffffffff821117610f5757604052565b634e487b7160e01b600052604160045260246000fd5b610120810190811067ffffffffffffffff821117610f5757604052565b6020810190811067ffffffffffffffff821117610f5757604052565b6060810190811067ffffffffffffffff821117610f5757604052565b6040810190811067ffffffffffffffff821117610f5757604052565b90601f8019910116810190811067ffffffffffffffff821117610f5757604052565b60005b8381106110135750506000910152565b8181015183820152602001611003565b9060209161103c81518092818552858086019101611000565b601f01601f1916010190565b9060078210156110555752565b634e487b7160e01b600052602160045260246000fd5b8051156110785760200190565b634e487b7160e01b600052603260045260246000fd5b8051600110156110785760400190565b60078210156110555752565b919082039182116110b757565b634e487b7160e01b600052601160045260246000fd5b604051906110da82610f6d565b816101006000918281528260208201528260408201528260608201528260808201528260a08201528260c08201528260e08201520152565b916111379161111f6110cd565b5060406020820151910151906101008501519261161d565b80611140575090565b6111499161172f565b90565b91909160005b83518110156111955760208160051b850101516007808210156110555783101561105557821461118d5760001981146110b757600101611152565b506001925050565b506000925050565b908160209103126111b5575180151581036111b55790565b600080fd5b91909181158015611258575b6112505760446020926000604051958694859363a9059cbb60e01b855260018060a01b0380931660048601526024850152165af190811561124457600091611226575b501561121457600190565b6040516307a4ced160e51b8152600490fd5b61123e915060203d8111610cb157610ca38183610fde565b38611209565b6040513d6000823e3d90fd5b505050600190565b506001600160a01b038316156111c6565b919082018092116110b757565b51906001600160a01b03821682036111b557565b6112926110cd565b5060405161129f81610f6d565b6003548152600454602082015260055460408201526006546060820152600754608082015260085460a082015260095460c0820152600a5460e0820152600b5461010082015290565b60006040516112f681610f8a565b5260405161130381610f8a565b61114960ff600f54168261109e565b6040519061131f82610f3a565b8160e06000918281528260208201528260408201528260608201528260808201528260a08201528260c08201520152565b611358611312565b506014546040516316c1973960e01b81526001600160a01b0392831660048201529161010091829184916024918391165afa9081156112445760009161139f575b50905090565b82813d8311611419575b6113b38183610fde565b8101031261055d575060e0604051916113cb83610f3a565b805183526020810151602084015260408101516040840152606081015160608401526080810151608084015260a081015160a084015260c081015160c0840152015160e08201528038611399565b503d6113a9565b60006040805161142f81610fa6565b828152826020820152015260405161144681610fa6565b60105481526011546020820152601254604082015290565b8051600355602081015160045560408101516005556060810151600655608081015160075560a081015160085560c081015160095560e0810151600a556101000151600b55565b5160078110156110555760ff8019600f5416911617600f55565b6014546001600160a01b03908116803b156111b557600092836101249260e0604051978896879563159595fd841b875216600486015280516024860152602081015160448601526040810151606486015260608101516084860152608081015160a486015260a081015160c486015260c081015160e486015201516101048401525af180156112445761154f5750565b67ffffffffffffffff8111610f5757604052565b61156b6110cd565b50611574611420565b61159160406020830151920151916101009283850151914261161d565b8061159b57505090565b6115a5919261172f565b80914291015290565b9160006040516115bd81610f8a565b528251600781101561105557826115e49261114994519060406020840151930151936116b6565b8261109e565b818102929181159184041417156110b757565b8115611607570490565b634e487b7160e01b600052601260045260246000fd5b9290919282811080156116ac575b6116a3578261165493831061169b575b5081848211611693575b61164e916110aa565b926110aa565b8015801561168b575b61168457670de0b6b3a7640000918281029281840414901517156110b757611149916115fd565b5050600090565b50811561165d565b849150611645565b91503861163b565b50505050600090565b508382101561162b565b929190926007811015806110555760068214908115611722575b8115611712575b5061170a57508210156116ec57505050600090565b8110156116fa575050600190565b101561170557600290565b600390565b935050505090565b90506110555760058114386116d7565b50506004811460006116d0565b906117386110cd565b50606082018051151580611809575b61175057505090565b670de0b6b3a764000091826117668286516115ea565b04918361177860c087019384516115ea565b049160408601611789848251611269565b90526117968382516110aa565b9052821580156117a9575b505050505090565b6117b48487516110aa565b865284840290848204861417156110b7576117d09151906115fd565b6117df60208601918251611269565b90528281029281840414901517156110b7576117fa916115fd565b608082015238808080806117a1565b50811515611747565b9180158015611837575b611832576111499261182d916115ea565b6115fd565b505090565b50821561181c565b909180158015611877575b6113995761185c6118619284926115ea565b611269565b6000198101919082116110b757611149916115fd565b50811561184a565b93929361188a611312565b50805190602081015195604082015196606083015195608084015160a0850151916118ff60e060c08801519701519b6040519c8d996118c88b610f3a565b8a5260208a0196875260e060408b019a838c52606081019d8e526080810196875260a0810197885260c081019a8b520152896110aa565b9181611912575b50505050505050525290565b6119669561193d61182d92670de0b6b3a7640000611934611945978a516115ea565b04905190611269565b9551906115ea565b9061195b611954838c516110aa565b8251611269565b905288528251611269565b905238808080808080611906565b6000919082916119b960405180926119a56020830195632d839cb360e21b8752604060248501526064840190611023565b90604483015203601f198101835282610fde565b51906a636f6e736f6c652e6c6f675afa5056fea2646970667358221220c95c98cb0dfae07083b1e5c63270404cd482b3142bd5401bcd0129eb090ed57764736f6c6343000814003360a0806040523461003657336080526104a7908161003c823960805181818160800152818160ec015281816101a901526103580152f35b600080fdfe604060808152600436101561001357600080fd5b60009060e08235811c908163159595fd146102ce57816316c19739146101d85781635cb0175c14610194578163f8c4ee6d146100bf575063fb33ce811461005957600080fd5b346100bb57806003193601126100bb576100716103bb565b6001600160a01b03906100a7337f000000000000000000000000000000000000000000000000000000000000000084161461040d565b168252816020526007602435918320015580f35b5080fd5b905034610190576080366003190112610190576007906100dd6103bb565b906001600160a01b03610113337f000000000000000000000000000000000000000000000000000000000000000083161461040d565b61011b6103d6565b9460243586526020860160443581528187016064358152606088019142835260808901938a855260a08a01958b875260c08b01978c89528b01988c8a52168b528a6020528a20985189555160018901555160028801555160038701555160048601555160058501555160068401555191015580f35b8280fd5b5050346100bb57816003193601126100bb57517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b9050346101905760203660031901126101905781610100936101f86103bb565b81846102026103d6565b82815282602082015282868201528260608201528260808201528260a08201528260c0820152015260018060a01b0316815280602052206102416103d6565b9080549384835260018201549060208401918252600283015490808501918252600384015490606086019182526004850154926080870193845260058601549460a0880195865288600760068901549860c08b01998a52015498019788528251998a525160208a015251908801525160608701525160808601525160a08501525160c08401525190820152f35b90503461019057610120366003190112610190576102ea6103bb565b6101003660231901126103b7576007916103026103d6565b936024358552602085016044358152818601606435815260608701906084358252608088019260a435845260a089019460c435865260c08a019660e43588528a019761010435895260018060a01b039061037f827f000000000000000000000000000000000000000000000000000000000000000016331461040d565b168b528a6020528a20985189555160018901555160028801555160038701555160048601555160058501555160068401555191015580f35b8380fd5b600435906001600160a01b03821682036103d157565b600080fd5b60405190610100820182811067ffffffffffffffff8211176103f757604052565b634e487b7160e01b600052604160045260246000fd5b1561041457565b60405162461bcd60e51b815260206004820152602f60248201527f506f736974696f6e2063616e206f6e6c7920626520736574206279207468652060448201526e1cdd1c99585b4818dbdb9d1c9858dd608a1b6064820152608490fdfea26469706673582212200e736f41d0f700841c64e931e5d2c65e65de0d66e07534a99153a88a69263f6d64736f6c63430008140033c65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a8a2646970667358221220fabd9b1156174ea2988bed376d8080cedf7cc9c00840f3c15e8d2c6f50263a8a64736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2051,
        "contract": "contracts/StreamFactory.sol:StreamFactory",
        "label": "acceptedInSupplyTokens",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2059,
        "contract": "contracts/StreamFactory.sol:StreamFactory",
        "label": "currentStreamId",
        "offset": 0,
        "slot": "1",
        "type": "t_uint16"
      },
      {
        "astId": 2062,
        "contract": "contracts/StreamFactory.sol:StreamFactory",
        "label": "params",
        "offset": 0,
        "slot": "2",
        "type": "t_struct(Params)2047_storage"
      },
      {
        "astId": 2066,
        "contract": "contracts/StreamFactory.sol:StreamFactory",
        "label": "streamAddresses",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint16,t_address)"
      },
      {
        "astId": 2068,
        "contract": "contracts/StreamFactory.sol:StreamFactory",
        "label": "frozen",
        "offset": 0,
        "slot": "12",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint16,t_address)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Params)2047_storage": {
        "encoding": "inplace",
        "label": "struct StreamFactory.Params",
        "members": [
          {
            "astId": 2030,
            "contract": "contracts/StreamFactory.sol:StreamFactory",
            "label": "streamCreationFee",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2032,
            "contract": "contracts/StreamFactory.sol:StreamFactory",
            "label": "streamCreationFeeToken",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 2034,
            "contract": "contracts/StreamFactory.sol:StreamFactory",
            "label": "exitFeePercent",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2036,
            "contract": "contracts/StreamFactory.sol:StreamFactory",
            "label": "minWaitingDuration",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 2038,
            "contract": "contracts/StreamFactory.sol:StreamFactory",
            "label": "minBootstrappingDuration",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 2040,
            "contract": "contracts/StreamFactory.sol:StreamFactory",
            "label": "minStreamDuration",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 2042,
            "contract": "contracts/StreamFactory.sol:StreamFactory",
            "label": "feeCollector",
            "offset": 0,
            "slot": "6",
            "type": "t_address"
          },
          {
            "astId": 2044,
            "contract": "contracts/StreamFactory.sol:StreamFactory",
            "label": "protocolAdmin",
            "offset": 0,
            "slot": "7",
            "type": "t_address"
          },
          {
            "astId": 2046,
            "contract": "contracts/StreamFactory.sol:StreamFactory",
            "label": "tosVersion",
            "offset": 0,
            "slot": "8",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}