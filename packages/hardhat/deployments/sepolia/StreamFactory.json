{
  "address": "0x9c67eDC37E8dc1a8b50dA85f9a5F29151941378c",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_streamCreationFee",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_streamCreationFeeToken",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal",
          "name": "_exitFeeRatio",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "_minWaitingDuration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minBootstrappingDuration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minStreamDuration",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_acceptedInSupplyTokens",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_feeCollector",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_protocolAdmin",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_tosVersion",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "BootstrappingDurationTooShort",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ContractFrozen",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FeeTransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientNativeToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientOutAmount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requiredTokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenBalance",
          "type": "uint256"
        }
      ],
      "name": "InsufficientTokenPayment",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidBootstrappingStartTime",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidBootstrappingTime",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidExitCondition",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidExitFeeRatio",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidFeeCollector",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInSupplyToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidOutSupplyToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidPosition",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidProtocolAdmin",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidStreamEndTime",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidStreamStartTime",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidToSVersion",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidWithdrawAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotAdmin",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OperationNotAllowed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PaymentFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StreamAddressPredictionFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StreamDurationTooShort",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StreamEndMustBeAfterStart",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StreamInputTokenNotAccepted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StreamStartMustBeAfterBootstrapping",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TokenTransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Unauthorized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WaitingDurationTooShort",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "cap",
          "type": "uint256"
        }
      ],
      "name": "WithdrawAmountExceedsBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroOutSupplyNotAllowed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "tokensAdded",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "tokensRemoved",
          "type": "address[]"
        }
      ],
      "name": "AcceptedTokensUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "streamAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "subscriber",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "purchased",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "spentIn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "exitTimestamp",
          "type": "uint256"
        }
      ],
      "name": "Exited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newFeeCollector",
          "type": "address"
        }
      ],
      "name": "FeeCollectorUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "frozen",
          "type": "bool"
        }
      ],
      "name": "FrozenStateUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "streamCreationFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "exitFeeRatio",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minWaitingDuration",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minBootstrappingDuration",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minStreamDuration",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "tosVersion",
          "type": "string"
        }
      ],
      "name": "ParamsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newProtocolAdmin",
          "type": "address"
        }
      ],
      "name": "ProtocolAdminUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "streamAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "outSupply",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum IStreamTypes.Status",
          "name": "status",
          "type": "uint8"
        }
      ],
      "name": "StreamCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "streamOutToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "streamInToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "streamFactoryAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "streamOutAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bootstrappingStartTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "streamStartTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "streamEndTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "threshold",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "streamName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "tosVersion",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "streamAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "streamId",
          "type": "uint16"
        }
      ],
      "name": "StreamCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "streamAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "creatorRevenue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "exitFeeAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum IStreamTypes.Status",
          "name": "status",
          "type": "uint8"
        }
      ],
      "name": "StreamFinalized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "streamAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum IStreamTypes.Status",
          "name": "mainStatus",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lastUpdated",
          "type": "uint256"
        }
      ],
      "name": "StreamSynced",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "streamAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lastUpdated",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "newStatus",
          "type": "uint8"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct Decimal",
          "name": "distIndex",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "outRemaining",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "inSupply",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "spentIn",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct Decimal",
          "name": "currentStreamedPrice",
          "type": "tuple"
        }
      ],
      "name": "StreamSynced",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "streamAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "subscriber",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newShares",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalSharesAfter",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalInSupplyAfter",
          "type": "uint256"
        }
      ],
      "name": "Subscribed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "streamAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "subscriber",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "remainingInBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "remainingShares",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalInSupply",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalShares",
          "type": "uint256"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "NATIVE_TOKEN",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "acceptedInSupplyTokens",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_streamOutAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_outSupplyToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_bootstrappingStartTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_streamStartTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_streamEndTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_threshold",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_inSupplyToken",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_tosVersion",
          "type": "string"
        },
        {
          "internalType": "bytes32",
          "name": "_salt",
          "type": "bytes32"
        }
      ],
      "name": "createStream",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentStreamId",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "frozen",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAcceptedInSupplyTokens",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getParams",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "streamCreationFee",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "streamCreationFeeToken",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Decimal",
              "name": "exitFeeRatio",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "minWaitingDuration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minBootstrappingDuration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minStreamDuration",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "feeCollector",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "protocolAdmin",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "tosVersion",
              "type": "string"
            }
          ],
          "internalType": "struct StreamFactory.Params",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_streamId",
          "type": "uint16"
        }
      ],
      "name": "getStream",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStreams",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "isAcceptedInSupplyToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_streamAddress",
          "type": "address"
        }
      ],
      "name": "isStream",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "params",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "streamCreationFee",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "streamCreationFeeToken",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal",
          "name": "exitFeeRatio",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "minWaitingDuration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minBootstrappingDuration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minStreamDuration",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "feeCollector",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "protocolAdmin",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "tosVersion",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_salt",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "bytecodeHash",
          "type": "bytes32"
        }
      ],
      "name": "predictAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_frozen",
          "type": "bool"
        }
      ],
      "name": "setFrozen",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "streamAddresses",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokens_to_add",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "tokens_to_remove",
          "type": "address[]"
        }
      ],
      "name": "updateAcceptedTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeCollector",
          "type": "address"
        }
      ],
      "name": "updateFeeCollector",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_streamCreationFee",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal",
          "name": "_exitFeeRatio",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "_minWaitingDuration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minBootstrappingDuration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minStreamDuration",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_tosVersion",
          "type": "string"
        }
      ],
      "name": "updateParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_protocolAdmin",
          "type": "address"
        }
      ],
      "name": "updateProtocolAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7a5f198ae4188fd7afab1dd44f94d65f229551ad0551eb50c6bbb6a394a57194",
  "receipt": {
    "to": null,
    "from": "0xB4eE189569597EFDB3bB48DB5ede8394d1D48e7b",
    "contractAddress": "0x9c67eDC37E8dc1a8b50dA85f9a5F29151941378c",
    "transactionIndex": 89,
    "gasUsed": "3836632",
    "logsBloom": "0x
    "blockHash": "0xce405e246fa97add54058c1917cdb729c8f101956946826337b868ce9a18e9c8",
    "transactionHash": "0x7a5f198ae4188fd7afab1dd44f94d65f229551ad0551eb50c6bbb6a394a57194",
    "logs": [],
    "blockNumber": 7994848,
    "cumulativeGasUsed": "12520685",
    "status": 1,
    "byzantium": true
  },
  "args": [
    1,
    "0x0000000000000000000000000000000000000000",
    {
      "value": 100000
    },
    1,
    1,
    1,
    [
      "0x2AC7623Ac10543F0F587Be05b4655a5c2eBb06B8"
    ],
    "0xB4eE189569597EFDB3bB48DB5ede8394d1D48e7b",
    "0xB4eE189569597EFDB3bB48DB5ede8394d1D48e7b",
    "1.0.0"
  ],
  "numDeployments": 1,
  "solcInputHash": "e62fe019a687a3bedd78c93fd4a2cc05",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_streamCreationFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_streamCreationFeeToken\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal\",\"name\":\"_exitFeeRatio\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_minWaitingDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minBootstrappingDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minStreamDuration\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_acceptedInSupplyTokens\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_feeCollector\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_protocolAdmin\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_tosVersion\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"BootstrappingDurationTooShort\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ContractFrozen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FeeTransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientNativeToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientOutAmount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requiredTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenBalance\",\"type\":\"uint256\"}],\"name\":\"InsufficientTokenPayment\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidBootstrappingStartTime\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidBootstrappingTime\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidExitCondition\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidExitFeeRatio\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidFeeCollector\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInSupplyToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidOutSupplyToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPosition\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidProtocolAdmin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidStreamEndTime\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidStreamStartTime\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidToSVersion\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidWithdrawAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAdmin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OperationNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PaymentFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StreamAddressPredictionFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StreamDurationTooShort\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StreamEndMustBeAfterStart\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StreamInputTokenNotAccepted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StreamStartMustBeAfterBootstrapping\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenTransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WaitingDurationTooShort\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cap\",\"type\":\"uint256\"}],\"name\":\"WithdrawAmountExceedsBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroOutSupplyNotAllowed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokensAdded\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokensRemoved\",\"type\":\"address[]\"}],\"name\":\"AcceptedTokensUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"streamAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"subscriber\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"purchased\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"spentIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"exitTimestamp\",\"type\":\"uint256\"}],\"name\":\"Exited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newFeeCollector\",\"type\":\"address\"}],\"name\":\"FeeCollectorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenStateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"streamCreationFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"exitFeeRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minWaitingDuration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minBootstrappingDuration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minStreamDuration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"tosVersion\",\"type\":\"string\"}],\"name\":\"ParamsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newProtocolAdmin\",\"type\":\"address\"}],\"name\":\"ProtocolAdminUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"streamAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"outSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum IStreamTypes.Status\",\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"StreamCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"streamOutToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"streamInToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"streamFactoryAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"streamOutAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bootstrappingStartTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"streamStartTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"streamEndTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"streamName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"tosVersion\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"streamAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"streamId\",\"type\":\"uint16\"}],\"name\":\"StreamCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"streamAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"creatorRevenue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"exitFeeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum IStreamTypes.Status\",\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"StreamFinalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"streamAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum IStreamTypes.Status\",\"name\":\"mainStatus\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastUpdated\",\"type\":\"uint256\"}],\"name\":\"StreamSynced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"streamAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastUpdated\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"newStatus\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct Decimal\",\"name\":\"distIndex\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"outRemaining\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"spentIn\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct Decimal\",\"name\":\"currentStreamedPrice\",\"type\":\"tuple\"}],\"name\":\"StreamSynced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"streamAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"subscriber\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newShares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalSharesAfter\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalInSupplyAfter\",\"type\":\"uint256\"}],\"name\":\"Subscribed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"streamAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"subscriber\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remainingInBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remainingShares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalInSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalShares\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"NATIVE_TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"acceptedInSupplyTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_streamOutAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_outSupplyToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_bootstrappingStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_streamStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_streamEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_inSupplyToken\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_tosVersion\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"_salt\",\"type\":\"bytes32\"}],\"name\":\"createStream\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentStreamId\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"frozen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAcceptedInSupplyTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getParams\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"streamCreationFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"streamCreationFeeToken\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal\",\"name\":\"exitFeeRatio\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"minWaitingDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBootstrappingDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minStreamDuration\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"feeCollector\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"protocolAdmin\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"tosVersion\",\"type\":\"string\"}],\"internalType\":\"struct StreamFactory.Params\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_streamId\",\"type\":\"uint16\"}],\"name\":\"getStream\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStreams\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"isAcceptedInSupplyToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_streamAddress\",\"type\":\"address\"}],\"name\":\"isStream\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"params\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"streamCreationFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"streamCreationFeeToken\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal\",\"name\":\"exitFeeRatio\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"minWaitingDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBootstrappingDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minStreamDuration\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"feeCollector\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"protocolAdmin\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"tosVersion\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_salt\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"bytecodeHash\",\"type\":\"bytes32\"}],\"name\":\"predictAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_frozen\",\"type\":\"bool\"}],\"name\":\"setFrozen\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"streamAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens_to_add\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"tokens_to_remove\",\"type\":\"address[]\"}],\"name\":\"updateAcceptedTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeCollector\",\"type\":\"address\"}],\"name\":\"updateFeeCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_streamCreationFee\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal\",\"name\":\"_exitFeeRatio\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_minWaitingDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minBootstrappingDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minStreamDuration\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tosVersion\",\"type\":\"string\"}],\"name\":\"updateParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_protocolAdmin\",\"type\":\"address\"}],\"name\":\"updateProtocolAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/StreamFactory.sol\":\"StreamFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/DecimalMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\n/**\\n * @title Decimal type and math operations\\n * @dev Library for handling decimal math operations with fixed-point arithmetic\\n */\\n\\n// Define the Decimal struct at the top level for easier imports\\nstruct Decimal {\\n    uint256 value; // Value scaled by DECIMAL_PRECISION\\n}\\n\\n/**\\n * @title DecimalMath\\n * @dev Library for handling decimal math operations with fixed-point arithmetic\\n */\\nlibrary DecimalMath {\\n    // We'll use 6 decimal places for precision\\n    uint256 public constant DECIMAL_PRECISION = 1e6;\\n\\n    // Convert a regular number to a Decimal\\n    function fromNumber(uint256 value) internal pure returns (Decimal memory) {\\n        return Decimal({ value: value * DECIMAL_PRECISION });\\n    }\\n\\n    // Convert a Decimal to a regular number while keeping the remainder\\n    function toNumber(Decimal memory d) internal pure returns (uint256, Decimal memory) {\\n        return (d.value / DECIMAL_PRECISION, Decimal({ value: d.value % DECIMAL_PRECISION }));\\n    }\\n\\n    // Floor division for Decimal\\n    function floor(Decimal memory d) internal pure returns (uint256) {\\n        return d.value / DECIMAL_PRECISION;\\n    }\\n\\n    // Ceiling division for Decimal\\n    function ceil(Decimal memory d) internal pure returns (uint256) {\\n        return (d.value + DECIMAL_PRECISION - 1) / DECIMAL_PRECISION;\\n    }\\n\\n    // Multiply two Decimals\\n    function mul(Decimal memory a, Decimal memory b) internal pure returns (Decimal memory) {\\n        return Decimal({ value: (a.value * b.value) / DECIMAL_PRECISION });\\n    }\\n\\n    // Multiply Decimal by a scalar\\n    function mulScalar(Decimal memory a, uint256 scalar) internal pure returns (Decimal memory) {\\n        return Decimal({ value: a.value * scalar });\\n    }\\n\\n    // Divide two Decimals\\n    function div(Decimal memory a, Decimal memory b) internal pure returns (Decimal memory) {\\n        return Decimal({ value: (a.value * DECIMAL_PRECISION) / b.value });\\n    }\\n\\n    // Divide Decimal by a scalar\\n    function divScalar(Decimal memory a, uint256 scalar) internal pure returns (Decimal memory) {\\n        return Decimal({ value: a.value / scalar });\\n    }\\n\\n    // Add two Decimals\\n    function add(Decimal memory a, Decimal memory b) internal pure returns (Decimal memory) {\\n        return Decimal({ value: a.value + b.value });\\n    }\\n\\n    // Subtract two Decimals\\n    function sub(Decimal memory a, Decimal memory b) internal pure returns (Decimal memory) {\\n        return Decimal({ value: a.value - b.value });\\n    }\\n\\n    // From ratio to Decimal\\n    function fromRatio(uint256 num, uint256 denom) internal pure returns (Decimal memory) {\\n        return Decimal({ value: (num * DECIMAL_PRECISION) / denom });\\n    }\\n\\n    // > operator for Decimals\\n    function gt(Decimal memory a, Decimal memory b) internal pure returns (bool) {\\n        return a.value > b.value;\\n    }\\n\\n    // < operator for Decimals\\n    function lt(Decimal memory a, Decimal memory b) internal pure returns (bool) {\\n        return a.value < b.value;\\n    }\\n}\\n\",\"keccak256\":\"0x9b3742b7416da139de7bd5e1f24cf402410c717584a6b1c7372590f2d3f633c1\",\"license\":\"MIT\"},\"contracts/PositionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"./PositionTypes.sol\\\";\\nimport \\\"./DecimalMath.sol\\\";\\n\\ncontract PositionStorage {\\n    using PositionTypes for PositionTypes.Position;\\n\\n    mapping(address => PositionTypes.Position) private positions;\\n    address public immutable streamContractAddress;\\n\\n    constructor() {\\n        streamContractAddress = msg.sender;\\n    }\\n\\n    function getPosition(address _owner) external view returns (PositionTypes.Position memory) {\\n        return positions[_owner];\\n    }\\n\\n    modifier onlySender() {\\n        require(msg.sender == streamContractAddress, \\\"Position can only be set by the stream contract\\\");\\n        _;\\n    }\\n\\n    function createPosition(\\n        address owner,\\n        uint256 inBalance,\\n        uint256 shares,\\n        Decimal memory index\\n    ) external onlySender {\\n        positions[owner] = PositionTypes.Position(\\n            inBalance,\\n            shares,\\n            index,\\n            block.timestamp,\\n            DecimalMath.fromNumber(0),\\n            0,\\n            0,\\n            0\\n        );\\n    }\\n\\n    function updatePosition(address owner, PositionTypes.Position memory position) external onlySender {\\n        positions[owner] = position;\\n    }\\n\\n    function setExitDate(address owner, uint256 exitDate) external onlySender {\\n        positions[owner].exitDate = exitDate;\\n    }\\n}\\n\",\"keccak256\":\"0x0218f4e33af9823c02c2a4de973925f6a4f59a35bd68da3ea268680332b24fef\",\"license\":\"MIT\"},\"contracts/PositionTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"./DecimalMath.sol\\\";\\n\\nlibrary PositionTypes {\\n    struct Position {\\n        uint256 inBalance;\\n        uint256 shares;\\n        Decimal index;\\n        uint256 lastUpdateTime;\\n        Decimal pendingReward;\\n        uint256 spentIn;\\n        uint256 purchased;\\n        uint256 exitDate;\\n    }\\n}\\n\",\"keccak256\":\"0x6991ac31893c9a06dd304a8e5ecd5e123621c8b2deb69d4b26c466489fcfbb82\",\"license\":\"MIT\"},\"contracts/Stream.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"./PositionStorage.sol\\\";\\nimport \\\"./PositionTypes.sol\\\";\\nimport \\\"./StreamEvents.sol\\\";\\nimport \\\"./StreamErrors.sol\\\";\\nimport \\\"./StreamTypes.sol\\\";\\nimport \\\"./StreamFactory.sol\\\";\\nimport \\\"./DecimalMath.sol\\\";\\nimport \\\"./StreamMathLib.sol\\\";\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\ninterface IERC20 {\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address to, uint256 amount) external returns (bool);\\n}\\n\\ncontract Stream is IStreamErrors, IStreamEvents {\\n    address public creator;\\n    address public positionStorageAddress;\\n    string public name;\\n\\n    IStreamTypes.StreamState public streamState;\\n    IStreamTypes.StreamTokens public streamTokens;\\n    IStreamTypes.StreamMetadata public streamMetadata;\\n    IStreamTypes.Status public streamStatus;\\n    IStreamTypes.StreamTimes public streamTimes;\\n    address public factory;\\n\\n    PositionStorage public positionStorage;\\n\\n    // constructor should return its address\\n    constructor(\\n        uint256 _streamOutAmount,\\n        address _outSupplyToken,\\n        uint256 _bootstrappingStartTime,\\n        uint256 _streamStartTime,\\n        uint256 _streamEndTime,\\n        uint256 _threshold,\\n        string memory _name,\\n        address _inSupplyToken,\\n        address _creator\\n    ) {\\n        // Validate that output token is a valid ERC20\\n        if (!isValidERC20(_outSupplyToken, msg.sender)) {\\n            revert InvalidOutSupplyToken();\\n        }\\n\\n        // Check if the contract has enough balance of output token\\n        if (!hasEnoughBalance(_outSupplyToken, address(this), _streamOutAmount)) {\\n            revert InsufficientOutAmount();\\n        }\\n\\n        // Validate that in token is a valid ERC20\\n        if (!isValidERC20(_inSupplyToken, msg.sender)) {\\n            revert InvalidInSupplyToken();\\n        }\\n\\n        creator = _creator;\\n        positionStorage = new PositionStorage();\\n        positionStorageAddress = address(positionStorage);\\n\\n        streamState = IStreamTypes.StreamState({\\n            distIndex: DecimalMath.fromNumber(0),\\n            outRemaining: _streamOutAmount,\\n            inSupply: 0,\\n            spentIn: 0,\\n            shares: 0,\\n            currentStreamedPrice: DecimalMath.fromNumber(0),\\n            threshold: _threshold,\\n            outSupply: _streamOutAmount,\\n            lastUpdated: block.timestamp\\n        });\\n\\n        streamTokens = IStreamTypes.StreamTokens({ inSupplyToken: _inSupplyToken, outSupplyToken: _outSupplyToken });\\n\\n        streamMetadata = IStreamTypes.StreamMetadata({ name: _name });\\n\\n        streamStatus = IStreamTypes.Status.Waiting;\\n\\n        streamTimes = IStreamTypes.StreamTimes({\\n            bootstrappingStartTime: _bootstrappingStartTime,\\n            streamStartTime: _streamStartTime,\\n            streamEndTime: _streamEndTime\\n        });\\n\\n        // Store the factory address\\n        factory = msg.sender;\\n    }\\n\\n    function syncStream(\\n        IStreamTypes.StreamState memory state,\\n        IStreamTypes.StreamTimes memory times,\\n        uint256 nowTime\\n    ) internal pure returns (IStreamTypes.StreamState memory) {\\n        Decimal memory diff = StreamMathLib.calculateDiff(\\n            nowTime,\\n            times.streamStartTime,\\n            times.streamEndTime,\\n            state.lastUpdated\\n        );\\n\\n        if (diff.value > 0) {\\n            IStreamTypes.StreamState memory updatedState = StreamMathLib.calculateUpdatedState(state, diff);\\n            return updatedState;\\n        }\\n\\n        return state;\\n    }\\n\\n    function saveStreamState(IStreamTypes.StreamState memory state) internal {\\n        streamState = state;\\n    }\\n\\n    function loadStreamState() internal view returns (IStreamTypes.StreamState memory) {\\n        return streamState;\\n    }\\n\\n    /**\\n     * @dev Validates if an operation is allowed based on the current stream status\\n     * @param allowedStatuses Array of allowed statuses for the operation\\n     * @return bool True if the operation is allowed, false otherwise\\n     */\\n    function isOperationAllowed(\\n        IStreamTypes.Status currentStatus,\\n        IStreamTypes.Status[] memory allowedStatuses\\n    ) internal pure returns (bool) {\\n        for (uint256 i = 0; i < allowedStatuses.length; i++) {\\n            if (currentStatus == allowedStatuses[i]) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @dev Safely transfers tokens from the contract to a recipient\\n     * @param tokenAddress Address of the token to transfer\\n     * @param recipient Address of the recipient\\n     * @param amount Amount of tokens to transfer\\n     * @return bool True if the transfer was successful\\n     */\\n    function safeTokenTransfer(address tokenAddress, address recipient, uint256 amount) internal returns (bool) {\\n        if (amount == 0 || recipient == address(0)) {\\n            return true;\\n        }\\n\\n        IERC20 token = IERC20(tokenAddress);\\n        bool success = token.transfer(recipient, amount);\\n        if (!success) {\\n            revert PaymentFailed();\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Checks if the threshold has been reached for stream finalization\\n     * @return bool True if the threshold has been reached, false otherwise\\n     */\\n    function isThresholdReached(IStreamTypes.StreamState memory state) internal pure returns (bool) {\\n        return state.spentIn >= state.threshold;\\n    }\\n\\n    /**\\n     * @dev Validates a position exists and is active\\n     * @param position The position to validate\\n     * @return bool True if the position is valid and active\\n     */\\n    function isValidActivePosition(PositionTypes.Position memory position) internal pure returns (bool) {\\n        return position.shares > 0 && position.exitDate == 0;\\n    }\\n\\n    function withdraw(uint256 cap) external {\\n        if (cap == 0) {\\n            revert InvalidWithdrawAmount();\\n        }\\n\\n        // Load position once\\n        PositionTypes.Position memory position = loadPosition(msg.sender);\\n\\n        // Check if position is valid and active\\n        if (!isValidActivePosition(position)) {\\n            revert InvalidPosition();\\n        }\\n\\n        if (cap > position.inBalance) {\\n            revert WithdrawAmountExceedsBalance(cap);\\n        }\\n\\n        // load stream times\\n        IStreamTypes.StreamTimes memory times = loadStreamTimes();\\n\\n        // Load and update status\\n        IStreamTypes.Status status = loadStreamStatus();\\n        status = syncStreamStatus(status, times, block.timestamp);\\n\\n        // Check if operation is allowed\\n        IStreamTypes.Status[] memory allowedStatuses = new IStreamTypes.Status[](2);\\n        allowedStatuses[0] = IStreamTypes.Status.Active;\\n        allowedStatuses[1] = IStreamTypes.Status.Bootstrapping;\\n        isOperationAllowed(status, allowedStatuses);\\n\\n        // Save the updated status\\n        saveStreamStatus(status);\\n\\n        // Load and update stream state\\n        IStreamTypes.StreamState memory state = loadStream();\\n        state = syncStream(state, times, block.timestamp);\\n\\n        // Sync position with the updated state\\n        position = StreamMathLib.syncPosition(position, state.distIndex, state.shares, state.inSupply, block.timestamp);\\n\\n        if (cap == position.inBalance) {\\n            position.shares = 0;\\n            position.inBalance = 0;\\n        } else {\\n            position.shares =\\n                position.shares -\\n                StreamMathLib.computeSharesAmount(cap, true, state.inSupply, position.shares);\\n            position.inBalance = position.inBalance - cap;\\n        }\\n\\n        // Update stream state\\n        state.inSupply = state.inSupply - cap;\\n        state.shares = state.shares - StreamMathLib.computeSharesAmount(cap, true, state.inSupply, state.shares);\\n\\n        // Save everything at the end\\n        savePosition(msg.sender, position);\\n        saveStream(state);\\n\\n        // Token transfer\\n        safeTokenTransfer(streamTokens.inSupplyToken, msg.sender, cap);\\n        emit Withdrawn(address(this), msg.sender, position.inBalance, position.shares, state.inSupply, state.shares);\\n    }\\n\\n    function subscribe(uint256 amountIn) external payable {\\n        // Load status once\\n        IStreamTypes.Status status = loadStreamStatus();\\n        IStreamTypes.StreamTimes memory times = loadStreamTimes();\\n        // Update the loaded status\\n        status = syncStreamStatus(status, times, block.timestamp);\\n\\n        // Check if operation is allowed with the updated status\\n        IStreamTypes.Status[] memory allowedStatuses = new IStreamTypes.Status[](2);\\n        allowedStatuses[0] = IStreamTypes.Status.Bootstrapping;\\n        allowedStatuses[1] = IStreamTypes.Status.Active;\\n        isOperationAllowed(status, allowedStatuses);\\n        // Save the updated status\\n        saveStreamStatus(status);\\n\\n        // Validate if sender has enough tokens\\n        IERC20 streamInToken = IERC20(streamTokens.inSupplyToken);\\n        uint256 streamInTokenBalance = streamInToken.balanceOf(msg.sender);\\n        if (streamInTokenBalance < amountIn) {\\n            revert InsufficientTokenPayment(amountIn, streamInTokenBalance);\\n        }\\n\\n        // Transfer tokens from sender to this contract\\n        bool success = streamInToken.transferFrom(msg.sender, address(this), amountIn);\\n        if (!success) {\\n            revert PaymentFailed();\\n        }\\n\\n        // Load position once\\n        PositionTypes.Position memory position = loadPosition(msg.sender);\\n\\n        // Load stream state once\\n        IStreamTypes.StreamState memory state = loadStream();\\n\\n        // Update the stream state\\n        state = syncStream(state);\\n\\n        uint256 newShares = 0;\\n\\n        if (position.shares == 0) {\\n            // New position case\\n            newShares = StreamMathLib.computeSharesAmount(amountIn, false, state.inSupply, state.shares);\\n            position = PositionTypes.Position({\\n                inBalance: amountIn,\\n                shares: newShares,\\n                index: state.distIndex,\\n                lastUpdateTime: block.timestamp,\\n                pendingReward: DecimalMath.fromNumber(0),\\n                spentIn: 0,\\n                purchased: 0,\\n                exitDate: 0\\n            });\\n        } else {\\n            // Update existing position\\n            newShares = StreamMathLib.computeSharesAmount(amountIn, false, state.inSupply, state.shares);\\n            position = StreamMathLib.syncPosition(\\n                position,\\n                state.distIndex,\\n                state.shares,\\n                state.inSupply,\\n                block.timestamp\\n            );\\n            position.inBalance += amountIn;\\n            position.shares += newShares;\\n        }\\n\\n        // Update StreamState\\n        state.inSupply += amountIn;\\n        state.shares += newShares;\\n\\n        // Save everything once we're done modifying\\n        savePosition(msg.sender, position);\\n        saveStream(state);\\n\\n        // Emit event\\n        emit Subscribed(address(this), msg.sender, amountIn, newShares, state.inSupply, state.shares);\\n    }\\n\\n    function exitStream() external {\\n        // Load position\\n        PositionTypes.Position memory position = loadPosition(msg.sender);\\n\\n        // Check if position is valid and active\\n        if (!isValidActivePosition(position)) {\\n            revert InvalidPosition();\\n        }\\n\\n        // Load and update stream state\\n        IStreamTypes.StreamState memory state = loadStream();\\n        state = syncStream(state);\\n\\n        // Sync position with updated state\\n        position = StreamMathLib.syncPosition(position, state.distIndex, state.shares, state.inSupply, block.timestamp);\\n\\n        // Load and update status\\n        IStreamTypes.Status status = loadStreamStatus();\\n        IStreamTypes.StreamTimes memory times = loadStreamTimes();\\n        status = syncStreamStatus(status, times, block.timestamp);\\n\\n        bool thresholdReached = isThresholdReached(state);\\n\\n        // Handle token distributions based on exit scenario\\n        handleExitDistribution(status, thresholdReached, position);\\n\\n        // Set exit date\\n        position.exitDate = block.timestamp;\\n\\n        // Save everything\\n        saveStreamStatus(status);\\n        saveStream(state);\\n        savePosition(msg.sender, position);\\n\\n        emit Exited(address(this), msg.sender, position.purchased, position.spentIn, block.timestamp);\\n    }\\n\\n    function handleExitDistribution(\\n        IStreamTypes.Status status,\\n        bool thresholdReached,\\n        PositionTypes.Position memory position\\n    ) internal {\\n        // Case 1: Successful stream completion\\n        if (isSuccessfulExit(status, thresholdReached)) {\\n            // Return any unused input tokens\\n            if (position.inBalance > 0) {\\n                safeTokenTransfer(streamTokens.inSupplyToken, msg.sender, position.inBalance);\\n            }\\n            // Distribute earned output tokens\\n            safeTokenTransfer(streamTokens.outSupplyToken, msg.sender, position.purchased);\\n            return;\\n        }\\n\\n        // Case 2: Refund scenario\\n        if (isRefundExit(status, thresholdReached)) {\\n            // Full refund of all input tokens (both spent and unspent)\\n            uint256 totalRefund = position.inBalance + position.spentIn;\\n            safeTokenTransfer(streamTokens.inSupplyToken, msg.sender, totalRefund);\\n            return;\\n        }\\n\\n        // If neither condition is met, the exit is not allowed\\n        revert InvalidExitCondition();\\n    }\\n\\n    function isSuccessfulExit(IStreamTypes.Status status, bool thresholdReached) internal pure returns (bool) {\\n        return\\n            (status == IStreamTypes.Status.Ended && thresholdReached) ||\\n            (status == IStreamTypes.Status.FinalizedStreamed);\\n    }\\n\\n    function isRefundExit(IStreamTypes.Status status, bool thresholdReached) internal pure returns (bool) {\\n        return\\n            status == IStreamTypes.Status.Cancelled ||\\n            status == IStreamTypes.Status.FinalizedRefunded ||\\n            (status == IStreamTypes.Status.Ended && !thresholdReached);\\n    }\\n\\n    function finalizeStream() external {\\n        assertIsCreator();\\n\\n        // Load and update status\\n        IStreamTypes.Status status = loadStreamStatus();\\n        IStreamTypes.StreamTimes memory times = loadStreamTimes();\\n        status = syncStreamStatus(status, times, block.timestamp);\\n\\n        // Check if operation is allowed\\n        IStreamTypes.Status[] memory allowedStatuses = new IStreamTypes.Status[](1);\\n        allowedStatuses[0] = IStreamTypes.Status.Ended;\\n        isOperationAllowed(status, allowedStatuses);\\n\\n        // Load and update stream state\\n        IStreamTypes.StreamState memory state = loadStream();\\n        state = syncStream(state, times, block.timestamp);\\n\\n        bool thresholdReached = isThresholdReached(state);\\n\\n        if (thresholdReached) {\\n            // Get fee collector from factory\\n            StreamFactory factoryContract = StreamFactory(factory);\\n            StreamFactory.Params memory params = factoryContract.getParams();\\n            address feeCollector = params.feeCollector;\\n            Decimal memory exitFeeRatio = params.exitFeeRatio;\\n\\n            // Calculate exit fee\\n            (uint256 feeAmount, uint256 creatorRevenue) = StreamMathLib.calculateExitFee(state.spentIn, exitFeeRatio);\\n\\n            // Transfer fee to fee collector if needed\\n            if (feeAmount > 0) {\\n                safeTokenTransfer(streamTokens.inSupplyToken, feeCollector, feeAmount);\\n            }\\n\\n            // Send revenue to creator\\n            safeTokenTransfer(streamTokens.inSupplyToken, creator, creatorRevenue);\\n\\n            // Update status\\n            status = IStreamTypes.Status.FinalizedStreamed;\\n\\n            // Refund out tokens to creator if left any\\n            if (state.outRemaining > 0) {\\n                safeTokenTransfer(streamTokens.outSupplyToken, creator, state.outRemaining);\\n            }\\n        } else {\\n            // Update status\\n            status = IStreamTypes.Status.FinalizedRefunded;\\n\\n            // Refund out tokens to creator\\n            safeTokenTransfer(streamTokens.outSupplyToken, creator, state.outSupply);\\n        }\\n\\n        // Save everything\\n        saveStreamStatus(status);\\n        saveStream(state);\\n\\n        emit StreamFinalized(address(this), creator, state.spentIn, state.outRemaining, status);\\n    }\\n\\n    function syncStreamExternal() external {\\n        // Load, update and save stream state\\n        IStreamTypes.StreamState memory state = loadStream();\\n        IStreamTypes.StreamTimes memory times = loadStreamTimes();\\n        state = syncStream(state, times, block.timestamp);\\n        saveStream(state);\\n\\n        // Load, update and save status\\n        IStreamTypes.Status status = loadStreamStatus();\\n        status = syncStreamStatus(status, times, block.timestamp);\\n        saveStreamStatus(status);\\n\\n        emit StreamSynced(\\n            address(this),\\n            state.lastUpdated,\\n            uint8(status),\\n            state.distIndex,\\n            state.outRemaining,\\n            state.inSupply,\\n            state.spentIn,\\n            state.currentStreamedPrice\\n        );\\n    }\\n\\n    function cancelStream() external {\\n        assertIsCreator();\\n\\n        // Load and update status\\n        IStreamTypes.Status status = loadStreamStatus();\\n        IStreamTypes.StreamTimes memory times = loadStreamTimes();\\n        status = syncStreamStatus(status, times, block.timestamp);\\n\\n        // Check if operation is allowed\\n        IStreamTypes.Status[] memory allowedStatuses = new IStreamTypes.Status[](1);\\n        allowedStatuses[0] = IStreamTypes.Status.Waiting;\\n        bool isAllowed = isOperationAllowed(status, allowedStatuses);\\n        if (!isAllowed) {\\n            revert OperationNotAllowed();\\n        }\\n\\n        // Refund out tokens to creator\\n        safeTokenTransfer(streamTokens.outSupplyToken, creator, streamState.outSupply);\\n\\n        // Update status\\n        status = IStreamTypes.Status.Cancelled;\\n        saveStreamStatus(status);\\n\\n        emit StreamCancelled(address(this), creator, streamState.outSupply, status);\\n    }\\n\\n    function cancelWithAdmin() external {\\n        assertIsProtocolAdmin();\\n\\n        // Load and update status\\n        IStreamTypes.Status status = loadStreamStatus();\\n        IStreamTypes.StreamTimes memory times = loadStreamTimes();\\n        status = syncStreamStatus(status, times, block.timestamp);\\n\\n        // Check if operation is allowed\\n        IStreamTypes.Status[] memory allowedStatuses = new IStreamTypes.Status[](3);\\n        allowedStatuses[0] = IStreamTypes.Status.Waiting;\\n        allowedStatuses[1] = IStreamTypes.Status.Bootstrapping;\\n        allowedStatuses[2] = IStreamTypes.Status.Active;\\n        bool isAllowed = isOperationAllowed(status, allowedStatuses);\\n        if (!isAllowed) {\\n            revert OperationNotAllowed();\\n        }\\n\\n        // Refund out tokens to creator\\n        safeTokenTransfer(streamTokens.outSupplyToken, creator, streamState.outSupply);\\n\\n        // Update status\\n        status = IStreamTypes.Status.Cancelled;\\n        saveStreamStatus(status);\\n\\n        emit StreamCancelled(address(this), creator, streamState.outSupply, status);\\n    }\\n\\n    /**\\n     * @dev Checks if an address is a valid ERC20 token\\n     * @param tokenAddress The token address to validate\\n     * @param testAccount The account to use for testing the token interface\\n     * @return isValid True if the address implements the ERC20 interface\\n     */\\n    function isValidERC20(address tokenAddress, address testAccount) internal view returns (bool isValid) {\\n        if (tokenAddress == address(0)) {\\n            return false;\\n        }\\n\\n        try IERC20(tokenAddress).balanceOf(testAccount) returns (uint256) {\\n            return true;\\n        } catch {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Checks if an account has sufficient token balance\\n     * @param tokenAddress The ERC20 token address\\n     * @param account The account to check balance for\\n     * @param requiredAmount The minimum required balance\\n     * @return hasEnoughBalance True if the account has sufficient balance\\n     */\\n    function hasEnoughBalance(\\n        address tokenAddress,\\n        address account,\\n        uint256 requiredAmount\\n    ) internal view returns (bool) {\\n        IERC20 token = IERC20(tokenAddress);\\n        uint256 balance = token.balanceOf(account);\\n        return balance >= requiredAmount;\\n    }\\n\\n    // Load helpers\\n    function loadStream() internal view returns (IStreamTypes.StreamState memory) {\\n        return streamState;\\n    }\\n\\n    function loadStreamStatus() internal view returns (IStreamTypes.Status) {\\n        return streamStatus;\\n    }\\n\\n    function loadPosition(address user) internal view returns (PositionTypes.Position memory) {\\n        return positionStorage.getPosition(user);\\n    }\\n\\n    function loadStreamTimes() internal view returns (IStreamTypes.StreamTimes memory) {\\n        return streamTimes;\\n    }\\n\\n    // Save helpers\\n    function saveStream(IStreamTypes.StreamState memory state) internal {\\n        streamState = state;\\n    }\\n\\n    function saveStreamStatus(IStreamTypes.Status status) internal {\\n        streamStatus = status;\\n    }\\n\\n    function savePosition(address user, PositionTypes.Position memory position) internal {\\n        positionStorage.updatePosition(user, position);\\n    }\\n\\n    // Refactored syncStream to work directly with a provided memory object\\n    function syncStream(IStreamTypes.StreamState memory state) internal view returns (IStreamTypes.StreamState memory) {\\n        IStreamTypes.StreamTimes memory times = loadStreamTimes();\\n\\n        Decimal memory diff = StreamMathLib.calculateDiff(\\n            block.timestamp,\\n            times.streamStartTime,\\n            times.streamEndTime,\\n            state.lastUpdated\\n        );\\n\\n        if (diff.value > 0) {\\n            state = StreamMathLib.calculateUpdatedState(state, diff);\\n            state.lastUpdated = block.timestamp;\\n        }\\n\\n        return state;\\n    }\\n\\n    // Refactored syncStreamStatus to work directly with a provided memory object\\n    function syncStreamStatus(\\n        IStreamTypes.Status status,\\n        IStreamTypes.StreamTimes memory times,\\n        uint256 nowTime\\n    ) internal pure returns (IStreamTypes.Status) {\\n        status = StreamMathLib.calculateStreamStatus(\\n            status,\\n            nowTime,\\n            times.bootstrappingStartTime,\\n            times.streamStartTime,\\n            times.streamEndTime\\n        );\\n\\n        return status;\\n    }\\n\\n    /**\\n     * @dev Ensure value is non-zero\\n     * @param value The value to check\\n     * @param errorMessage The error message to revert with\\n     */\\n    function assertNonZero(uint256 value, string memory errorMessage) internal pure {\\n        if (value == 0) revert(errorMessage);\\n    }\\n\\n    /**\\n     * @dev Ensure sender is the creator\\n     */\\n    function assertIsCreator() internal view {\\n        if (msg.sender != creator) revert Unauthorized();\\n    }\\n\\n    /**\\n     * @dev Ensure sender is the protocol admin\\n     */\\n    function assertIsProtocolAdmin() internal view {\\n        StreamFactory factoryContract = StreamFactory(factory);\\n        address protocolAdmin = factoryContract.getParams().protocolAdmin;\\n        if (msg.sender != protocolAdmin) revert Unauthorized();\\n    }\\n\\n    /**\\n     * @dev Ensure status matches expected value\\n     * @param status Current status to check\\n     * @param expectedStatus Status that is expected\\n     */\\n    function assertStatus(IStreamTypes.Status status, IStreamTypes.Status expectedStatus) internal pure {\\n        if (status != expectedStatus) revert OperationNotAllowed();\\n    }\\n\\n    /**\\n     * @dev Assert that the cap does not exceed balance\\n     * @param cap Amount to withdraw\\n     * @param balance Available balance\\n     */\\n    function assertWithinBalance(uint256 cap, uint256 balance) internal pure {\\n        if (cap > balance) revert WithdrawAmountExceedsBalance(cap);\\n    }\\n\\n    /**\\n     * @dev Get the current stream status\\n     * @return The current stream status\\n     */\\n    function getStreamStatus() external view returns (IStreamTypes.Status) {\\n        return streamStatus;\\n    }\\n\\n    /**\\n     * @dev Get the current stream state\\n     * @return The current stream state\\n     */\\n    function getStreamState() external view returns (IStreamTypes.StreamState memory) {\\n        return streamState;\\n    }\\n}\\n\",\"keccak256\":\"0xfaf9fd3fc8a19731c887a1b3bcb44d930a8251dd15f07c19f4fcb430d9c6d8f5\",\"license\":\"MIT\"},\"contracts/StreamErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\ninterface IStreamErrors {\\n    // Stream errors\\n    error InvalidBootstrappingStartTime();\\n    error InvalidStreamStartTime();\\n    error InvalidStreamEndTime();\\n    error StreamDurationTooShort();\\n    error BootstrappingDurationTooShort();\\n    error WaitingDurationTooShort();\\n    error InsufficientTokenPayment(uint256 requiredTokenAmount, uint256 tokenBalance);\\n    error InvalidOutSupplyToken();\\n    error InvalidInSupplyToken();\\n    error PaymentFailed();\\n    error OperationNotAllowed();\\n    error Unauthorized();\\n    error InvalidWithdrawAmount();\\n    error WithdrawAmountExceedsBalance(uint256 cap);\\n    error InsufficientOutAmount();\\n    error InvalidPosition();\\n    error InvalidExitCondition();\\n    // StreamFactory errors\\n    error ContractFrozen();\\n    error InvalidExitFeeRatio();\\n    error ZeroOutSupplyNotAllowed();\\n    error StreamInputTokenNotAccepted();\\n    error InvalidBootstrappingTime();\\n    error StreamStartMustBeAfterBootstrapping();\\n    error StreamEndMustBeAfterStart();\\n    error InvalidToSVersion();\\n    error InsufficientNativeToken();\\n    error FeeTransferFailed();\\n    error TokenTransferFailed();\\n    error StreamAddressPredictionFailed();\\n    error InvalidFeeCollector();\\n    error InvalidProtocolAdmin();\\n    error NotAdmin();\\n}\\n\",\"keccak256\":\"0x081aab1a8a41432f4eedde605bf5defa57e100c35076f2d39b7c3c452e01ed74\",\"license\":\"MIT\"},\"contracts/StreamEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"./StreamTypes.sol\\\";\\nimport \\\"./DecimalMath.sol\\\";\\n\\ninterface IStreamEvents {\\n    event StreamCreated(\\n        address indexed streamOutToken,\\n        address indexed streamInToken,\\n        address indexed streamFactoryAddress,\\n        uint256 streamOutAmount,\\n        uint256 bootstrappingStartTime,\\n        uint256 streamStartTime,\\n        uint256 streamEndTime,\\n        uint256 threshold,\\n        string streamName,\\n        string tosVersion,\\n        address streamAddress,\\n        uint16 streamId\\n    );\\n\\n    event StreamSynced(address indexed streamAddress, IStreamTypes.Status mainStatus, uint256 lastUpdated);\\n\\n    event Subscribed(\\n        address indexed streamAddress,\\n        address indexed subscriber,\\n        uint256 amountIn,\\n        uint256 newShares,\\n        uint256 totalSharesAfter,\\n        uint256 totalInSupplyAfter\\n    );\\n\\n    event StreamSynced(\\n        address indexed streamAddress,\\n        uint256 lastUpdated,\\n        uint8 newStatus,\\n        Decimal distIndex,\\n        uint256 outRemaining,\\n        uint256 inSupply,\\n        uint256 spentIn,\\n        Decimal currentStreamedPrice\\n    );\\n\\n    event Withdrawn(\\n        address indexed streamAddress,\\n        address indexed subscriber,\\n        uint256 remainingInBalance,\\n        uint256 remainingShares,\\n        uint256 totalInSupply,\\n        uint256 totalShares\\n    );\\n\\n    event Exited(\\n        address indexed streamAddress,\\n        address indexed subscriber,\\n        uint256 purchased,\\n        uint256 spentIn,\\n        uint256 exitTimestamp\\n    );\\n\\n    event StreamFinalized(\\n        address indexed streamAddress,\\n        address indexed creator,\\n        uint256 creatorRevenue,\\n        uint256 exitFeeAmount,\\n        IStreamTypes.Status status\\n    );\\n\\n    event ParamsUpdated(\\n        address indexed factory,\\n        uint256 streamCreationFee,\\n        uint256 exitFeeRatio,\\n        uint256 minWaitingDuration,\\n        uint256 minBootstrappingDuration,\\n        uint256 minStreamDuration,\\n        string tosVersion\\n    );\\n\\n    event FeeCollectorUpdated(address indexed factory, address newFeeCollector);\\n\\n    event ProtocolAdminUpdated(address indexed factory, address newProtocolAdmin);\\n\\n    event FrozenStateUpdated(address indexed factory, bool frozen);\\n\\n    event AcceptedTokensUpdated(address indexed factory, address[] tokensAdded, address[] tokensRemoved);\\n\\n    event StreamCancelled(\\n        address indexed streamAddress,\\n        address creator,\\n        uint256 outSupply,\\n        IStreamTypes.Status status\\n    );\\n}\\n\",\"keccak256\":\"0x5f68ab5ffb7ec0eb276f4f3e123456229f6000c0f81914a7c289876ca8f6db72\",\"license\":\"MIT\"},\"contracts/StreamFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"./Stream.sol\\\";\\nimport \\\"./StreamEvents.sol\\\";\\nimport \\\"./StreamErrors.sol\\\";\\n\\ncontract StreamFactory is IStreamEvents, IStreamErrors {\\n    struct Params {\\n        uint256 streamCreationFee; // Fixed fee to create a stream\\n        address streamCreationFeeToken; // Token used for creation fee,\\n        Decimal exitFeeRatio; // Fee ratio when exiting a stream\\n        uint256 minWaitingDuration; // Minimum waiting period\\n        uint256 minBootstrappingDuration; // Minimum bootstrapping period\\n        uint256 minStreamDuration; // Minimum duration for a stream\\n        address feeCollector; // Address where fees are collected\\n        address protocolAdmin; // Admin address for protocol\\n        string tosVersion; // Terms of service version\\n    }\\n\\n    mapping(address => bool) public acceptedInSupplyTokens;\\n\\n    address public constant NATIVE_TOKEN = address(0);\\n\\n    uint16 public currentStreamId;\\n\\n    Params public params;\\n    mapping(uint16 => address) public streamAddresses;\\n\\n    bool public frozen;\\n\\n    constructor(\\n        uint256 _streamCreationFee,\\n        address _streamCreationFeeToken,\\n        Decimal memory _exitFeeRatio,\\n        uint256 _minWaitingDuration,\\n        uint256 _minBootstrappingDuration,\\n        uint256 _minStreamDuration,\\n        address[] memory _acceptedInSupplyTokens,\\n        address _feeCollector,\\n        address _protocolAdmin,\\n        string memory _tosVersion\\n    ) {\\n        if (_feeCollector == address(0)) revert InvalidFeeCollector();\\n        if (_protocolAdmin == address(0)) revert InvalidProtocolAdmin();\\n\\n        // Check if exit fee ratio is between 0 and 1\\n        if (DecimalMath.gt(_exitFeeRatio, DecimalMath.fromNumber(1))) revert InvalidExitFeeRatio();\\n        params = Params({\\n            streamCreationFee: _streamCreationFee,\\n            streamCreationFeeToken: _streamCreationFeeToken,\\n            exitFeeRatio: _exitFeeRatio,\\n            minWaitingDuration: _minWaitingDuration,\\n            minBootstrappingDuration: _minBootstrappingDuration,\\n            minStreamDuration: _minStreamDuration,\\n            feeCollector: _feeCollector,\\n            protocolAdmin: _protocolAdmin,\\n            tosVersion: _tosVersion\\n        });\\n\\n        // Set accepted tokens\\n        for (uint i = 0; i < _acceptedInSupplyTokens.length; i++) {\\n            acceptedInSupplyTokens[_acceptedInSupplyTokens[i]] = true;\\n        }\\n        currentStreamId = 0;\\n    }\\n\\n    modifier onlyAdmin() {\\n        if (msg.sender != params.protocolAdmin) revert NotAdmin();\\n        _;\\n    }\\n\\n    function updateParams(\\n        uint256 _streamCreationFee,\\n        Decimal memory _exitFeeRatio,\\n        uint256 _minWaitingDuration,\\n        uint256 _minBootstrappingDuration,\\n        uint256 _minStreamDuration,\\n        string memory _tosVersion\\n    ) external onlyAdmin {\\n        params.streamCreationFee = _streamCreationFee;\\n        params.exitFeeRatio = _exitFeeRatio;\\n        params.minWaitingDuration = _minWaitingDuration;\\n        params.minBootstrappingDuration = _minBootstrappingDuration;\\n        params.minStreamDuration = _minStreamDuration;\\n        params.tosVersion = _tosVersion;\\n\\n        emit ParamsUpdated(\\n            address(this),\\n            _streamCreationFee,\\n            _exitFeeRatio.value,\\n            _minWaitingDuration,\\n            _minBootstrappingDuration,\\n            _minStreamDuration,\\n            _tosVersion\\n        );\\n    }\\n\\n    function updateFeeCollector(address _feeCollector) external onlyAdmin {\\n        if (_feeCollector == address(0)) revert InvalidFeeCollector();\\n        params.feeCollector = _feeCollector;\\n        emit FeeCollectorUpdated(address(this), _feeCollector);\\n    }\\n\\n    function updateProtocolAdmin(address _protocolAdmin) external onlyAdmin {\\n        if (_protocolAdmin == address(0)) revert InvalidProtocolAdmin();\\n        params.protocolAdmin = _protocolAdmin;\\n        emit ProtocolAdminUpdated(address(this), _protocolAdmin);\\n    }\\n\\n    function updateAcceptedTokens(\\n        address[] calldata tokens_to_add,\\n        address[] calldata tokens_to_remove\\n    ) external onlyAdmin {\\n        for (uint i = 0; i < tokens_to_add.length; i++) {\\n            acceptedInSupplyTokens[tokens_to_add[i]] = true;\\n        }\\n        for (uint i = 0; i < tokens_to_remove.length; i++) {\\n            acceptedInSupplyTokens[tokens_to_remove[i]] = false;\\n        }\\n        emit AcceptedTokensUpdated(address(this), tokens_to_add, tokens_to_remove);\\n    }\\n\\n    function createStream(\\n        uint256 _streamOutAmount,\\n        address _outSupplyToken,\\n        uint256 _bootstrappingStartTime,\\n        uint256 _streamStartTime,\\n        uint256 _streamEndTime,\\n        uint256 _threshold,\\n        string memory _name,\\n        address _inSupplyToken,\\n        string memory _tosVersion,\\n        bytes32 _salt\\n    ) external payable {\\n        // Check if contract is accepting new streams (not frozen)\\n        if (frozen) revert ContractFrozen();\\n\\n        // Validate input parameters\\n        if (_streamOutAmount == 0) revert ZeroOutSupplyNotAllowed();\\n        if (!acceptedInSupplyTokens[_inSupplyToken]) revert StreamInputTokenNotAccepted();\\n\\n        // Validate time parameters using validateStreamTimes\\n        validateStreamTimes(block.timestamp, _bootstrappingStartTime, _streamStartTime, _streamEndTime);\\n\\n        // Validate TOS version\\n        if (keccak256(abi.encodePacked(_tosVersion)) != keccak256(abi.encodePacked(params.tosVersion)))\\n            revert InvalidToSVersion();\\n\\n        // Load creation fee\\n        uint256 creationFee = params.streamCreationFee;\\n        if (creationFee > 0) {\\n            if (params.streamCreationFeeToken == address(0)) {\\n                // Native token\\n                if (msg.value < creationFee) revert InsufficientNativeToken();\\n                // Transfer fee to fee collector\\n                if (!payable(params.feeCollector).send(creationFee)) revert FeeTransferFailed();\\n            } else {\\n                // ERC20 token\\n                if (\\n                    !IERC20(params.streamCreationFeeToken).transferFrom(\\n                        msg.sender,\\n                        address(params.feeCollector),\\n                        creationFee\\n                    )\\n                ) revert TokenTransferFailed();\\n            }\\n        }\\n        // Predict stream address\\n        bytes32 bytecodeHash = keccak256(\\n            abi.encodePacked(\\n                type(Stream).creationCode,\\n                abi.encode(\\n                    _streamOutAmount,\\n                    _outSupplyToken,\\n                    _bootstrappingStartTime,\\n                    _streamStartTime,\\n                    _streamEndTime,\\n                    _threshold,\\n                    _name,\\n                    _inSupplyToken,\\n                    msg.sender\\n                )\\n            )\\n        );\\n\\n        address predictedAddress = predictAddress(address(this), _salt, bytecodeHash);\\n        // Transfer out denom to stream contract\\n        if (!IERC20(_outSupplyToken).transferFrom(msg.sender, predictedAddress, _streamOutAmount))\\n            revert TokenTransferFailed();\\n        // Deploy new stream contract with all parameters\\n        Stream newStream = new Stream{ salt: _salt }(\\n            _streamOutAmount,\\n            _outSupplyToken,\\n            _bootstrappingStartTime,\\n            _streamStartTime,\\n            _streamEndTime,\\n            _threshold,\\n            _name,\\n            _inSupplyToken,\\n            msg.sender\\n        );\\n\\n        if (address(newStream) != predictedAddress) revert StreamAddressPredictionFailed();\\n        streamAddresses[currentStreamId] = address(newStream);\\n\\n        emit StreamCreated(\\n            _outSupplyToken,\\n            _inSupplyToken,\\n            address(this),\\n            _streamOutAmount,\\n            _bootstrappingStartTime,\\n            _streamStartTime,\\n            _streamEndTime,\\n            _threshold,\\n            _name,\\n            _tosVersion,\\n            address(newStream),\\n            currentStreamId\\n        );\\n        currentStreamId++;\\n    }\\n\\n    function getStreams() external view returns (address[] memory) {\\n        address[] memory streams = new address[](currentStreamId);\\n        for (uint16 i = 0; i < currentStreamId; i++) {\\n            streams[i] = streamAddresses[i];\\n        }\\n        return streams;\\n    }\\n\\n    function getStream(uint16 _streamId) external view returns (address) {\\n        return streamAddresses[_streamId];\\n    }\\n\\n    function isStream(address _streamAddress) external view returns (bool) {\\n        for (uint16 i = 0; i < currentStreamId; i++) {\\n            if (streamAddresses[i] == _streamAddress) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function getParams() external view returns (Params memory) {\\n        return params;\\n    }\\n\\n    function isAcceptedInSupplyToken(address token) public view returns (bool) {\\n        return acceptedInSupplyTokens[token];\\n    }\\n\\n    function getAcceptedInSupplyTokens() external view returns (address[] memory) {\\n        address[] memory tokens = new address[](currentStreamId);\\n        for (uint16 i = 0; i < currentStreamId; i++) {\\n            if (acceptedInSupplyTokens[streamAddresses[i]]) {\\n                tokens[i] = streamAddresses[i];\\n            }\\n        }\\n        return tokens;\\n    }\\n\\n    function setFrozen(bool _frozen) external onlyAdmin {\\n        frozen = _frozen;\\n        emit FrozenStateUpdated(address(this), _frozen);\\n    }\\n\\n    function predictAddress(address creator, bytes32 _salt, bytes32 bytecodeHash) public pure returns (address) {\\n        return address(uint160(uint(keccak256(abi.encodePacked(bytes1(0xff), creator, _salt, bytecodeHash)))));\\n    }\\n\\n    function validateStreamTimes(\\n        uint256 nowTime,\\n        uint256 _bootstrappingStartTime,\\n        uint256 _startTime,\\n        uint256 _endTime\\n    ) internal view {\\n        if (nowTime > _bootstrappingStartTime) revert InvalidBootstrappingStartTime();\\n        if (_bootstrappingStartTime > _startTime) revert InvalidStreamStartTime();\\n        if (_startTime > _endTime) revert InvalidStreamEndTime();\\n        if (_endTime - _startTime < params.minStreamDuration) revert StreamDurationTooShort();\\n        if (_startTime - _bootstrappingStartTime < params.minBootstrappingDuration)\\n            revert BootstrappingDurationTooShort();\\n        if (_bootstrappingStartTime - nowTime < params.minWaitingDuration) revert WaitingDurationTooShort();\\n    }\\n}\\n\",\"keccak256\":\"0xc70a9b6e1b3141df82dc22b99604a79247e5af3c2b4ba957dc1b2bc6a8df0f5a\",\"license\":\"MIT\"},\"contracts/StreamMathLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./StreamTypes.sol\\\";\\nimport \\\"./DecimalMath.sol\\\";\\nimport \\\"./PositionTypes.sol\\\";\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\nlibrary StreamMathLib {\\n    /**\\n     * @dev Calculates the time difference ratio between current time and last updated time\\n     * @param currentTimestamp Current timestamp\\n     * @param streamStartTime Timestamp when the stream starts\\n     * @param streamEndTime Timestamp when the stream ends\\n     * @param lastUpdated Timestamp when the stream was last updated\\n     * @return The ratio of time elapsed since last update compared to total remaining time (scaled by 1e18)\\n     */\\n    function calculateDiff(\\n        uint256 currentTimestamp,\\n        uint256 streamStartTime,\\n        uint256 streamEndTime,\\n        uint256 lastUpdated\\n    ) internal pure returns (Decimal memory) {\\n        // If the stream is not started yet or already ended, return 0\\n        if (currentTimestamp < streamStartTime || lastUpdated >= streamEndTime) {\\n            return DecimalMath.fromNumber(0);\\n        }\\n\\n        // If lastUpdated is before start time, set it to start time\\n        uint256 effectiveLastUpdated = lastUpdated;\\n        if (effectiveLastUpdated < streamStartTime) {\\n            effectiveLastUpdated = streamStartTime;\\n        }\\n\\n        // If current time is past end time, use end time instead\\n        uint256 effectiveNow = currentTimestamp;\\n        if (effectiveNow > streamEndTime) {\\n            effectiveNow = streamEndTime;\\n        }\\n\\n        uint256 numerator = effectiveNow - effectiveLastUpdated;\\n        uint256 denominator = streamEndTime - effectiveLastUpdated;\\n\\n        if (denominator == 0 || numerator == 0) {\\n            return DecimalMath.fromNumber(0);\\n        }\\n        // Return ratio of time elapsed since last update compared to total remaining time\\n        return DecimalMath.fromRatio(numerator, denominator);\\n    }\\n\\n    /**\\n     * @dev Calculates the stream status based on the current state and timestamp\\n     * @param currentStatus Current status of the stream\\n     * @param currentTime Current timestamp to check against\\n     * @param bootstrappingStartTime Timestamp when bootstrapping phase starts\\n     * @param streamStartTime Timestamp when active streaming starts\\n     * @param streamEndTime Timestamp when streaming ends\\n     * @return IStreamTypes.Status The calculated stream status\\n     */\\n    function calculateStreamStatus(\\n        IStreamTypes.Status currentStatus,\\n        uint256 currentTime,\\n        uint256 bootstrappingStartTime,\\n        uint256 streamStartTime,\\n        uint256 streamEndTime\\n    ) internal pure returns (IStreamTypes.Status) {\\n        // Don't update if stream is in a final state\\n        if (\\n            currentStatus == IStreamTypes.Status.Cancelled ||\\n            currentStatus == IStreamTypes.Status.FinalizedRefunded ||\\n            currentStatus == IStreamTypes.Status.FinalizedStreamed\\n        ) {\\n            return currentStatus;\\n        }\\n\\n        // Update status based on current timestamp\\n        if (currentTime < bootstrappingStartTime) {\\n            return IStreamTypes.Status.Waiting;\\n        } else if (currentTime >= bootstrappingStartTime && currentTime < streamStartTime) {\\n            return IStreamTypes.Status.Bootstrapping;\\n        } else if (currentTime >= streamStartTime && currentTime < streamEndTime) {\\n            return IStreamTypes.Status.Active;\\n        } else if (currentTime >= streamEndTime) {\\n            return IStreamTypes.Status.Ended;\\n        }\\n\\n        // This should never be reached, but return current status as fallback\\n        return currentStatus;\\n    }\\n\\n    /**\\n     * @dev Calculates updated stream state based on time difference\\n     * @param state Current stream state\\n     * @param diff Time difference in seconds\\n     * @return Updated stream state\\n     */\\n    function calculateUpdatedState(\\n        IStreamTypes.StreamState memory state,\\n        Decimal memory diff\\n    ) internal pure returns (IStreamTypes.StreamState memory) {\\n        // Create a copy of the state to avoid modifying the input\\n        IStreamTypes.StreamState memory newState = state;\\n\\n        if (newState.shares > 0 && diff.value > 0) {\\n            // Calculate new distribution balance and spent in amount\\n            Decimal memory newDecimalDistributionBalance = DecimalMath.mul(\\n                DecimalMath.fromNumber(newState.outRemaining),\\n                diff\\n            );\\n            uint256 newDistributionBalance = DecimalMath.floor(newDecimalDistributionBalance);\\n\\n            Decimal memory newDecimalSpentIn = DecimalMath.mul(DecimalMath.fromNumber(newState.inSupply), diff);\\n            uint256 spentIn = DecimalMath.floor(newDecimalSpentIn);\\n\\n            // Update state variables\\n            newState.spentIn += spentIn;\\n            newState.inSupply -= spentIn;\\n\\n            if (newDistributionBalance > 0) {\\n                newState.outRemaining -= newDistributionBalance;\\n                // Update distribution index (shares are in base units, multiply by 1e18 for precision)\\n                newState.distIndex = DecimalMath.fromRatio(newDistributionBalance, newState.shares);\\n                // Update current streamed price\\n                newState.currentStreamedPrice = DecimalMath.fromRatio(spentIn, newDistributionBalance);\\n            }\\n        }\\n\\n        return newState;\\n    }\\n\\n    function computeSharesAmount(\\n        uint256 amountIn,\\n        bool roundUp,\\n        uint256 inSupply,\\n        uint256 totalShares\\n    ) internal pure returns (uint256) {\\n        if (totalShares == 0 || amountIn == 0) {\\n            return amountIn;\\n        }\\n\\n        uint256 totalSharesIn = totalShares * amountIn;\\n        if (roundUp) {\\n            return (totalSharesIn + inSupply - 1) / inSupply;\\n        } else {\\n            return totalSharesIn / inSupply;\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates the exit fee amount based on the spent in amount\\n     * @param spentInAmount Amount of tokens spent in the stream\\n     * @return exitFeeAmount The calculated fee amount\\n     * @return remainingAmount The remaining amount after fee deduction\\n     */\\n    function calculateExitFee(\\n        uint256 spentInAmount,\\n        Decimal memory exitFeeRatio\\n    ) internal pure returns (uint256 exitFeeAmount, uint256 remainingAmount) {\\n        Decimal memory decimalSpentIn = DecimalMath.fromNumber(spentInAmount);\\n\\n        // Calculate exit fee amount using DecimalMath\\n        Decimal memory decimalExitFeeAmount = DecimalMath.mul(decimalSpentIn, exitFeeRatio);\\n        exitFeeAmount = DecimalMath.floor(decimalExitFeeAmount);\\n        remainingAmount = spentInAmount - exitFeeAmount;\\n\\n        return (exitFeeAmount, remainingAmount);\\n    }\\n\\n    function syncPosition(\\n        PositionTypes.Position memory position,\\n        Decimal memory distIndex,\\n        uint256 totalShares,\\n        uint256 inSupply,\\n        uint256 nowTime\\n    ) internal pure returns (PositionTypes.Position memory) {\\n        // Create a new position in memory to store the updated values\\n        PositionTypes.Position memory updatedPosition = PositionTypes.Position({\\n            inBalance: position.inBalance,\\n            shares: position.shares,\\n            index: position.index,\\n            lastUpdateTime: position.lastUpdateTime,\\n            pendingReward: position.pendingReward,\\n            spentIn: position.spentIn,\\n            purchased: position.purchased,\\n            exitDate: position.exitDate\\n        });\\n\\n        // Calculate index difference for distributions since last update\\n        Decimal memory indexDiff = DecimalMath.sub(distIndex, updatedPosition.index);\\n        uint256 spent = 0;\\n        uint256 purchased = 0;\\n\\n        // Only process if there are shares in the stream\\n        if (totalShares > 0) {\\n            // Calculate purchased amount based on position shares and index difference\\n            Decimal memory positionSharesDecimal = DecimalMath.fromNumber(updatedPosition.shares);\\n            Decimal memory purchasedDecimal = DecimalMath.add(\\n                DecimalMath.mul(positionSharesDecimal, indexDiff),\\n                updatedPosition.pendingReward\\n            );\\n            (purchased, purchasedDecimal) = DecimalMath.toNumber(purchasedDecimal);\\n            updatedPosition.purchased += purchased;\\n            updatedPosition.pendingReward = purchasedDecimal;\\n\\n            // Calculate remaining balance based on current shares ratio\\n            uint256 inRemaining = (inSupply * updatedPosition.shares) / totalShares;\\n            // Calculate spent amount\\n            spent = updatedPosition.inBalance - inRemaining;\\n            updatedPosition.spentIn += spent;\\n            updatedPosition.inBalance = inRemaining;\\n        }\\n\\n        // Update position tracking\\n        updatedPosition.index = distIndex;\\n        updatedPosition.lastUpdateTime = nowTime;\\n\\n        return updatedPosition;\\n    }\\n}\\n\",\"keccak256\":\"0xbb909debdab845750258056f5e550f75ca2a14ce60730567dac1ec68ba1982b9\",\"license\":\"MIT\"},\"contracts/StreamTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"./DecimalMath.sol\\\";\\n\\ninterface IStreamTypes {\\n    enum Status {\\n        Waiting,\\n        Bootstrapping,\\n        Active,\\n        Ended,\\n        FinalizedRefunded,\\n        FinalizedStreamed,\\n        Cancelled\\n    }\\n\\n    struct StreamTimes {\\n        uint256 bootstrappingStartTime;\\n        uint256 streamStartTime;\\n        uint256 streamEndTime;\\n    }\\n\\n    struct StreamMetadata {\\n        string name;\\n    }\\n\\n    struct StreamState {\\n        uint256 outRemaining;\\n        Decimal distIndex;\\n        uint256 spentIn;\\n        uint256 shares;\\n        Decimal currentStreamedPrice;\\n        uint256 threshold;\\n        uint256 inSupply;\\n        uint256 outSupply;\\n        uint256 lastUpdated;\\n    }\\n\\n    struct StreamTokens {\\n        address inSupplyToken;\\n        address outSupplyToken;\\n    }\\n}\\n\",\"keccak256\":\"0x012bb4e802f777aa477f6078031d1ac46241c242dcdd7b875feccd69441ffc33\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nlibrary console {\\n    address constant CONSOLE_ADDRESS =\\n        0x000000000000000000636F6e736F6c652e6c6f67;\\n\\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            pop(\\n                staticcall(\\n                    gas(),\\n                    consoleAddress,\\n                    add(payload, 32),\\n                    mload(payload),\\n                    0,\\n                    0\\n                )\\n            )\\n        }\\n    }\\n\\n    function _castToPure(\\n      function(bytes memory) internal view fnIn\\n    ) internal pure returns (function(bytes memory) pure fnOut) {\\n        assembly {\\n            fnOut := fnIn\\n        }\\n    }\\n\\n    function _sendLogPayload(bytes memory payload) internal pure {\\n        _castToPure(_sendLogPayloadImplementation)(payload);\\n    }\\n\\n    function log() internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n    }\\n\\n    function logInt(int256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n    }\\n\\n    function logUint(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function logString(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function logBool(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function logAddress(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n    }\\n\\n    function log(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function log(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function log(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function log(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function log(uint256 p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n}\\n\",\"keccak256\":\"0xf2560b5386574153057104d19a9e68a32ee912cf23c0c8df1fe9a0607f42d543\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234620004e457620045d9803803806200001d8162000527565b92833981818101036101408112620004e4578251906020620000418186016200054d565b91603f190112620004e4576200005662000507565b9260408501518452606085015192608086015160a08701519060c088015160018060401b038111620004e457880196848901601f89011215620004e4578751976001600160401b0389116200047f578860051b6020620000b881830162000527565b809b81520190878c0160208285010111620004e4579060208301915b6020818501018310620004e95750505050620000f360e08a016200054d565b93620001036101008b016200054d565b6101208b01519a9096906001600160401b038c11620004e457818101601f8d8301011215620004e457808c01519b6001600160401b038d116200047f578c9262000157601f8501601f191660200162000527565b9d8e528201602084838501010111620004e45760005b8d848210620004cb5760009401602001939093525050506001600160a01b03851615620004b9576001600160a01b03861615620004a7576000620001b062000507565b52620f424080620001c062000507565b5282511162000495576040519661012088016001600160401b038111898210176200047f5760409081528289526001600160a01b0391821660208a01819052908901849052606089018a90526080890185905260a0890186905295811660c08901819052961660e088018190526101009097018a9052600255600380546001600160a01b031990811690951790555160049081556005969096556006556007556008805482169092179091556009805490911690911790558251916001600160401b0383116200046a57600a54926001938481811c911680156200045f575b60208210146200044a57601f8111620003ee575b506020601f82116001146200037657819085966000926200036a575b5050600019600383901b1c191690841b17600a555b6000935b62000307575b825461ffff191683556040516140569081620005638239f35b8051841015620003645760018060a01b0360208560051b8301015116600052600060205260406000208360ff1982541617905560001984146200034f578280940193620002e8565b601182634e487b7160e01b6000525260246000fd5b620002ee565b015190503880620002cf565b600a6000908152600080516020620045b98339815191529690601f198416905b818110620003d75750918697918488959410620003bd575b505050811b01600a55620002e4565b015160001960f88460031b161c19169055388080620003ae565b838301518955978701976020938401930162000396565b600a600052600080516020620045b9833981519152601f830160051c810191602084106200043f575b601f0160051c019085905b82811062000432575050620002b3565b6000815501859062000422565b909150819062000417565b602284634e487b7160e01b6000525260246000fd5b90607f16906200029f565b604182634e487b7160e01b6000525260246000fd5b634e487b7160e01b600052604160045260246000fd5b604051632aa4e67b60e01b8152600490fd5b604051632bf75bc360e21b8152600490fd5b60405163bb0bac9960e01b8152600490fd5b906020918282818187890101015192010152016200016d565b600080fd5b6020808093620004f9866200054d565b8152019301929150620000d4565b60405190602082016001600160401b038111838210176200047f57604052565b6040519190601f01601f191682016001600160401b038111838210176200047f57604052565b51906001600160a01b0382168203620004e45756fe60808060405260043610156200001457600080fd5b60003560e01c908163054f7d9c14620011745750806314d98de514620011505780631c2a28f71462000ff257806331f7d964146200113257806333907d1e146200107857806342d6b34b14620010355780635a91b3b21462000ff25780635e615a6b1462000e9e578063774ef43b14620001045780637c526bb31462000d4e5780637e932d321462000cdd578063a0f3a6a81462000aa4578063bfb792241462000a71578063c1d3be8b14620009e3578063cff0ab961462000944578063d04fed6314620008b4578063d2c35ce81462000813578063dce27b6a146200014c5763e899f3d7146200010457600080fd5b3462000147576020366003190112620001475760043561ffff81168091036200014757600052600b602052602060018060a01b0360406000205416604051908152f35b600080fd5b61014036600319011262000147576024356001600160a01b0381169003620001475760c43567ffffffffffffffff8111620001475762000191903690600401620012d1565b60e4356001600160a01b038116900362000147576101043567ffffffffffffffff81116200014757620001c9903690600401620012d1565b60ff600c5416620008015760043515620007ef5760e4356001600160a01b031660009081526020819052604090205460ff1615620007dd576044354211620007cb5760643560443511620007b95760843560643511620007a757620002336064356084356200168e565b6007541162000795576200024c6044356064356200168e565b60065411620007835762000263426044356200168e565b60055411620007715760405160208101906200029a60208285516200028c8187858a01620011f3565b8101038084520182620012ae565b519020604051600a54816000620002b1836200132d565b926001811690811562000751575060011462000700575b620002dd925003601f198101835282620012ae565b6020815191012003620006ee5760025480620005ee575b50620003ac6040516200030d60206129640182620012ae565b61296481526129646200169d60208301396040516200035a816200034b3360e4358960a43560843560643560443560243560043560208b01620014ef565b03601f198101835282620012ae565b6200039e60206040518093826200037b8184019788815193849201620011f3565b82016200039182518093868085019101620011f3565b01038084520182620012ae565b519020610124353062001630565b6040516323b872dd60e01b8152336004808301919091526001600160a01b03831660248301523560448201526020818060648101038160006024356001600160a01b03165af19081156200058457600091620005b8575b5015620005a6576040518061296481011067ffffffffffffffff6129648301111762000590576129646200169d82396101243590806200045e3360e4358860a4356084356064356044356024356004356129648b01620014ef565b03906000f590811562000584576001600160a01b0390811690821603620005725761ffff9162000563918360015416600052600b602052604060002060018060a01b0382166001600160601b0360a01b825416179055600154946200050e85871693620004ff60405193600435855260443560208601526064356040860152608435606086015260a43560808601526101208060a087015285019062001218565b9083820360c085015262001218565b6001600160a01b0392831660e08301526101008201849052309260e435811692602435909116917fd82fd25f2c186bf678ec89d69b74509fb3d3043ede4957173642a7e407e23219919081900390a462001546565b61ffff19909216911617600155005b604051636d80044f60e01b8152600490fd5b6040513d6000823e3d90fd5b634e487b7160e01b600052604160045260246000fd5b60405163022e258160e11b8152600490fd5b620005df915060203d602011620005e6575b620005d68183620012ae565b810190620014d5565b8462000403565b503d620005ca565b6003546001600160a01b03168062000664575080341062000652576008546000918291829182916001600160a01b031682821562000648575bf11562000636575b82620002f4565b604051634033e4e360e01b8152600490fd5b506108fc62000627565b6040516332201f6960e11b8152600490fd5b6008546040516323b872dd60e01b81523360048201526001600160a01b0390911660248201526044810192909252602090829060649082906000905af19081156200058457600091620006ca575b506200062f5760405163022e258160e11b8152600490fd5b620006e7915060203d602011620005e657620005d68183620012ae565b83620006b2565b604051635d0b6cc760e01b8152600490fd5b5050600a60005281600080516020620040018339815191526000905b838210620007365750506020620002dd92820101620002c8565b6020919250806001915483858801015201910183916200071c565b60209250620002dd94915060ff19168284015280151502820101620002c8565b604051635bdfbd0360e11b8152600490fd5b6040516372904fb160e01b8152600490fd5b6040516318861b4960e01b8152600490fd5b6040516349f8456b60e11b8152600490fd5b604051633060050d60e21b8152600490fd5b6040516341f01d5760e01b8152600490fd5b60405163cc3ca47b60e01b8152600490fd5b604051634d5bb2d560e11b8152600490fd5b604051634051e96160e01b8152600490fd5b346200014757602036600319011262000147576200083062001196565b6009546001600160a01b03919082163303620008a2571680156200089057806001600160601b0360a01b60085416176008556040519081527f5d16ad41baeb009cd23eb8f6c7cde5c2e0cd5acf4a33926ab488875c37c37f3860203092a2005b60405163bb0bac9960e01b8152600490fd5b604051637bfa4b9f60e01b8152600490fd5b3462000147576000366003190112620001475761ffff600181815416620008db8162001573565b926000835b620008fa575b60405180620008f68782620011ad565b0390f35b818116838110156200093d5790816200093692600052600b6020526200092f60018060a01b03604060002054169188620015ab565b5262001546565b83620008e0565b50620008e6565b346200014757600036600319011262000147576002546003546040516001600160a01b039182169291620008f691906200097e8262001291565b600454825260055490600654600754908260085416926009541693620009a36200136a565b95604051998a998a5260208a01525160408901526060880152608087015260a086015260c085015260e08401526101208061010085015283019062001218565b3462000147576020366003190112620001475762000a0062001196565b600954906001600160a01b03908183163303620008a2571690811562000a5f576001600160a01b031916811760095560405190815230907f96c81c3f4599d5ad4b4ce465555174670819d69aa61f97cf8fdf4b80c1fbb32590602090a2005b604051632bf75bc360e21b8152600490fd5b34620001475760203660031901126200014757602062000a9a62000a9462001196565b620015c0565b6040519015158152f35b34620001475760c0366003190112620001475760206004353660231901821362000147576040519062000ad78262001291565b60243582526044356064356084359160a4359567ffffffffffffffff96878111620001475762000b0c903690600401620012d1565b6009549096906001600160a01b03163303620008a2578560025580516004558260055583600655846007558651978811620005905762000b4e600a546200132d565b601f811162000c85575b5081601f891160011462000bed5797807f0411b059ef29e41429d7aa233c3c43e82806856b23c24bfb1f9e4c6efa5689a1989960009162000be1575b508160011b916000199060031b1c191617600a555b519060405195865285015260408401526060830152608082015260c060a08201528062000bdc309460c083019062001218565b0390a2005b90508901518a62000b94565b601f19891690600a600052600080516020620040018339815191529160005b81811062000c6d5750918a917f0411b059ef29e41429d7aa233c3c43e82806856b23c24bfb1f9e4c6efa5689a19a9b6001941062000c53575b5050811b01600a5562000ba9565b8b015160001960f88460031b161c191690558a8062000c45565b91928560018192868e01518155019401920162000c0c565b600a60005260008051602062004001833981519152601f8a0160051c810191848b1062000cd2575b601f0160051c01905b81811062000cc5575062000b58565b6000815560010162000cb6565b909150819062000cad565b3462000147576020366003190112620001475760043580151580910362000147576009546001600160a01b03163303620008a25760ff19600c541660ff821617600c556040519081527fc08a1a38ceb2f9f45e15007131834153026896150e4400ab4000fd1b131fb1db60203092a2005b3462000147576040366003190112620001475767ffffffffffffffff600435818111620001475762000d859036906004016200123f565b91602435908111620001475762000da19036906004016200123f565b6009549193916001600160a01b039081163303620008a25760005b83811062000e62575060005b82811062000e2357857f640a0a596c3bc7f91bc26965ed05efb8d3017a25c7b1822ba2ca3e33b2743cd5868662000bdc8762000e1260405194859460408652604086019162001485565b908382036020850152309662001485565b808262000e4062000e3a62000e5c94878b62001449565b62001470565b166000526000602052604060002060ff19815416905562001423565b62000dc8565b808262000e7962000e3a62000e9894888a62001449565b1660005260006020526040600020600160ff1982541617905562001423565b62000dbc565b3462000147576000366003190112620001475760405162000ebf8162001273565b600081526000602082015260405162000ed88162001291565b6000815260408201526000606082015260006080820152600060a0820152600060c0820152600060e08201526060610100809201526020620008f6604051809362000f238262001273565b60025482526003546001600160a01b03908116858401908152604051829062000f4c8162001291565b60045481526040860190815260055460608701908152600654608088019081526007549160a0890192835284600854169360c08a019485528580600954169760e08c019889528a62000f9d6200136a565b9c019b8c526040519e8f9e8f9181835251910152511660408d0152515160608c01525160808b01525160a08a01525160c0890152511660e0870152511690840152516101208084015261014083019062001218565b346200014757602036600319011262000147576001600160a01b036200101762001196565b166000526000602052602060ff604060002054166040519015158152f35b346200014757606036600319011262000147576020620010666200105862001196565b604435906024359062001630565b6040516001600160a01b039091168152f35b3462000147576000366003190112620001475761ffff6001818154166200109f8162001573565b926000835b620010b95760405180620008f68782620011ad565b818116838110156200093d5790816200110792600052600b60209080825260018060a01b039081604060002054166000526000835260ff604060002054166200110e575b5050505062001546565b83620010a4565b62001127928460005252604060002054169188620015ab565b5286808080620010fd565b34620001475760003660031901126200014757602060405160008152f35b34620001475760003660031901126200014757602061ffff60015416604051908152f35b3462000147576000366003190112620001475760209060ff600c541615158152f35b600435906001600160a01b03821682036200014757565b6020908160408183019282815285518094520193019160005b828110620011d5575050505090565b83516001600160a01b031685529381019392810192600101620011c6565b60005b838110620012075750506000910152565b8181015183820152602001620011f6565b906020916200123381518092818552858086019101620011f3565b601f01601f1916010190565b9181601f84011215620001475782359167ffffffffffffffff831162000147576020808501948460051b0101116200014757565b610120810190811067ffffffffffffffff8211176200059057604052565b6020810190811067ffffffffffffffff8211176200059057604052565b90601f8019910116810190811067ffffffffffffffff8211176200059057604052565b81601f82011215620001475780359067ffffffffffffffff82116200059057604051926200130a601f8401601f191660200185620012ae565b828452602083830101116200014757816000926020809301838601378301015290565b90600182811c921680156200135f575b60208310146200134957565b634e487b7160e01b600052602260045260246000fd5b91607f16916200133d565b60405190600082600a549162001380836200132d565b80835292600190818116908115620013ff5750600114620013ad575b50620013ab92500383620012ae565b565b600a60009081529150600080516020620040018339815191525b848310620013e35750620013ab9350508101602001386200139c565b81935090816020925483858a01015201910190918592620013c7565b905060209250620013ab94915060ff191682840152151560051b820101386200139c565b6000198114620014335760010190565b634e487b7160e01b600052601160045260246000fd5b91908110156200145a5760051b0190565b634e487b7160e01b600052603260045260246000fd5b356001600160a01b0381168103620001475790565b9190808252602080920192916000805b838210620014a557505050505090565b9091929394853560018060a01b038116809103620014d157815283019483019392916001019062001495565b8280fd5b908160209103126200014757518015158103620001475790565b97999894610100979294620015399497928a5260018060a01b03978880971660208c015260408b015260608a0152608089015260a08801526101208060c089015287019062001218565b961660e085015216910152565b61ffff809116908114620014335760010190565b67ffffffffffffffff8111620005905760051b60200190565b906200157f826200155a565b6200158e6040519182620012ae565b8281528092620015a1601f19916200155a565b0190602036910137565b80518210156200145a5760209160051b010190565b600061ffff916001838194825416915b620015e0575b5050505050600090565b808416938285101562001629578594600052600b60205260018060a01b0380604060002054169085161462001621576200161a9062001546565b93620015d0565b505050505090565b50620015d6565b909160405192602084019260ff60f81b84526001600160601b03199060601b16602185015260358401526055830152605582526080820182811067ffffffffffffffff8211176200059057604052905190206001600160a01b031690565b91908203918211620014335756fe608080604052346200057d576200296480380380916200002082856200059e565b8339810190610120818303126200057d578051906200004260208201620005c2565b60408201519060608301519260808101519460a082015160c083015160018060401b0381116200057d57830188601f820112156200057d578051906001600160401b038211620003ce5760405199620000a6601f8401601f19166020018c6200059e565b828b52602083830101116200057d5760005b8281106200056857505060206000918a010152620000e8610100620000e060e08601620005c2565b9401620005c2565b620000f43386620005d7565b1562000556576040516370a0823160e01b81523060048201526020816024816001600160a01b038a165afa8015620004e857849160009162000518575b50106200050657620001443385620005d7565b15620004f457600080546001600160a01b0319166001600160a01b03929092169190911790556040516001600160401b03610594820190811190821117620003ce57610594620023d0823980610594810103906000f08015620004e857601480546001600160a01b03929092166001600160a01b0319928316811790915560018054909216179055604051600090620001dd8162000582565b52604051620001ec8162000582565b600081526000604051620002008162000582565b5260405190620002108262000582565b600082526040516001600160401b03610120820190811190821117620003ce57610120810160405284815281602082015260006040820152600060608201528260808201528360a0820152600060c08201528460e082015261010042910152836003555160045560006005556000600655516007556008556000600955600a5542600b556040519081604081011060018060401b03604084011117620003ce57604082810181526001600160a01b03918216808452939091166020909201829052600c80546001600160a01b03199081169094179055600d8054909316909117909155518490620003018162000582565b5283516001600160401b038111620003ce57600e54600181811c91168015620004dd575b6020821014620004c757601f81116200045d575b50602094601f8211600114620003f057948192939495600092620003e4575b50508160011b916000199060031b1c191617600e555b600f805460ff19169055604051606081016001600160401b03811182821017620003ce578491604091825283815284602082015201526010556011556012553360018060a01b03196013541617601355604051611d7490816200065c8239f35b634e487b7160e01b600052604160045260246000fd5b01519050388062000358565b601f19821695600e60005260206000209160005b88811062000444575083600195969798106200042a575b505050811b01600e556200036e565b015160001960f88460031b161c191690553880806200041b565b9192602060018192868501518155019401920162000404565b600e6000527fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fd601f830160051c81019160208410620004bc575b601f0160051c01905b818110620004af575062000339565b60008155600101620004a0565b909150819062000497565b634e487b7160e01b600052602260045260246000fd5b90607f169062000325565b6040513d6000823e3d90fd5b604051632181b39760e01b8152600490fd5b6040516357084d7360e11b8152600490fd5b91506020823d6020116200054d575b8162000536602093836200059e565b810103126200054a57508390513862000131565b80fd5b3d915062000527565b6040516372146d6160e11b8152600490fd5b60208183018101518c830182015201620000b8565b600080fd5b602081019081106001600160401b03821117620003ce57604052565b601f909101601f19168101906001600160401b03821190821017620003ce57604052565b51906001600160a01b03821682036200057d57565b6001600160a01b03908116919082156200065357602460209260405194859384926370a0823160e01b84521660048301525afa908162000622575b506200061d57600090565b600190565b602090813d81116200064b575b6200063b81836200059e565b810103126200057d573862000612565b503d6200062f565b50505060009056fe608060408181526004918236101561001657600080fd5b60009260e0918435831c90816302d05d3f14610f855750806303905474146105eb57806306fdde0314610ec65780630bcc8eba14610d885780630e5634df14610c895780630f574ba7146109965780632ae4e9311461091e5780632e1a7d4d1461075857806334793e05146106765780638a03764f1461063f5780638cd4741514610615578063af5c3ac4146105eb578063c0ae398c1461056c578063c45a015514610542578063cbf0641514610437578063d08452c214610403578063e427d08c146103d5578063e9a9e144146102fe5763f69e8fba146100f757600080fd5b346102fa57836003193601126102fa5761010f6118e5565b61016760ff600f541661015761012f61012661173a565b928342916118cd565b86519061013b82611054565b60018252602036818401376003610151836110e1565b526111d3565b504290610162611588565b611198565b9161017b8360a06040820151910151111590565b156102d057506013548351635e615a6b60e01b8152916001600160a01b039186918491829085165afa9182156102c65761024a926102059187916102a4575b50858360c083015116910151906101ed620f42406101e489890151946101df8661132b565b611b46565b51048093611114565b918061028e575b505082600c54168388541690611241565b50600590835180610273575b50505b61021d816117c1565b61022683611778565b8454838501519351855194855260208501526001600160a01b031693830190610fa9565b7fa3a0e7ffdae6dc539d2da62b494aeb0cd57c75b7d2171eaa8abb70c430930c7360603092a380f35b8161028692600d54169088541690611241565b503880610211565b61029c9185600c5416611241565b5038806101f4565b6102c091503d8089833e6102b88183611070565b81019061148d565b386101ba565b84513d87823e3d90fd5b600d5485549184015161024a93926102f4926001600160a01b039182169116611241565b50610214565b8380fd5b509050346103d157826003193601126103d1576103196118e5565b61035561033460ff600f541661032d61173a565b42916118cd565b83519061034082611054565b600182526020368184013785610151836110e1565b156103c35750600660018060a01b0361037981600d541682865416600a5491611241565b508160ff19600f541617600f5583541691600a54815193845260208401528201527febb55ea32d517c9ec85f61357977ac73b84e65ebeaedb528ed791d7e25e30a2b60603092a280f35b9051637a851da960e11b8152fd5b8280fd5b505050346103ff57816003193601126103ff5760015490516001600160a01b039091168152602090f35b5080fd5b83853461043457806003193601126104345750600c54600d5482516001600160a01b03928316815291166020820152f35b80fd5b50919091346102fa57836003193601126102fa576104543361165c565b9061045e826112f0565b1561053457506104dd906104d861049661047e610479611588565b611881565b926020840151606085015160c0860151914293611be8565b946104b060ff600f541642906104aa61173a565b906118cd565b906104ce876104c88660a06040820151910151111590565b84611361565b42908701526117c1565b611778565b6104e782336117da565b60c082015160a09092015190519182526020820152426040820152339030907f299c12b8f38cbdaee7f1de7372c792c211524fb70ed38dbec091baa5c58f796d9080606081015b0390a380f35b825163673f032f60e11b8152fd5b505050346103ff57816003193601126103ff5760135490516001600160a01b039091168152602090f35b509091346102fa57836003193601126102fa5761012093506003549281519261059484610fff565b54835260055460065483516105a881610fff565b60075481526008549160095493600a5496600b549881519a8b525160208b0152890152606088015251608087015260a086015260c0850152830152610100820152f35b505050346103ff57816003193601126103ff5760209061061360ff600f541691518092610fa9565bf35b505050346103ff57816003193601126103ff5760145490516001600160a01b039091168152602090f35b83853461043457806003193601126104345750601054601154601254925191825260208201526040810191909152606090f35b0390f35b50929190346103d157826003193601126103d157610692611588565b6106c06106a96106a061173a565b92834291611198565b916106b383611778565b429060ff600f54166118cd565b906106ca826117c1565b610100810151936007831015610745577f335a3e7f39aaebd3c219ca4ebda42ee6bb0cbd2b660d4d71a0dac6f7c03d71099495965060208201519082519060c08401519260ff6080838701519601519683519a8b521660208a015251908801526060870152608086015260a08501525160c08401523092a280f35b634e487b7160e01b865260218752602486fd5b848285346103d157602090816003193601126102fa578235801561090e5761077f3361165c565b93610789856112f0565b1561053457845182116108f95750907ffabb9e7afa4ef595f60e1ae9041b2b311b4acb27aeaed4b11b6f2abf689af10a9161052e6108226107c861173a565b6108186107dc60ff600f54168342916118cd565b61081287516107ea81611038565b6002815288368c83013760026107ff826110e1565b52600161080b82611104565b52826111d3565b506117c1565b4290610162611588565b946108a1818701519361088e61084960608a019687519b60c08c019c8d9242935192611be8565b98895183146000146108d0578b858b01528b8a525b61088261086c848d51611114565b808d5261087c8951809287611ba2565b90611114565b87526104d88a336117da565b600c5433906001600160a01b0316611241565b508551950151955191519251948552602085019590955260408401526060830152339230929081906080820190565b848a016108e58c61087c835180925188611ba2565b90526108f2838b51611114565b8a5261085e565b91516318928cbf60e31b815291820152602490fd5b8151630db73cdf60e41b81528490fd5b5050346103d157826003193601126103d157610120925061093d611588565b90825192825184526020830151516020850152808301519084015260608201516060840152608082015151608084015260a082015160a084015260c082015160c084015280820151908301526101008091015190820152f35b509091602080600319360112610c85578235926109ec6109bd60ff600f541661032d61173a565b61081285516109cb81611038565b6002815286368783013760016109e0826110e1565b52600261080b82611104565b600c5483516370a0823160e01b815233838201526001600160a01b03909116908381602481855afa908115610c7b578891610c4a575b50858110610c2e575082879160648651809481936323b872dd60e01b835233888401523060248401528a60448401525af1908115610c24578791610bf7575b5015610be95750610a713361165c565b90610a7d610479611588565b918181015115600014610b7357509061052e7f1913e17d5784005a914657f9e879fcc261644776365f1d84aeb45afcb6da4864939287610ac760c085015160608601519089611b75565b9782850151828751610ad881610fff565b52865190610ae582610fff565b8382528a885195610af587610fcc565b8b87528601528785015242606085015260808401528160a08401528160c0840152820152915b610b4b60c0820191610b2e88845161130b565b83526104d86060820195610b438b885161130b565b8752336117da565b5191519251948552602085019590955260408401526060830152339230929081906080820190565b945061052e82610bc760c07f1913e17d5784005a914657f9e879fcc261644776365f1d84aeb45afcb6da4864969501805198610bb6606085019a8b51908b611b75565b998685015190519042935192611be8565b92610bd387855161130b565b84528301610be288825161130b565b9052610b1b565b82516307a4ced160e51b8152fd5b610c179150833d8511610c1d575b610c0f8183611070565b810190611224565b38610a61565b503d610c05565b84513d89823e3d90fd5b82604491878751926381ddee1b60e01b84528301526024820152fd5b90508381813d8311610c74575b610c618183611070565b81010312610c70575138610a22565b8780fd5b503d610c57565b85513d8a823e3d90fd5b8480fd5b848285346103d157826003193601126103d15780519183600e549060019082821c928281168015610d7e575b6020958686108214610d6b5750848852908115610d495750600114610cf0575b6106728686610ce6828b0383611070565b51918291826110b5565b929550600e83527fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fd5b828410610d36575050508261067294610ce6928201019486610cd5565b8054868501880152928601928101610d19565b60ff191687860152505050151560051b8301019250610ce68261067286610cd5565b634e487b7160e01b845260229052602483fd5b93607f1693610cb5565b50346102fa57836003193601126102fa576013548351635e615a6b60e01b81526001600160a01b03939091869083908590829088165afa8015610ebc5784928791610ea2575b500151163303610e9557610de960ff600f541661032d61173a565b8351906080820182811067ffffffffffffffff821117610e8257855260038252606036602084013785610e1b836110e1565b526001610e2783611104565b52815160021015610e6f5790610e4391600260608301526111d3565b15610e61575080610379600692600d541682865416600a5491611241565b8251637a851da960e11b8152fd5b634e487b7160e01b865260328352602486fd5b634e487b7160e01b875260418452602487fd5b82516282b42960e81b8152fd5b610eb691503d8089833e6102b88183611070565b38610dce565b85513d88823e3d90fd5b848285346103d157826003193601126103d157805191836002549060019082821c928281168015610f7b575b6020958686108214610d6b5750848852908115610d495750600114610f22576106728686610ce6828b0383611070565b929550600283527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace5b828410610f68575050508261067294610ce6928201019486610cd5565b8054868501880152928601928101610f4b565b93607f1693610ef2565b8590346103ff57816003193601126103ff5790546001600160a01b03168152602090f35b906007821015610fb65752565b634e487b7160e01b600052602160045260246000fd5b610100810190811067ffffffffffffffff821117610fe957604052565b634e487b7160e01b600052604160045260246000fd5b6020810190811067ffffffffffffffff821117610fe957604052565b610120810190811067ffffffffffffffff821117610fe957604052565b6060810190811067ffffffffffffffff821117610fe957604052565b6040810190811067ffffffffffffffff821117610fe957604052565b90601f8019910116810190811067ffffffffffffffff821117610fe957604052565b60005b8381106110a55750506000910152565b8181015183820152602001611095565b604091602082526110d58151809281602086015260208686019101611092565b601f01601f1916010190565b8051156110ee5760200190565b634e487b7160e01b600052603260045260246000fd5b8051600110156110ee5760400190565b9190820391821161112157565b634e487b7160e01b600052601160045260246000fd5b604051906111448261101b565b8161010060009182815260405161115a81610fff565b838152602082015282604082015282606082015260405161117a81610fff565b83815260808201528260a08201528260c08201528260e08201520152565b916111bd916111a5611137565b5060406020820151910151906101008501519261190a565b80516111c7575090565b6111d091611a92565b90565b91909160005b835181101561121c5760208160051b85010151600780821015610fb657831015610fb6578214611214576000198114611121576001016111d9565b506001925050565b506000925050565b9081602091031261123c5751801515810361123c5790565b600080fd5b919091811580156112df575b6112d75760446020926000604051958694859363a9059cbb60e01b855260018060a01b0380931660048601526024850152165af19081156112cb576000916112ad575b501561129b57600190565b6040516307a4ced160e51b8152600490fd5b6112c5915060203d8111610c1d57610c0f8183611070565b38611290565b6040513d6000823e3d90fd5b505050600190565b506001600160a01b0383161561124d565b602081015115159081611301575090565b60e0915001511590565b9190820180921161112157565b8181029291811591840414171561112157565b600060405161133981610fff565b52620f424090818102918183041490151715611121576040519061135c82610fff565b815290565b9060078210159081610fb65760038314918280611454575b8015611447575b6113fc5780610fb657600684149384156113ed575b5083156113cd575b5050506113b65760405163eee2192360e01b8152600490fd5b61088e8160a06113ca93519101519061130b565b50565b90919250610fb657816113e4575b5038808061139d565b905015386113db565b60041493506000905038611395565b50505050806113ca915180611428575b50600d5460c091909101519033906001600160a01b0316611241565b600c54611440919033906001600160a01b0316611241565b503861140c565b5050600060058414611380565b5081611379565b51906001600160a01b038216820361123c57565b919082602091031261123c5760405161148781610fff565b91518252565b906020808383031261123c57825167ffffffffffffffff9384821161123c5701906101208284031261123c57604051936114c68561101b565b825185526114d582840161145b565b828601526114e6846040850161146f565b6040860152606083015160608601526080830151608086015260a083015160a086015261151560c0840161145b565b60c086015261152660e0840161145b565b60e086015261010092838101519082821161123c570184601f8201121561123c578051918211610fe95760405194611567601f8401601f1916850187611070565b82865283838301011161123c57826115829386019101611092565b82015290565b611590611137565b5060405161159d8161101b565b60035481526040516115ae81610fff565b60045481526020820152600554604082015260065460608201526040516115d481610fff565b6007548152608082015260085460a082015260095460c0820152600a5460e0820152600b5461010082015290565b6040519061160f82610fcc565b8160e060009182815282602082015260405161162a81610fff565b838152604082015282606082015260405161164481610fff565b83815260808201528260a08201528260c08201520152565b611664611602565b506014546040516316c1973960e01b81526001600160a01b0392831660048201529161010091829184916024918391165afa9182156112cb576000926116a957505090565b9091823d8411611733575b6116be8184611070565b82019282840312610434575060e090611710604051936116dd85610fcc565b82518552602083015160208601526116f8816040850161146f565b6040860152606083015160608601526080830161146f565b608084015260a081015160a084015260c081015160c0840152015160e082015290565b503d6116b4565b60006040805161174981611038565b828152826020820152015260405161176081611038565b60105481526011546020820152601254604082015290565b80516003556020810151516004556040810151600555606081015160065560808101515160075560a081015160085560c081015160095560e0810151600a556101000151600b55565b6007811015610fb65760ff8019600f5416911617600f55565b6014546001600160a01b03908116803b1561123c57600092836101249260e060405197889687956360d6081360e11b8752166004860152805160248601526020810151604486015260408101515160648601526060810151608486015260808101515160a486015260a081015160c486015260c081015160e486015201516101048401525af180156112cb5761186d5750565b67ffffffffffffffff8111610fe957604052565b611889611137565b5061189261173a565b6118af60406020830151920151916101009283850151914261190a565b80516118ba57505090565b6118c49192611a92565b90429082015290565b906111d0928151906040602084015193015193611a19565b6000546001600160a01b031633036118f957565b6040516282b42960e81b8152600490fd5b92909192600060405161191c81610fff565b5282811080156119b4575b6119a2578261195093831061199a575b5081848211611992575b61194a91611114565b92611114565b8015801561198a575b611966576111d0916119de565b5050600060405161197681610fff565b5260405161198381610fff565b6000815290565b508115611959565b849150611941565b915038611937565b50505050600060405161197681610fff565b5083821015611927565b81156119c8570490565b634e487b7160e01b600052601260045260246000fd5b9060006040516119ed81610fff565b52620f42409182810292818404149015171561112157611a0c916119be565b6040519061135c82610fff565b92919092600781101580610fb65760068214908115611a85575b8115611a75575b50611a6d5750821015611a4f57505050600090565b811015611a5d575050600190565b1015611a6857600290565b600390565b935050505090565b9050610fb6576005811438611a3a565b5050600481146000611a33565b90611a9b611137565b5060608201908151151580611b3c575b611ab457505090565b620f42409081611ac8826101df875161132b565b510491611add60c08601926101df845161132b565b51049060408501611aef83825161130b565b9052611afc828251611114565b905281611b0a575b50505090565b611b25611b2f93611b1c848751611114565b865251836119de565b60208501526119de565b6080820152388080611b04565b5080511515611aab565b620f424091611b67916000604051611b5d81610fff565b5251905190611318565b046040519061135c82610fff565b9180158015611b9a575b611b95576111d092611b9091611318565b6119be565b505090565b508215611b7f565b909180158015611be0575b611bda57611bbf611bc4928492611318565b61130b565b600019810191908211611121576111d0916119be565b50905090565b508115611bad565b939291611bf3611602565b50845190602086015195604091828201519760608301519660808401519160a085015195611c7b60e060c08801519701519c82519d8e9a611c338c610fcc565b8b5260208b0194855260e0848c019b838d52606081019e8f526080810198895260a081019b8c5260c081019a8b52015260008351611c7081610fff565b528a51905190611114565b93815194611c8886610fff565b855285611c9d575b5050505050505050525290565b611d1796611d0d611cd2611cb8611b90986101df885161132b565b84519060008751611cc881610fff565b525190519061130b565b845190611cde82610fff565b815260008551611ced81610fff565b5251935193611cfb85610fff565b620f424090818106865204825161130b565b9052525190611318565b90611d2d611d26838951611114565b825161130b565b905285523880808080808080611c9056fea2646970667358221220c649a56d7c346544519c61aaadd27dbc638483af71c95083aecc299243c57a5f64736f6c6343000814003360a080604052346100375733608052610557908161003d82396080518181816080015281816101690152818161020e01526102dc0152f35b600080fdfe604060808152600436101561001357600080fd5b60009060e08235811c90816316c197391461030b5781635cb0175c146102c7578163a3de7d17146101d6578163c1ac1026146100bf575063fb33ce811461005957600080fd5b346100bb57806003193601126100bb5761007161042f565b6001600160a01b03906100a7337f00000000000000000000000000000000000000000000000000000000000000008416146104bd565b168252816020526007602435918320015580f35b5080fd5b919050346101d2576101203660031901126101d2576100dc61042f565b6101003660231901126101ce576100f161044a565b9260243584526020840192604435845261010a366104a1565b93818601948552606086016084358152602060a3193601126101ca57600795610131610481565b9260a43584526080890193845260a089019460c435865260c08a019660e43588528a019761010435895260018060a01b0390610190827f00000000000000000000000000000000000000000000000000000000000000001633146104bd565b168b528a6020528a209851895551600189015551516002880155516003870155515160048601555160058501555160068401555191015580f35b8780fd5b8380fd5b8280fd5b9050346101d25760803660031901126101d2576007906101f461042f565b906101fe366104a1565b936001600160a01b0390610235337f00000000000000000000000000000000000000000000000000000000000000008416146104bd565b8661023e610481565b52610247610481565b9087825261025361044a565b966024358852602088016044358152828901918252606089019242845260808a0194855260a08a01958b875260c08b01978c89528b01988c8a52168b528a6020528a209851895551600189015551516002880155516003870155515160048601555160058501555160068401555191015580f35b5050346100bb57816003193601126100bb57517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b9050346101d25760203660031901126101d257816101009361032b61042f565b818461033561044a565b828152826020820152610346610481565b8381528682015282606082015261035b610481565b838152608082015260a0810183905260c0810183905201526001600160a01b031681526020819052209161038d61044a565b9280548452600181015491602085019283526103a7610481565b90600283015482528086019182526003830154606087019081526103c9610481565b91600485015483526080880192835260058501549360a08901948552600760068701549660c08b01978852015496888a01978852825199518a525160208a0152515190880152516060870152515160808601525160a08501525160c08401525190820152f35b600435906001600160a01b038216820361044557565b600080fd5b60405190610100820182811067ffffffffffffffff82111761046b57604052565b634e487b7160e01b600052604160045260246000fd5b604051906020820182811067ffffffffffffffff82111761046b57604052565b6020906063190112610445576104b5610481565b906064358252565b156104c457565b60405162461bcd60e51b815260206004820152602f60248201527f506f736974696f6e2063616e206f6e6c7920626520736574206279207468652060448201526e1cdd1c99585b4818dbdb9d1c9858dd608a1b6064820152608490fdfea264697066735822122080d010f406cb7459200122a9dd9702352c31e0ccdb7cc6473685a5f1bac89d7864736f6c63430008140033c65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a8a26469706673582212201519c81387c4cf39e016525480eb245d6fe8dd5230c8a493d68ebb8ae0c3e07464736f6c63430008140033c65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a8",
  "deployedBytecode": "0x60808060405260043610156200001457600080fd5b60003560e01c908163054f7d9c14620011745750806314d98de514620011505780631c2a28f71462000ff257806331f7d964146200113257806333907d1e146200107857806342d6b34b14620010355780635a91b3b21462000ff25780635e615a6b1462000e9e578063774ef43b14620001045780637c526bb31462000d4e5780637e932d321462000cdd578063a0f3a6a81462000aa4578063bfb792241462000a71578063c1d3be8b14620009e3578063cff0ab961462000944578063d04fed6314620008b4578063d2c35ce81462000813578063dce27b6a146200014c5763e899f3d7146200010457600080fd5b3462000147576020366003190112620001475760043561ffff81168091036200014757600052600b602052602060018060a01b0360406000205416604051908152f35b600080fd5b61014036600319011262000147576024356001600160a01b0381169003620001475760c43567ffffffffffffffff8111620001475762000191903690600401620012d1565b60e4356001600160a01b038116900362000147576101043567ffffffffffffffff81116200014757620001c9903690600401620012d1565b60ff600c5416620008015760043515620007ef5760e4356001600160a01b031660009081526020819052604090205460ff1615620007dd576044354211620007cb5760643560443511620007b95760843560643511620007a757620002336064356084356200168e565b6007541162000795576200024c6044356064356200168e565b60065411620007835762000263426044356200168e565b60055411620007715760405160208101906200029a60208285516200028c8187858a01620011f3565b8101038084520182620012ae565b519020604051600a54816000620002b1836200132d565b926001811690811562000751575060011462000700575b620002dd925003601f198101835282620012ae565b6020815191012003620006ee5760025480620005ee575b50620003ac6040516200030d60206129640182620012ae565b61296481526129646200169d60208301396040516200035a816200034b3360e4358960a43560843560643560443560243560043560208b01620014ef565b03601f198101835282620012ae565b6200039e60206040518093826200037b8184019788815193849201620011f3565b82016200039182518093868085019101620011f3565b01038084520182620012ae565b519020610124353062001630565b6040516323b872dd60e01b8152336004808301919091526001600160a01b03831660248301523560448201526020818060648101038160006024356001600160a01b03165af19081156200058457600091620005b8575b5015620005a6576040518061296481011067ffffffffffffffff6129648301111762000590576129646200169d82396101243590806200045e3360e4358860a4356084356064356044356024356004356129648b01620014ef565b03906000f590811562000584576001600160a01b0390811690821603620005725761ffff9162000563918360015416600052600b602052604060002060018060a01b0382166001600160601b0360a01b825416179055600154946200050e85871693620004ff60405193600435855260443560208601526064356040860152608435606086015260a43560808601526101208060a087015285019062001218565b9083820360c085015262001218565b6001600160a01b0392831660e08301526101008201849052309260e435811692602435909116917fd82fd25f2c186bf678ec89d69b74509fb3d3043ede4957173642a7e407e23219919081900390a462001546565b61ffff19909216911617600155005b604051636d80044f60e01b8152600490fd5b6040513d6000823e3d90fd5b634e487b7160e01b600052604160045260246000fd5b60405163022e258160e11b8152600490fd5b620005df915060203d602011620005e6575b620005d68183620012ae565b810190620014d5565b8462000403565b503d620005ca565b6003546001600160a01b03168062000664575080341062000652576008546000918291829182916001600160a01b031682821562000648575bf11562000636575b82620002f4565b604051634033e4e360e01b8152600490fd5b506108fc62000627565b6040516332201f6960e11b8152600490fd5b6008546040516323b872dd60e01b81523360048201526001600160a01b0390911660248201526044810192909252602090829060649082906000905af19081156200058457600091620006ca575b506200062f5760405163022e258160e11b8152600490fd5b620006e7915060203d602011620005e657620005d68183620012ae565b83620006b2565b604051635d0b6cc760e01b8152600490fd5b5050600a60005281600080516020620040018339815191526000905b838210620007365750506020620002dd92820101620002c8565b6020919250806001915483858801015201910183916200071c565b60209250620002dd94915060ff19168284015280151502820101620002c8565b604051635bdfbd0360e11b8152600490fd5b6040516372904fb160e01b8152600490fd5b6040516318861b4960e01b8152600490fd5b6040516349f8456b60e11b8152600490fd5b604051633060050d60e21b8152600490fd5b6040516341f01d5760e01b8152600490fd5b60405163cc3ca47b60e01b8152600490fd5b604051634d5bb2d560e11b8152600490fd5b604051634051e96160e01b8152600490fd5b346200014757602036600319011262000147576200083062001196565b6009546001600160a01b03919082163303620008a2571680156200089057806001600160601b0360a01b60085416176008556040519081527f5d16ad41baeb009cd23eb8f6c7cde5c2e0cd5acf4a33926ab488875c37c37f3860203092a2005b60405163bb0bac9960e01b8152600490fd5b604051637bfa4b9f60e01b8152600490fd5b3462000147576000366003190112620001475761ffff600181815416620008db8162001573565b926000835b620008fa575b60405180620008f68782620011ad565b0390f35b818116838110156200093d5790816200093692600052600b6020526200092f60018060a01b03604060002054169188620015ab565b5262001546565b83620008e0565b50620008e6565b346200014757600036600319011262000147576002546003546040516001600160a01b039182169291620008f691906200097e8262001291565b600454825260055490600654600754908260085416926009541693620009a36200136a565b95604051998a998a5260208a01525160408901526060880152608087015260a086015260c085015260e08401526101208061010085015283019062001218565b3462000147576020366003190112620001475762000a0062001196565b600954906001600160a01b03908183163303620008a2571690811562000a5f576001600160a01b031916811760095560405190815230907f96c81c3f4599d5ad4b4ce465555174670819d69aa61f97cf8fdf4b80c1fbb32590602090a2005b604051632bf75bc360e21b8152600490fd5b34620001475760203660031901126200014757602062000a9a62000a9462001196565b620015c0565b6040519015158152f35b34620001475760c0366003190112620001475760206004353660231901821362000147576040519062000ad78262001291565b60243582526044356064356084359160a4359567ffffffffffffffff96878111620001475762000b0c903690600401620012d1565b6009549096906001600160a01b03163303620008a2578560025580516004558260055583600655846007558651978811620005905762000b4e600a546200132d565b601f811162000c85575b5081601f891160011462000bed5797807f0411b059ef29e41429d7aa233c3c43e82806856b23c24bfb1f9e4c6efa5689a1989960009162000be1575b508160011b916000199060031b1c191617600a555b519060405195865285015260408401526060830152608082015260c060a08201528062000bdc309460c083019062001218565b0390a2005b90508901518a62000b94565b601f19891690600a600052600080516020620040018339815191529160005b81811062000c6d5750918a917f0411b059ef29e41429d7aa233c3c43e82806856b23c24bfb1f9e4c6efa5689a19a9b6001941062000c53575b5050811b01600a5562000ba9565b8b015160001960f88460031b161c191690558a8062000c45565b91928560018192868e01518155019401920162000c0c565b600a60005260008051602062004001833981519152601f8a0160051c810191848b1062000cd2575b601f0160051c01905b81811062000cc5575062000b58565b6000815560010162000cb6565b909150819062000cad565b3462000147576020366003190112620001475760043580151580910362000147576009546001600160a01b03163303620008a25760ff19600c541660ff821617600c556040519081527fc08a1a38ceb2f9f45e15007131834153026896150e4400ab4000fd1b131fb1db60203092a2005b3462000147576040366003190112620001475767ffffffffffffffff600435818111620001475762000d859036906004016200123f565b91602435908111620001475762000da19036906004016200123f565b6009549193916001600160a01b039081163303620008a25760005b83811062000e62575060005b82811062000e2357857f640a0a596c3bc7f91bc26965ed05efb8d3017a25c7b1822ba2ca3e33b2743cd5868662000bdc8762000e1260405194859460408652604086019162001485565b908382036020850152309662001485565b808262000e4062000e3a62000e5c94878b62001449565b62001470565b166000526000602052604060002060ff19815416905562001423565b62000dc8565b808262000e7962000e3a62000e9894888a62001449565b1660005260006020526040600020600160ff1982541617905562001423565b62000dbc565b3462000147576000366003190112620001475760405162000ebf8162001273565b600081526000602082015260405162000ed88162001291565b6000815260408201526000606082015260006080820152600060a0820152600060c0820152600060e08201526060610100809201526020620008f6604051809362000f238262001273565b60025482526003546001600160a01b03908116858401908152604051829062000f4c8162001291565b60045481526040860190815260055460608701908152600654608088019081526007549160a0890192835284600854169360c08a019485528580600954169760e08c019889528a62000f9d6200136a565b9c019b8c526040519e8f9e8f9181835251910152511660408d0152515160608c01525160808b01525160a08a01525160c0890152511660e0870152511690840152516101208084015261014083019062001218565b346200014757602036600319011262000147576001600160a01b036200101762001196565b166000526000602052602060ff604060002054166040519015158152f35b346200014757606036600319011262000147576020620010666200105862001196565b604435906024359062001630565b6040516001600160a01b039091168152f35b3462000147576000366003190112620001475761ffff6001818154166200109f8162001573565b926000835b620010b95760405180620008f68782620011ad565b818116838110156200093d5790816200110792600052600b60209080825260018060a01b039081604060002054166000526000835260ff604060002054166200110e575b5050505062001546565b83620010a4565b62001127928460005252604060002054169188620015ab565b5286808080620010fd565b34620001475760003660031901126200014757602060405160008152f35b34620001475760003660031901126200014757602061ffff60015416604051908152f35b3462000147576000366003190112620001475760209060ff600c541615158152f35b600435906001600160a01b03821682036200014757565b6020908160408183019282815285518094520193019160005b828110620011d5575050505090565b83516001600160a01b031685529381019392810192600101620011c6565b60005b838110620012075750506000910152565b8181015183820152602001620011f6565b906020916200123381518092818552858086019101620011f3565b601f01601f1916010190565b9181601f84011215620001475782359167ffffffffffffffff831162000147576020808501948460051b0101116200014757565b610120810190811067ffffffffffffffff8211176200059057604052565b6020810190811067ffffffffffffffff8211176200059057604052565b90601f8019910116810190811067ffffffffffffffff8211176200059057604052565b81601f82011215620001475780359067ffffffffffffffff82116200059057604051926200130a601f8401601f191660200185620012ae565b828452602083830101116200014757816000926020809301838601378301015290565b90600182811c921680156200135f575b60208310146200134957565b634e487b7160e01b600052602260045260246000fd5b91607f16916200133d565b60405190600082600a549162001380836200132d565b80835292600190818116908115620013ff5750600114620013ad575b50620013ab92500383620012ae565b565b600a60009081529150600080516020620040018339815191525b848310620013e35750620013ab9350508101602001386200139c565b81935090816020925483858a01015201910190918592620013c7565b905060209250620013ab94915060ff191682840152151560051b820101386200139c565b6000198114620014335760010190565b634e487b7160e01b600052601160045260246000fd5b91908110156200145a5760051b0190565b634e487b7160e01b600052603260045260246000fd5b356001600160a01b0381168103620001475790565b9190808252602080920192916000805b838210620014a557505050505090565b9091929394853560018060a01b038116809103620014d157815283019483019392916001019062001495565b8280fd5b908160209103126200014757518015158103620001475790565b97999894610100979294620015399497928a5260018060a01b03978880971660208c015260408b015260608a0152608089015260a08801526101208060c089015287019062001218565b961660e085015216910152565b61ffff809116908114620014335760010190565b67ffffffffffffffff8111620005905760051b60200190565b906200157f826200155a565b6200158e6040519182620012ae565b8281528092620015a1601f19916200155a565b0190602036910137565b80518210156200145a5760209160051b010190565b600061ffff916001838194825416915b620015e0575b5050505050600090565b808416938285101562001629578594600052600b60205260018060a01b0380604060002054169085161462001621576200161a9062001546565b93620015d0565b505050505090565b50620015d6565b909160405192602084019260ff60f81b84526001600160601b03199060601b16602185015260358401526055830152605582526080820182811067ffffffffffffffff8211176200059057604052905190206001600160a01b031690565b91908203918211620014335756fe608080604052346200057d576200296480380380916200002082856200059e565b8339810190610120818303126200057d578051906200004260208201620005c2565b60408201519060608301519260808101519460a082015160c083015160018060401b0381116200057d57830188601f820112156200057d578051906001600160401b038211620003ce5760405199620000a6601f8401601f19166020018c6200059e565b828b52602083830101116200057d5760005b8281106200056857505060206000918a010152620000e8610100620000e060e08601620005c2565b9401620005c2565b620000f43386620005d7565b1562000556576040516370a0823160e01b81523060048201526020816024816001600160a01b038a165afa8015620004e857849160009162000518575b50106200050657620001443385620005d7565b15620004f457600080546001600160a01b0319166001600160a01b03929092169190911790556040516001600160401b03610594820190811190821117620003ce57610594620023d0823980610594810103906000f08015620004e857601480546001600160a01b03929092166001600160a01b0319928316811790915560018054909216179055604051600090620001dd8162000582565b52604051620001ec8162000582565b600081526000604051620002008162000582565b5260405190620002108262000582565b600082526040516001600160401b03610120820190811190821117620003ce57610120810160405284815281602082015260006040820152600060608201528260808201528360a0820152600060c08201528460e082015261010042910152836003555160045560006005556000600655516007556008556000600955600a5542600b556040519081604081011060018060401b03604084011117620003ce57604082810181526001600160a01b03918216808452939091166020909201829052600c80546001600160a01b03199081169094179055600d8054909316909117909155518490620003018162000582565b5283516001600160401b038111620003ce57600e54600181811c91168015620004dd575b6020821014620004c757601f81116200045d575b50602094601f8211600114620003f057948192939495600092620003e4575b50508160011b916000199060031b1c191617600e555b600f805460ff19169055604051606081016001600160401b03811182821017620003ce578491604091825283815284602082015201526010556011556012553360018060a01b03196013541617601355604051611d7490816200065c8239f35b634e487b7160e01b600052604160045260246000fd5b01519050388062000358565b601f19821695600e60005260206000209160005b88811062000444575083600195969798106200042a575b505050811b01600e556200036e565b015160001960f88460031b161c191690553880806200041b565b9192602060018192868501518155019401920162000404565b600e6000527fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fd601f830160051c81019160208410620004bc575b601f0160051c01905b818110620004af575062000339565b60008155600101620004a0565b909150819062000497565b634e487b7160e01b600052602260045260246000fd5b90607f169062000325565b6040513d6000823e3d90fd5b604051632181b39760e01b8152600490fd5b6040516357084d7360e11b8152600490fd5b91506020823d6020116200054d575b8162000536602093836200059e565b810103126200054a57508390513862000131565b80fd5b3d915062000527565b6040516372146d6160e11b8152600490fd5b60208183018101518c830182015201620000b8565b600080fd5b602081019081106001600160401b03821117620003ce57604052565b601f909101601f19168101906001600160401b03821190821017620003ce57604052565b51906001600160a01b03821682036200057d57565b6001600160a01b03908116919082156200065357602460209260405194859384926370a0823160e01b84521660048301525afa908162000622575b506200061d57600090565b600190565b602090813d81116200064b575b6200063b81836200059e565b810103126200057d573862000612565b503d6200062f565b50505060009056fe608060408181526004918236101561001657600080fd5b60009260e0918435831c90816302d05d3f14610f855750806303905474146105eb57806306fdde0314610ec65780630bcc8eba14610d885780630e5634df14610c895780630f574ba7146109965780632ae4e9311461091e5780632e1a7d4d1461075857806334793e05146106765780638a03764f1461063f5780638cd4741514610615578063af5c3ac4146105eb578063c0ae398c1461056c578063c45a015514610542578063cbf0641514610437578063d08452c214610403578063e427d08c146103d5578063e9a9e144146102fe5763f69e8fba146100f757600080fd5b346102fa57836003193601126102fa5761010f6118e5565b61016760ff600f541661015761012f61012661173a565b928342916118cd565b86519061013b82611054565b60018252602036818401376003610151836110e1565b526111d3565b504290610162611588565b611198565b9161017b8360a06040820151910151111590565b156102d057506013548351635e615a6b60e01b8152916001600160a01b039186918491829085165afa9182156102c65761024a926102059187916102a4575b50858360c083015116910151906101ed620f42406101e489890151946101df8661132b565b611b46565b51048093611114565b918061028e575b505082600c54168388541690611241565b50600590835180610273575b50505b61021d816117c1565b61022683611778565b8454838501519351855194855260208501526001600160a01b031693830190610fa9565b7fa3a0e7ffdae6dc539d2da62b494aeb0cd57c75b7d2171eaa8abb70c430930c7360603092a380f35b8161028692600d54169088541690611241565b503880610211565b61029c9185600c5416611241565b5038806101f4565b6102c091503d8089833e6102b88183611070565b81019061148d565b386101ba565b84513d87823e3d90fd5b600d5485549184015161024a93926102f4926001600160a01b039182169116611241565b50610214565b8380fd5b509050346103d157826003193601126103d1576103196118e5565b61035561033460ff600f541661032d61173a565b42916118cd565b83519061034082611054565b600182526020368184013785610151836110e1565b156103c35750600660018060a01b0361037981600d541682865416600a5491611241565b508160ff19600f541617600f5583541691600a54815193845260208401528201527febb55ea32d517c9ec85f61357977ac73b84e65ebeaedb528ed791d7e25e30a2b60603092a280f35b9051637a851da960e11b8152fd5b8280fd5b505050346103ff57816003193601126103ff5760015490516001600160a01b039091168152602090f35b5080fd5b83853461043457806003193601126104345750600c54600d5482516001600160a01b03928316815291166020820152f35b80fd5b50919091346102fa57836003193601126102fa576104543361165c565b9061045e826112f0565b1561053457506104dd906104d861049661047e610479611588565b611881565b926020840151606085015160c0860151914293611be8565b946104b060ff600f541642906104aa61173a565b906118cd565b906104ce876104c88660a06040820151910151111590565b84611361565b42908701526117c1565b611778565b6104e782336117da565b60c082015160a09092015190519182526020820152426040820152339030907f299c12b8f38cbdaee7f1de7372c792c211524fb70ed38dbec091baa5c58f796d9080606081015b0390a380f35b825163673f032f60e11b8152fd5b505050346103ff57816003193601126103ff5760135490516001600160a01b039091168152602090f35b509091346102fa57836003193601126102fa5761012093506003549281519261059484610fff565b54835260055460065483516105a881610fff565b60075481526008549160095493600a5496600b549881519a8b525160208b0152890152606088015251608087015260a086015260c0850152830152610100820152f35b505050346103ff57816003193601126103ff5760209061061360ff600f541691518092610fa9565bf35b505050346103ff57816003193601126103ff5760145490516001600160a01b039091168152602090f35b83853461043457806003193601126104345750601054601154601254925191825260208201526040810191909152606090f35b0390f35b50929190346103d157826003193601126103d157610692611588565b6106c06106a96106a061173a565b92834291611198565b916106b383611778565b429060ff600f54166118cd565b906106ca826117c1565b610100810151936007831015610745577f335a3e7f39aaebd3c219ca4ebda42ee6bb0cbd2b660d4d71a0dac6f7c03d71099495965060208201519082519060c08401519260ff6080838701519601519683519a8b521660208a015251908801526060870152608086015260a08501525160c08401523092a280f35b634e487b7160e01b865260218752602486fd5b848285346103d157602090816003193601126102fa578235801561090e5761077f3361165c565b93610789856112f0565b1561053457845182116108f95750907ffabb9e7afa4ef595f60e1ae9041b2b311b4acb27aeaed4b11b6f2abf689af10a9161052e6108226107c861173a565b6108186107dc60ff600f54168342916118cd565b61081287516107ea81611038565b6002815288368c83013760026107ff826110e1565b52600161080b82611104565b52826111d3565b506117c1565b4290610162611588565b946108a1818701519361088e61084960608a019687519b60c08c019c8d9242935192611be8565b98895183146000146108d0578b858b01528b8a525b61088261086c848d51611114565b808d5261087c8951809287611ba2565b90611114565b87526104d88a336117da565b600c5433906001600160a01b0316611241565b508551950151955191519251948552602085019590955260408401526060830152339230929081906080820190565b848a016108e58c61087c835180925188611ba2565b90526108f2838b51611114565b8a5261085e565b91516318928cbf60e31b815291820152602490fd5b8151630db73cdf60e41b81528490fd5b5050346103d157826003193601126103d157610120925061093d611588565b90825192825184526020830151516020850152808301519084015260608201516060840152608082015151608084015260a082015160a084015260c082015160c084015280820151908301526101008091015190820152f35b509091602080600319360112610c85578235926109ec6109bd60ff600f541661032d61173a565b61081285516109cb81611038565b6002815286368783013760016109e0826110e1565b52600261080b82611104565b600c5483516370a0823160e01b815233838201526001600160a01b03909116908381602481855afa908115610c7b578891610c4a575b50858110610c2e575082879160648651809481936323b872dd60e01b835233888401523060248401528a60448401525af1908115610c24578791610bf7575b5015610be95750610a713361165c565b90610a7d610479611588565b918181015115600014610b7357509061052e7f1913e17d5784005a914657f9e879fcc261644776365f1d84aeb45afcb6da4864939287610ac760c085015160608601519089611b75565b9782850151828751610ad881610fff565b52865190610ae582610fff565b8382528a885195610af587610fcc565b8b87528601528785015242606085015260808401528160a08401528160c0840152820152915b610b4b60c0820191610b2e88845161130b565b83526104d86060820195610b438b885161130b565b8752336117da565b5191519251948552602085019590955260408401526060830152339230929081906080820190565b945061052e82610bc760c07f1913e17d5784005a914657f9e879fcc261644776365f1d84aeb45afcb6da4864969501805198610bb6606085019a8b51908b611b75565b998685015190519042935192611be8565b92610bd387855161130b565b84528301610be288825161130b565b9052610b1b565b82516307a4ced160e51b8152fd5b610c179150833d8511610c1d575b610c0f8183611070565b810190611224565b38610a61565b503d610c05565b84513d89823e3d90fd5b82604491878751926381ddee1b60e01b84528301526024820152fd5b90508381813d8311610c74575b610c618183611070565b81010312610c70575138610a22565b8780fd5b503d610c57565b85513d8a823e3d90fd5b8480fd5b848285346103d157826003193601126103d15780519183600e549060019082821c928281168015610d7e575b6020958686108214610d6b5750848852908115610d495750600114610cf0575b6106728686610ce6828b0383611070565b51918291826110b5565b929550600e83527fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fd5b828410610d36575050508261067294610ce6928201019486610cd5565b8054868501880152928601928101610d19565b60ff191687860152505050151560051b8301019250610ce68261067286610cd5565b634e487b7160e01b845260229052602483fd5b93607f1693610cb5565b50346102fa57836003193601126102fa576013548351635e615a6b60e01b81526001600160a01b03939091869083908590829088165afa8015610ebc5784928791610ea2575b500151163303610e9557610de960ff600f541661032d61173a565b8351906080820182811067ffffffffffffffff821117610e8257855260038252606036602084013785610e1b836110e1565b526001610e2783611104565b52815160021015610e6f5790610e4391600260608301526111d3565b15610e61575080610379600692600d541682865416600a5491611241565b8251637a851da960e11b8152fd5b634e487b7160e01b865260328352602486fd5b634e487b7160e01b875260418452602487fd5b82516282b42960e81b8152fd5b610eb691503d8089833e6102b88183611070565b38610dce565b85513d88823e3d90fd5b848285346103d157826003193601126103d157805191836002549060019082821c928281168015610f7b575b6020958686108214610d6b5750848852908115610d495750600114610f22576106728686610ce6828b0383611070565b929550600283527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace5b828410610f68575050508261067294610ce6928201019486610cd5565b8054868501880152928601928101610f4b565b93607f1693610ef2565b8590346103ff57816003193601126103ff5790546001600160a01b03168152602090f35b906007821015610fb65752565b634e487b7160e01b600052602160045260246000fd5b610100810190811067ffffffffffffffff821117610fe957604052565b634e487b7160e01b600052604160045260246000fd5b6020810190811067ffffffffffffffff821117610fe957604052565b610120810190811067ffffffffffffffff821117610fe957604052565b6060810190811067ffffffffffffffff821117610fe957604052565b6040810190811067ffffffffffffffff821117610fe957604052565b90601f8019910116810190811067ffffffffffffffff821117610fe957604052565b60005b8381106110a55750506000910152565b8181015183820152602001611095565b604091602082526110d58151809281602086015260208686019101611092565b601f01601f1916010190565b8051156110ee5760200190565b634e487b7160e01b600052603260045260246000fd5b8051600110156110ee5760400190565b9190820391821161112157565b634e487b7160e01b600052601160045260246000fd5b604051906111448261101b565b8161010060009182815260405161115a81610fff565b838152602082015282604082015282606082015260405161117a81610fff565b83815260808201528260a08201528260c08201528260e08201520152565b916111bd916111a5611137565b5060406020820151910151906101008501519261190a565b80516111c7575090565b6111d091611a92565b90565b91909160005b835181101561121c5760208160051b85010151600780821015610fb657831015610fb6578214611214576000198114611121576001016111d9565b506001925050565b506000925050565b9081602091031261123c5751801515810361123c5790565b600080fd5b919091811580156112df575b6112d75760446020926000604051958694859363a9059cbb60e01b855260018060a01b0380931660048601526024850152165af19081156112cb576000916112ad575b501561129b57600190565b6040516307a4ced160e51b8152600490fd5b6112c5915060203d8111610c1d57610c0f8183611070565b38611290565b6040513d6000823e3d90fd5b505050600190565b506001600160a01b0383161561124d565b602081015115159081611301575090565b60e0915001511590565b9190820180921161112157565b8181029291811591840414171561112157565b600060405161133981610fff565b52620f424090818102918183041490151715611121576040519061135c82610fff565b815290565b9060078210159081610fb65760038314918280611454575b8015611447575b6113fc5780610fb657600684149384156113ed575b5083156113cd575b5050506113b65760405163eee2192360e01b8152600490fd5b61088e8160a06113ca93519101519061130b565b50565b90919250610fb657816113e4575b5038808061139d565b905015386113db565b60041493506000905038611395565b50505050806113ca915180611428575b50600d5460c091909101519033906001600160a01b0316611241565b600c54611440919033906001600160a01b0316611241565b503861140c565b5050600060058414611380565b5081611379565b51906001600160a01b038216820361123c57565b919082602091031261123c5760405161148781610fff565b91518252565b906020808383031261123c57825167ffffffffffffffff9384821161123c5701906101208284031261123c57604051936114c68561101b565b825185526114d582840161145b565b828601526114e6846040850161146f565b6040860152606083015160608601526080830151608086015260a083015160a086015261151560c0840161145b565b60c086015261152660e0840161145b565b60e086015261010092838101519082821161123c570184601f8201121561123c578051918211610fe95760405194611567601f8401601f1916850187611070565b82865283838301011161123c57826115829386019101611092565b82015290565b611590611137565b5060405161159d8161101b565b60035481526040516115ae81610fff565b60045481526020820152600554604082015260065460608201526040516115d481610fff565b6007548152608082015260085460a082015260095460c0820152600a5460e0820152600b5461010082015290565b6040519061160f82610fcc565b8160e060009182815282602082015260405161162a81610fff565b838152604082015282606082015260405161164481610fff565b83815260808201528260a08201528260c08201520152565b611664611602565b506014546040516316c1973960e01b81526001600160a01b0392831660048201529161010091829184916024918391165afa9182156112cb576000926116a957505090565b9091823d8411611733575b6116be8184611070565b82019282840312610434575060e090611710604051936116dd85610fcc565b82518552602083015160208601526116f8816040850161146f565b6040860152606083015160608601526080830161146f565b608084015260a081015160a084015260c081015160c0840152015160e082015290565b503d6116b4565b60006040805161174981611038565b828152826020820152015260405161176081611038565b60105481526011546020820152601254604082015290565b80516003556020810151516004556040810151600555606081015160065560808101515160075560a081015160085560c081015160095560e0810151600a556101000151600b55565b6007811015610fb65760ff8019600f5416911617600f55565b6014546001600160a01b03908116803b1561123c57600092836101249260e060405197889687956360d6081360e11b8752166004860152805160248601526020810151604486015260408101515160648601526060810151608486015260808101515160a486015260a081015160c486015260c081015160e486015201516101048401525af180156112cb5761186d5750565b67ffffffffffffffff8111610fe957604052565b611889611137565b5061189261173a565b6118af60406020830151920151916101009283850151914261190a565b80516118ba57505090565b6118c49192611a92565b90429082015290565b906111d0928151906040602084015193015193611a19565b6000546001600160a01b031633036118f957565b6040516282b42960e81b8152600490fd5b92909192600060405161191c81610fff565b5282811080156119b4575b6119a2578261195093831061199a575b5081848211611992575b61194a91611114565b92611114565b8015801561198a575b611966576111d0916119de565b5050600060405161197681610fff565b5260405161198381610fff565b6000815290565b508115611959565b849150611941565b915038611937565b50505050600060405161197681610fff565b5083821015611927565b81156119c8570490565b634e487b7160e01b600052601260045260246000fd5b9060006040516119ed81610fff565b52620f42409182810292818404149015171561112157611a0c916119be565b6040519061135c82610fff565b92919092600781101580610fb65760068214908115611a85575b8115611a75575b50611a6d5750821015611a4f57505050600090565b811015611a5d575050600190565b1015611a6857600290565b600390565b935050505090565b9050610fb6576005811438611a3a565b5050600481146000611a33565b90611a9b611137565b5060608201908151151580611b3c575b611ab457505090565b620f42409081611ac8826101df875161132b565b510491611add60c08601926101df845161132b565b51049060408501611aef83825161130b565b9052611afc828251611114565b905281611b0a575b50505090565b611b25611b2f93611b1c848751611114565b865251836119de565b60208501526119de565b6080820152388080611b04565b5080511515611aab565b620f424091611b67916000604051611b5d81610fff565b5251905190611318565b046040519061135c82610fff565b9180158015611b9a575b611b95576111d092611b9091611318565b6119be565b505090565b508215611b7f565b909180158015611be0575b611bda57611bbf611bc4928492611318565b61130b565b600019810191908211611121576111d0916119be565b50905090565b508115611bad565b939291611bf3611602565b50845190602086015195604091828201519760608301519660808401519160a085015195611c7b60e060c08801519701519c82519d8e9a611c338c610fcc565b8b5260208b0194855260e0848c019b838d52606081019e8f526080810198895260a081019b8c5260c081019a8b52015260008351611c7081610fff565b528a51905190611114565b93815194611c8886610fff565b855285611c9d575b5050505050505050525290565b611d1796611d0d611cd2611cb8611b90986101df885161132b565b84519060008751611cc881610fff565b525190519061130b565b845190611cde82610fff565b815260008551611ced81610fff565b5251935193611cfb85610fff565b620f424090818106865204825161130b565b9052525190611318565b90611d2d611d26838951611114565b825161130b565b905285523880808080808080611c9056fea2646970667358221220c649a56d7c346544519c61aaadd27dbc638483af71c95083aecc299243c57a5f64736f6c6343000814003360a080604052346100375733608052610557908161003d82396080518181816080015281816101690152818161020e01526102dc0152f35b600080fdfe604060808152600436101561001357600080fd5b60009060e08235811c90816316c197391461030b5781635cb0175c146102c7578163a3de7d17146101d6578163c1ac1026146100bf575063fb33ce811461005957600080fd5b346100bb57806003193601126100bb5761007161042f565b6001600160a01b03906100a7337f00000000000000000000000000000000000000000000000000000000000000008416146104bd565b168252816020526007602435918320015580f35b5080fd5b919050346101d2576101203660031901126101d2576100dc61042f565b6101003660231901126101ce576100f161044a565b9260243584526020840192604435845261010a366104a1565b93818601948552606086016084358152602060a3193601126101ca57600795610131610481565b9260a43584526080890193845260a089019460c435865260c08a019660e43588528a019761010435895260018060a01b0390610190827f00000000000000000000000000000000000000000000000000000000000000001633146104bd565b168b528a6020528a209851895551600189015551516002880155516003870155515160048601555160058501555160068401555191015580f35b8780fd5b8380fd5b8280fd5b9050346101d25760803660031901126101d2576007906101f461042f565b906101fe366104a1565b936001600160a01b0390610235337f00000000000000000000000000000000000000000000000000000000000000008416146104bd565b8661023e610481565b52610247610481565b9087825261025361044a565b966024358852602088016044358152828901918252606089019242845260808a0194855260a08a01958b875260c08b01978c89528b01988c8a52168b528a6020528a209851895551600189015551516002880155516003870155515160048601555160058501555160068401555191015580f35b5050346100bb57816003193601126100bb57517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b9050346101d25760203660031901126101d257816101009361032b61042f565b818461033561044a565b828152826020820152610346610481565b8381528682015282606082015261035b610481565b838152608082015260a0810183905260c0810183905201526001600160a01b031681526020819052209161038d61044a565b9280548452600181015491602085019283526103a7610481565b90600283015482528086019182526003830154606087019081526103c9610481565b91600485015483526080880192835260058501549360a08901948552600760068701549660c08b01978852015496888a01978852825199518a525160208a0152515190880152516060870152515160808601525160a08501525160c08401525190820152f35b600435906001600160a01b038216820361044557565b600080fd5b60405190610100820182811067ffffffffffffffff82111761046b57604052565b634e487b7160e01b600052604160045260246000fd5b604051906020820182811067ffffffffffffffff82111761046b57604052565b6020906063190112610445576104b5610481565b906064358252565b156104c457565b60405162461bcd60e51b815260206004820152602f60248201527f506f736974696f6e2063616e206f6e6c7920626520736574206279207468652060448201526e1cdd1c99585b4818dbdb9d1c9858dd608a1b6064820152608490fdfea264697066735822122080d010f406cb7459200122a9dd9702352c31e0ccdb7cc6473685a5f1bac89d7864736f6c63430008140033c65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a8a26469706673582212201519c81387c4cf39e016525480eb245d6fe8dd5230c8a493d68ebb8ae0c3e07464736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2665,
        "contract": "contracts/StreamFactory.sol:StreamFactory",
        "label": "acceptedInSupplyTokens",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2673,
        "contract": "contracts/StreamFactory.sol:StreamFactory",
        "label": "currentStreamId",
        "offset": 0,
        "slot": "1",
        "type": "t_uint16"
      },
      {
        "astId": 2676,
        "contract": "contracts/StreamFactory.sol:StreamFactory",
        "label": "params",
        "offset": 0,
        "slot": "2",
        "type": "t_struct(Params)2661_storage"
      },
      {
        "astId": 2680,
        "contract": "contracts/StreamFactory.sol:StreamFactory",
        "label": "streamAddresses",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint16,t_address)"
      },
      {
        "astId": 2682,
        "contract": "contracts/StreamFactory.sol:StreamFactory",
        "label": "frozen",
        "offset": 0,
        "slot": "12",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint16,t_address)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Decimal)5_storage": {
        "encoding": "inplace",
        "label": "struct Decimal",
        "members": [
          {
            "astId": 4,
            "contract": "contracts/StreamFactory.sol:StreamFactory",
            "label": "value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Params)2661_storage": {
        "encoding": "inplace",
        "label": "struct StreamFactory.Params",
        "members": [
          {
            "astId": 2643,
            "contract": "contracts/StreamFactory.sol:StreamFactory",
            "label": "streamCreationFee",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2645,
            "contract": "contracts/StreamFactory.sol:StreamFactory",
            "label": "streamCreationFeeToken",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 2648,
            "contract": "contracts/StreamFactory.sol:StreamFactory",
            "label": "exitFeeRatio",
            "offset": 0,
            "slot": "2",
            "type": "t_struct(Decimal)5_storage"
          },
          {
            "astId": 2650,
            "contract": "contracts/StreamFactory.sol:StreamFactory",
            "label": "minWaitingDuration",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 2652,
            "contract": "contracts/StreamFactory.sol:StreamFactory",
            "label": "minBootstrappingDuration",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 2654,
            "contract": "contracts/StreamFactory.sol:StreamFactory",
            "label": "minStreamDuration",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 2656,
            "contract": "contracts/StreamFactory.sol:StreamFactory",
            "label": "feeCollector",
            "offset": 0,
            "slot": "6",
            "type": "t_address"
          },
          {
            "astId": 2658,
            "contract": "contracts/StreamFactory.sol:StreamFactory",
            "label": "protocolAdmin",
            "offset": 0,
            "slot": "7",
            "type": "t_address"
          },
          {
            "astId": 2660,
            "contract": "contracts/StreamFactory.sol:StreamFactory",
            "label": "tosVersion",
            "offset": 0,
            "slot": "8",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}