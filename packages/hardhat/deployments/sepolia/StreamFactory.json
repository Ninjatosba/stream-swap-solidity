{
  "address": "0x564F9087d463467b5B533f55b1C5c346AD9d6aD1",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_streamCreationFee",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_streamCreationFeeToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_exitFeePercent",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minWaitingDuration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minBootstrappingDuration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minStreamDuration",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_acceptedTokens",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_feeCollector",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_protocolAdmin",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_tosVersion",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "subscriber",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "purchased",
          "type": "uint256"
        }
      ],
      "name": "Exited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newFeeCollector",
          "type": "address"
        }
      ],
      "name": "FeeCollectorUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "frozen",
          "type": "bool"
        }
      ],
      "name": "FrozenStateUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "ParamsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newProtocolAdmin",
          "type": "address"
        }
      ],
      "name": "ProtocolAdminUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "streamOutAmount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "bootstrappingStartTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "streamStartTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "streamEndTime",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "streamAddress",
          "type": "address"
        }
      ],
      "name": "StreamCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "spentIn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "outRemaining",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum IStreamTypes.FinalizedStatus",
          "name": "finalized",
          "type": "uint8"
        }
      ],
      "name": "StreamFinalized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "enum IStreamTypes.Status",
          "name": "mainStatus",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "enum IStreamTypes.FinalizedStatus",
          "name": "finalized",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lastUpdated",
          "type": "uint256"
        }
      ],
      "name": "StreamSynced",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "subscriber",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newShares",
          "type": "uint256"
        }
      ],
      "name": "Subscribed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "subscriber",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "NATIVE_TOKEN",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "acceptedTokens",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_streamOutAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_streamOutDenom",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_bootstrappingStartTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_streamStartTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_streamEndTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_threshold",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_inDenom",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_tosVersion",
          "type": "string"
        },
        {
          "internalType": "bytes32",
          "name": "_salt",
          "type": "bytes32"
        }
      ],
      "name": "createStream",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "frozen",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getParams",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "streamCreationFee",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "streamCreationFeeToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "exitFeePercent",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minWaitingDuration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minBootstrappingDuration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minStreamDuration",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "feeCollector",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "protocolAdmin",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "tosVersion",
              "type": "string"
            }
          ],
          "internalType": "struct StreamFactory.Params",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "isAcceptedToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "streamAddress",
          "type": "address"
        }
      ],
      "name": "isStream",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "params",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "streamCreationFee",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "streamCreationFeeToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "exitFeePercent",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minWaitingDuration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minBootstrappingDuration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minStreamDuration",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "feeCollector",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "protocolAdmin",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "tosVersion",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_salt",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "bytecodeHash",
          "type": "bytes32"
        }
      ],
      "name": "predictAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_frozen",
          "type": "bool"
        }
      ],
      "name": "setFrozen",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "streamId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "streams",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokens_to_add",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "tokens_to_remove",
          "type": "address[]"
        }
      ],
      "name": "updateAcceptedTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeCollector",
          "type": "address"
        }
      ],
      "name": "updateFeeCollector",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_streamCreationFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_exitFeePercent",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minWaitingDuration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minBootstrappingDuration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minStreamDuration",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_tosVersion",
          "type": "string"
        }
      ],
      "name": "updateParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_protocolAdmin",
          "type": "address"
        }
      ],
      "name": "updateProtocolAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa3ce58c7c2cfdcd2c5e0adf714e9bbaa1d91a918c92699e4cc989f9435e64e33",
  "receipt": {
    "to": null,
    "from": "0xd4046D913CFC553e61cf77Da053D525857de4636",
    "contractAddress": "0x564F9087d463467b5B533f55b1C5c346AD9d6aD1",
    "transactionIndex": 95,
    "gasUsed": "3604983",
    "logsBloom": "0x
    "blockHash": "0x8c66fc28937ba665a13d3a1aa9bee928ce718b20c41a5986cf97b8dac8c682f2",
    "transactionHash": "0xa3ce58c7c2cfdcd2c5e0adf714e9bbaa1d91a918c92699e4cc989f9435e64e33",
    "logs": [],
    "blockNumber": 7834621,
    "cumulativeGasUsed": "10070951",
    "status": 1,
    "byzantium": true
  },
  "args": [
    1,
    "0x0000000000000000000000000000000000000000",
    10000,
    1,
    1,
    1,
    [
      "0x5413FA1597F80a08F8EC2dcFcbBfE3F775aCcA92"
    ],
    "0xd4046D913CFC553e61cf77Da053D525857de4636",
    "0xd4046D913CFC553e61cf77Da053D525857de4636",
    "1.0.0"
  ],
  "numDeployments": 1,
  "solcInputHash": "4b83ad40a0bdaa5ebf12aa8c94ff3b62",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_streamCreationFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_streamCreationFeeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_exitFeePercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minWaitingDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minBootstrappingDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minStreamDuration\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_acceptedTokens\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_feeCollector\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_protocolAdmin\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_tosVersion\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"subscriber\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"purchased\",\"type\":\"uint256\"}],\"name\":\"Exited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newFeeCollector\",\"type\":\"address\"}],\"name\":\"FeeCollectorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenStateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ParamsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newProtocolAdmin\",\"type\":\"address\"}],\"name\":\"ProtocolAdminUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"streamOutAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"bootstrappingStartTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"streamStartTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"streamEndTime\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"streamAddress\",\"type\":\"address\"}],\"name\":\"StreamCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"spentIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"outRemaining\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum IStreamTypes.FinalizedStatus\",\"name\":\"finalized\",\"type\":\"uint8\"}],\"name\":\"StreamFinalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum IStreamTypes.Status\",\"name\":\"mainStatus\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"enum IStreamTypes.FinalizedStatus\",\"name\":\"finalized\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastUpdated\",\"type\":\"uint256\"}],\"name\":\"StreamSynced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"subscriber\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newShares\",\"type\":\"uint256\"}],\"name\":\"Subscribed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"subscriber\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"NATIVE_TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"acceptedTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_streamOutAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_streamOutDenom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_bootstrappingStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_streamStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_streamEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_inDenom\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_tosVersion\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"_salt\",\"type\":\"bytes32\"}],\"name\":\"createStream\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"frozen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getParams\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"streamCreationFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"streamCreationFeeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exitFeePercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minWaitingDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBootstrappingDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minStreamDuration\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"feeCollector\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"protocolAdmin\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"tosVersion\",\"type\":\"string\"}],\"internalType\":\"struct StreamFactory.Params\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"isAcceptedToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"streamAddress\",\"type\":\"address\"}],\"name\":\"isStream\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"params\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"streamCreationFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"streamCreationFeeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exitFeePercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minWaitingDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBootstrappingDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minStreamDuration\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"feeCollector\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"protocolAdmin\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"tosVersion\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_salt\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"bytecodeHash\",\"type\":\"bytes32\"}],\"name\":\"predictAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_frozen\",\"type\":\"bool\"}],\"name\":\"setFrozen\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"streamId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"streams\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens_to_add\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"tokens_to_remove\",\"type\":\"address[]\"}],\"name\":\"updateAcceptedTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeCollector\",\"type\":\"address\"}],\"name\":\"updateFeeCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_streamCreationFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_exitFeePercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minWaitingDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minBootstrappingDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minStreamDuration\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tosVersion\",\"type\":\"string\"}],\"name\":\"updateParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_protocolAdmin\",\"type\":\"address\"}],\"name\":\"updateProtocolAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/StreamFactory.sol\":\"StreamFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/DecimalMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\n/**\\n * @title DecimalMath\\n * @dev Library for handling decimal math operations with fixed-point arithmetic\\n */\\nlibrary DecimalMath {\\n    // We'll use 6 decimal places for precision\\n    uint256 public constant DECIMAL_PRECISION = 1e6;\\n    \\n    // Convert a regular number to a decimal representation\\n    function fromNumber(uint256 value) internal pure returns (uint256) {\\n        return value * DECIMAL_PRECISION;\\n    }\\n    function floor(uint256 value) internal pure returns (uint256) {\\n        return value / DECIMAL_PRECISION;\\n    }\\n    function ceil(uint256 value) internal pure returns (uint256) {\\n        return (value + DECIMAL_PRECISION - 1) / DECIMAL_PRECISION;\\n    }\\n    \\n    // Multiply two decimal numbers\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return (a * b) / DECIMAL_PRECISION;\\n    }\\n    \\n    // Divide two decimal numbers\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return (a * DECIMAL_PRECISION) / b;\\n    }\\n    \\n    // Add two decimal numbers\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n    \\n    // Subtract two decimal numbers\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n}\",\"keccak256\":\"0xe61aa2b921820fe5ea341c122c0311ec9927b71dd1756e392d161a1ec4dbf0f3\",\"license\":\"MIT\"},\"contracts/PositionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"./PositionTypes.sol\\\";   \\n\\ncontract PositionStorage {\\n    using PositionTypes for PositionTypes.Position;\\n\\n    mapping(address => PositionTypes.Position) private positions;\\n    address public immutable streamContractAddress;\\n\\n    constructor() {\\n        streamContractAddress = msg.sender;\\n    }\\n\\n    function getPosition(address _owner) external view returns (PositionTypes.Position memory) {\\n        return positions[_owner];\\n    }\\n\\n    modifier onlySender() {\\n        require(msg.sender == streamContractAddress, \\\"Position can only be set by the stream contract\\\");\\n        _;\\n    }\\n\\n    function createPosition(\\n        address owner,\\n        uint256 inBalance,\\n        uint256 shares,\\n        uint256 index\\n    ) external onlySender {\\n        positions[owner] = PositionTypes.Position(inBalance, shares, index, block.timestamp, 0, 0, 0, 0);\\n    }\\n\\n    function updatePosition(\\n        address owner,\\n        PositionTypes.Position memory position\\n    ) external onlySender {\\n        positions[owner] = position;\\n    }\\n\\n    function setExitDate(address owner, uint256 exitDate) external onlySender {\\n        positions[owner].exitDate = exitDate;\\n    }\\n}\\n\",\"keccak256\":\"0xf5b56d81625fd315cc1a54b027b39889def38c2c1bae955f0f0b5b660b9e05aa\",\"license\":\"MIT\"},\"contracts/PositionTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nlibrary PositionTypes {\\n    struct Position {\\n        uint256 inBalance;\\n        uint256 shares;\\n        uint256 index;\\n        uint256 lastUpdateTime;\\n        uint256 pendingReward;\\n        uint256 spentIn;\\n        uint256 purchased;\\n        uint256 exitDate;\\n    }\\n} \",\"keccak256\":\"0x3faa52f9c308a507bda7651b39975d6dd4a50599d5a5f353696b9c48153904f6\",\"license\":\"MIT\"},\"contracts/Stream.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"./PositionStorage.sol\\\";\\nimport \\\"./PositionTypes.sol\\\";\\nimport \\\"./StreamEvents.sol\\\";\\nimport \\\"./StreamErrors.sol\\\";\\nimport \\\"./StreamTypes.sol\\\";\\nimport \\\"./StreamFactory.sol\\\";\\nimport \\\"./DecimalMath.sol\\\";\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\ninterface IERC20 {\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n    function balanceOf(address account) external view returns (uint256);\\n    function transfer(address to, uint256 amount) external returns (bool);\\n}\\n\\ncontract Stream is IStreamErrors, IStreamEvents {\\n    address public creator;\\n    address public positionStorageAddress;\\n    string public name;\\n    uint256 private constant MIN_WAITING_DURATION = 10 seconds;\\n    uint256 private constant MIN_BOOTSTRAPPING_DURATION = 10 seconds;\\n    uint256 private constant MIN_STREAM_DURATION = 50 seconds;\\n\\n    IERC20 public token;\\n    IStreamTypes.StreamState public streamState;\\n    IStreamTypes.StreamMetadata public streamMetadata;\\n    IStreamTypes.StatusInfo public streamStatus;\\n    address public factory;\\n\\n    PositionStorage public positionStorage;\\n    // constructor should return its address\\n    constructor(\\n        uint256 _streamOutAmount,\\n        address _streamOutDenom,\\n        uint256 _bootstrappingStartTime,\\n        uint256 _streamStartTime,\\n        uint256 _streamEndTime,\\n        uint256 _threshold,\\n        string memory _name,\\n        address _inDenom,\\n        address _creator\\n        \\n    ) {\\n        validateStreamTimes(block.timestamp, _bootstrappingStartTime, _streamStartTime, _streamEndTime);\\n\\n        // Check if the factory sent required amount of out_amount\\n        IERC20 streamOutDenom = IERC20(_streamOutDenom);\\n        if (streamOutDenom.balanceOf(address(this)) < _streamOutAmount) {\\n            revert InsufficientOutAmount();\\n        }\\n        creator = _creator;\\n        positionStorage = new PositionStorage();\\n        positionStorageAddress = address(positionStorage);\\n        \\n        // Validate _inDenom\\n        try IERC20(_inDenom).balanceOf(msg.sender) returns (uint256) {\\n            token = IERC20(_inDenom);\\n        } catch {\\n            revert InvalidStreamOutDenom();\\n        }\\n\\n        // Validate _streamOutDenom\\n        try IERC20(_streamOutDenom).balanceOf(msg.sender) returns (uint256) {\\n            token = IERC20(_streamOutDenom);\\n        } catch {\\n            revert InvalidStreamOutDenom();\\n        }\\n\\n        streamState = IStreamTypes.StreamState({\\n            distIndex: 0,\\n            outRemaining: _streamOutAmount,\\n            inDenom: _inDenom,\\n            streamOutDenom: _streamOutDenom,\\n            inSupply: 0,\\n            spentIn: 0,\\n            shares: 0,\\n            currentStreamedPrice: 0,\\n            threshold: _threshold,\\n            outSupply: _streamOutAmount\\n        });\\n\\n        streamMetadata = IStreamTypes.StreamMetadata({\\n            name: _name\\n        });\\n\\n        streamStatus = IStreamTypes.StatusInfo({\\n            mainStatus: IStreamTypes.Status.Waiting,\\n            finalized: IStreamTypes.FinalizedStatus.None,\\n            lastUpdated: block.timestamp,\\n            bootstrappingStartTime: _bootstrappingStartTime,\\n            streamStartTime: _streamStartTime,\\n            streamEndTime: _streamEndTime\\n        });\\n\\n        // Store the factory address\\n        factory = msg.sender;\\n    }\\n\\n    function validateStreamTimes(\\n        uint256 nowTime,\\n        uint256 _bootstrappingStartTime,\\n        uint256 _startTime,\\n        uint256 _endTime\\n    ) internal pure {\\n        if (nowTime > _bootstrappingStartTime) revert InvalidBootstrappingStartTime();\\n        if (_bootstrappingStartTime > _startTime) revert InvalidStreamStartTime();\\n        if (_startTime > _endTime) revert InvalidStreamEndTime();\\n        if (_endTime - _startTime < MIN_STREAM_DURATION) revert StreamDurationTooShort();\\n        if (_startTime - _bootstrappingStartTime < MIN_BOOTSTRAPPING_DURATION) revert BootstrappingDurationTooShort();\\n        if (_bootstrappingStartTime - nowTime < MIN_WAITING_DURATION) revert WaitingDurationTooShort();\\n    }\\n\\n    function calculateDiff() internal view returns (uint256) {\\n        // If the stream is not started yet or already ended, return 0\\n        if (block.timestamp < streamStatus.streamStartTime || streamStatus.lastUpdated >= streamStatus.streamEndTime) {\\n            return 0;\\n        }\\n\\n        // If lastUpdated is before start time, set it to start time\\n        uint256 effectiveLastUpdated = streamStatus.lastUpdated;\\n        if (effectiveLastUpdated < streamStatus.streamStartTime) {\\n            effectiveLastUpdated = streamStatus.streamStartTime;\\n        }\\n\\n        // If current time is past end time, use end time instead\\n        uint256 effectiveNow = block.timestamp;\\n        if (effectiveNow > streamStatus.streamEndTime) {\\n            effectiveNow = streamStatus.streamEndTime;\\n        }\\n\\n        uint256 numerator = effectiveNow - effectiveLastUpdated;\\n        uint256 denominator = streamStatus.streamEndTime - effectiveLastUpdated;\\n\\n        if (denominator == 0 || numerator == 0) {\\n            return 0;\\n        }\\n        // Return ratio of time elapsed since last update compared to total remaining time\\n        return (numerator * 1e18) / denominator;\\n    }\\n\\n    function syncStreamStatus() internal {\\n        // Don't update if stream is in a final state\\n        if (streamStatus.mainStatus == IStreamTypes.Status.Cancelled ||\\n            (streamStatus.mainStatus == IStreamTypes.Status.Finalized && \\n            (streamStatus.finalized == IStreamTypes.FinalizedStatus.Streamed || \\n             streamStatus.finalized == IStreamTypes.FinalizedStatus.Refunded))) {\\n            return;\\n        }\\n\\n        // Update status based on current timestamp\\n        if (block.timestamp < streamStatus.bootstrappingStartTime) {\\n            streamStatus.mainStatus = IStreamTypes.Status.Waiting;\\n        } \\n        else if (block.timestamp >= streamStatus.bootstrappingStartTime && \\n                 block.timestamp < streamStatus.streamStartTime) {\\n            streamStatus.mainStatus = IStreamTypes.Status.Bootstrapping;\\n        }\\n        else if (block.timestamp >= streamStatus.streamStartTime && \\n                 block.timestamp < streamStatus.streamEndTime) {\\n            streamStatus.mainStatus = IStreamTypes.Status.Active;\\n        }\\n        else if (block.timestamp >= streamStatus.streamEndTime) {\\n            streamStatus.mainStatus = IStreamTypes.Status.Ended;\\n        }\\n    }\\n\\n    function computeSharesAmount(uint256 amountIn, bool roundUp) internal view returns (uint256) {\\n        if (streamState.shares == 0 || amountIn == 0) {\\n            return amountIn;\\n        }\\n        \\n        uint256 shares = streamState.shares * amountIn;\\n        if (roundUp) {\\n            return (shares + streamState.inSupply - 1) / streamState.inSupply;\\n        } else {\\n            return shares / streamState.inSupply;\\n        }\\n    }\\n\\n    function syncStream() internal {\\n        uint256 diff = calculateDiff();\\n\\n        if (streamState.shares > 0 && diff > 0) {\\n            // Calculate new distribution balance and spent in amount\\n            uint256 newDistributionBalance = (streamState.outRemaining * diff) / 1e18;\\n            uint256 spentIn = (streamState.inSupply * diff) / 1e18;\\n\\n            // Update state variables\\n            streamState.spentIn += spentIn;\\n            streamState.inSupply -= spentIn;\\n\\n            if (newDistributionBalance > 0) {\\n                streamState.outRemaining -= newDistributionBalance;\\n                // Update distribution index (shares are in base units, multiply by 1e18 for precision)\\n                streamState.distIndex += (newDistributionBalance * 1e18) / streamState.shares;\\n                // Update current streamed price\\n                streamState.currentStreamedPrice = (spentIn * 1e18) / newDistributionBalance;\\n            }\\n        }\\n\\n        streamStatus.lastUpdated = block.timestamp;\\n    }\\n\\n    function subscribe(uint256 amountIn) external payable {\\n        // Get current status\\n        syncStreamStatus();\\n        if (streamStatus.mainStatus != IStreamTypes.Status.Bootstrapping && \\n            streamStatus.mainStatus != IStreamTypes.Status.Active) {\\n            revert OperationNotAllowed();\\n        }\\n        // Validate if sender has enough tokens\\n        IERC20 streamInDenom = IERC20(streamState.inDenom);\\n        uint256 streamInDenomBalance = streamInDenom.balanceOf(msg.sender);\\n        if (streamInDenomBalance < amountIn) {\\n            revert InsufficientTokenPayment(amountIn, streamInDenomBalance);\\n        }\\n        // Transfer tokens from sender to this contract\\n        bool success = streamInDenom.transferFrom(msg.sender, address(this), amountIn);\\n        if (!success) {\\n            revert PaymentFailed();\\n        }\\n\\n        // Query position from PositionStorage contract\\n        PositionTypes.Position memory position = positionStorage.getPosition(msg.sender);\\n        uint256 newShares = 0;\\n\\n        if (position.shares == 0) {\\n            // New position case\\n            // First sync the stream to ensure new tokens don't participate in previous distribution\\n            syncStream();\\n\\n            // Calculate new shares (we'll implement this next)\\n            newShares = computeSharesAmount(amountIn, false);\\n            positionStorage.createPosition(msg.sender, amountIn, newShares, streamState.distIndex);\\n        }\\n        else {\\n            // Sync stream to ensure new tokens don't participate in previous distribution\\n            syncStream();\\n            // Calculate new shares (we'll implement this next)\\n            newShares = computeSharesAmount(amountIn, false);\\n            position = syncPosition(position);\\n            position.inBalance += amountIn;\\n            position.shares += newShares;\\n            // Save position to PositionStorage contract\\n            positionStorage.updatePosition(msg.sender, position);\\n        }\\n\\n        // Update StreamState\\n        streamState.inSupply += amountIn;\\n        streamState.shares += newShares;\\n\\n        // Emit event\\n        emit Subscribed(msg.sender, amountIn, newShares);\\n    }\\n\\n    function syncPosition(PositionTypes.Position memory position) internal view returns (PositionTypes.Position memory) {\\n        // Create a new position in memory to store the updated values\\n        PositionTypes.Position memory updatedPosition = PositionTypes.Position({\\n            inBalance: position.inBalance,\\n            shares: position.shares,\\n            index: position.index,\\n            lastUpdateTime: position.lastUpdateTime,\\n            pendingReward: position.pendingReward,\\n            spentIn: position.spentIn,\\n            purchased: position.purchased,\\n            exitDate: position.exitDate\\n        });\\n\\n        // Calculate index difference for distributions since last update\\n        uint256 indexDiff = streamState.distIndex - updatedPosition.index;\\n        uint256 spent = 0;\\n        uint256 purchased = 0;\\n\\n        // Only process if there are shares in the stream\\n        if (streamState.shares > 0) {\\n            // Calculate purchased amount based on position shares and index difference\\n            uint256 positionPurchased = (updatedPosition.shares * indexDiff) / 1e18 + updatedPosition.pendingReward;\\n            console.log(\\\"positionPurchased\\\", positionPurchased);\\n            // Calculate remaining balance based on current shares ratio\\n            uint256 inRemaining = (streamState.inSupply * updatedPosition.shares) / streamState.shares;\\n            console.log(\\\"inRemaining\\\", inRemaining);\\n            // Calculate spent amount\\n            spent = updatedPosition.inBalance - inRemaining;\\n            console.log(\\\"spent\\\", spent);\\n            updatedPosition.spentIn += spent;\\n            updatedPosition.inBalance = inRemaining;\\n\\n            // Update purchased amount\\n            purchased = positionPurchased;\\n            updatedPosition.purchased += purchased;\\n        }\\n\\n        // Update position tracking\\n        updatedPosition.index = streamState.distIndex;\\n        updatedPosition.lastUpdateTime = block.timestamp;\\n\\n        return updatedPosition;\\n    }\\n\\n    function withdraw(uint256 cap) external {\\n        if (cap == 0) {\\n            revert InvalidWithdrawAmount();\\n        }\\n        PositionTypes.Position memory position = positionStorage.getPosition(msg.sender);\\n        if (position.shares == 0) {\\n            revert OperationNotAllowed();\\n        }\\n\\n        if (cap > position.inBalance) {\\n            revert WithdrawAmountExceedsBalance(cap);\\n        }\\n\\n        syncStreamStatus();\\n        if (streamStatus.mainStatus != IStreamTypes.Status.Active && streamStatus.mainStatus != IStreamTypes.Status.Bootstrapping) {\\n            revert OperationNotAllowed();\\n        }\\n\\n        syncStream();\\n        position = syncPosition(position);\\n\\n        if (cap == position.inBalance) {\\n            position.shares = 0;\\n            position.inBalance = 0;\\n        } else {\\n            position.shares = position.shares - computeSharesAmount(cap, true);\\n            position.inBalance = position.inBalance - cap;\\n        }\\n\\n        positionStorage.updatePosition(msg.sender, position);\\n        streamState.inSupply = streamState.inSupply - cap;\\n        streamState.shares = streamState.shares - computeSharesAmount(cap, true);\\n        IERC20 streamInDenom = IERC20(streamState.inDenom);\\n        bool success = streamInDenom.transfer(msg.sender, cap);\\n        require(success, \\\"Transfer failed\\\");\\n        emit Withdrawn(msg.sender, cap);\\n    }\\n\\n    function exitStream() external {\\n        PositionTypes.Position memory position = positionStorage.getPosition(msg.sender);\\n        if (position.shares == 0 || position.exitDate > 0) {\\n            revert OperationNotAllowed();\\n        }\\n        // Sync stream\\n        syncStream();\\n        // Sync position\\n        position = syncPosition(position);\\n        // Check status\\n        syncStreamStatus();\\n\\n\\n        if (streamStatus.mainStatus == IStreamTypes.Status.Ended && streamState.spentIn >= streamState.threshold || streamStatus.mainStatus == IStreamTypes.Status.Finalized && streamStatus.finalized == IStreamTypes.FinalizedStatus.Streamed) {\\n            // Normal exit\\n            // Refund in_amount remaining if any in position\\n            if (position.inBalance > 0) {\\n                IERC20 streamInDenom = IERC20(streamState.inDenom);\\n                streamInDenom.transfer(msg.sender, position.inBalance);\\n\\n            }\\n            // send out_amount earned to position owner\\n            IERC20 streamOutDenom = IERC20(streamState.streamOutDenom);\\n            streamOutDenom.transfer(msg.sender, position.purchased);\\n        }\\n        else {\\n            // Refund total in_amount\\n            uint256 total_amount = position.inBalance + position.spentIn;\\n            IERC20 streamInDenom = IERC20(streamState.inDenom);\\n            streamInDenom.transfer(msg.sender, total_amount);\\n        }\\n            // Set exit date\\n            positionStorage.setExitDate(msg.sender, block.timestamp);\\n            emit Exited(msg.sender, position.purchased);\\n            positionStorage.updatePosition(msg.sender, position);\\n    }\\n\\n    function finalizeStream() external {\\n        // Check is sender is the creator\\n        if (msg.sender != creator) {\\n            revert Unauthorized();\\n        }\\n        // Check status\\n        syncStreamStatus();\\n        // Finalize is only allowed if stream is ended \\n        if (streamStatus.mainStatus != IStreamTypes.Status.Ended) {\\n            revert OperationNotAllowed();\\n        }\\n        // Sync stream\\n        syncStream();\\n\\n        IERC20 streamInDenom = IERC20(streamState.inDenom);\\n        IERC20 streamOutDenom = IERC20(streamState.streamOutDenom);\\n\\n        // Match if threshold is reached\\n        if (streamState.spentIn >= streamState.threshold) {\\n            //Get exit fee percent and fee collector from factory\\n            StreamFactory factoryContract = StreamFactory(factory);\\n            StreamFactory.Params memory params = factoryContract.getParams();\\n            uint256 decimalExitFee = params.exitFeePercent;\\n            address feeCollector = params.feeCollector;\\n\\n            // Calculate exit fee amount using DecimalMath\\n            uint256 spentIn = streamState.spentIn;\\n            uint256 decimalSpentIn = DecimalMath.fromNumber(spentIn);\\n            uint256 exitFeeAmount = DecimalMath.mul(decimalSpentIn, decimalExitFee);\\n            uint256 flooredExitFeeAmount = DecimalMath.floor(exitFeeAmount);\\n            uint256 creatorRevenue = spentIn-flooredExitFeeAmount;\\n            // Transfer fee to fee collector if needed\\n            if (flooredExitFeeAmount > 0) {\\n                streamInDenom.transfer(feeCollector, flooredExitFeeAmount);\\n            }\\n\\n            // Send revenue to creator\\n            streamInDenom.transfer(creator, creatorRevenue);\\n\\n\\n            streamStatus.finalized = IStreamTypes.FinalizedStatus.Streamed;\\n            streamStatus.mainStatus = IStreamTypes.Status.Finalized;\\n\\n            // Refund out tokens to creator if left any\\n            if (streamState.outRemaining > 0) {\\n                streamOutDenom.transfer(creator, streamState.outRemaining);\\n            }\\n        }\\n        else {\\n            streamStatus.finalized = IStreamTypes.FinalizedStatus.Refunded;\\n            streamStatus.mainStatus = IStreamTypes.Status.Finalized;\\n            // Refund out tokens to creator\\n            streamOutDenom.transfer(creator, streamState.outSupply);\\n        }\\n\\n        emit StreamFinalized(creator, streamState.spentIn, streamState.outRemaining, streamStatus.finalized);\\n    }\\n\\n    function syncStreamExternal() external {\\n        syncStream();\\n        syncStreamStatus();\\n        \\n    }\\n}\\n\\n\\n\\n\",\"keccak256\":\"0xb292de4e622058ad8fbdca865d1d5b62783fb294e824e59be8aea6ce9ee3cfcd\",\"license\":\"MIT\"},\"contracts/StreamErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\ninterface IStreamErrors {\\n    error InvalidBootstrappingStartTime();\\n    error InvalidStreamStartTime();\\n    error InvalidStreamEndTime();\\n    error StreamDurationTooShort();\\n    error BootstrappingDurationTooShort();\\n    error WaitingDurationTooShort();\\n    error InsufficientTokenPayment(uint256 requiredTokenAmount, uint256 tokenBalance);\\n    error InvalidStreamOutDenom();\\n    error InvalidInDenom();\\n    error PaymentFailed();\\n    error OperationNotAllowed();\\n    error Unauthorized();\\n    error InvalidWithdrawAmount();\\n    error WithdrawAmountExceedsBalance(uint256 cap);\\n    error InsufficientOutAmount();\\n} \",\"keccak256\":\"0x843346fe11319264bcb1de107e7b91ae2df37a7e9524a1e2948e803679cbce70\",\"license\":\"MIT\"},\"contracts/StreamEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"./StreamTypes.sol\\\";\\n\\ninterface IStreamEvents {\\n        event StreamCreated(\\n        uint256 indexed streamOutAmount,\\n        uint256 indexed bootstrappingStartTime,\\n        uint256 streamStartTime,\\n        uint256 streamEndTime,\\n        address indexed streamAddress\\n    );\\n    \\n    event StreamSynced(\\n        IStreamTypes.Status mainStatus,\\n        IStreamTypes.FinalizedStatus finalized,\\n        uint256 lastUpdated\\n    );\\n    \\n    event Subscribed(address indexed subscriber, uint256 amountIn, uint256 newShares);\\n    event Withdrawn(address indexed subscriber, uint256 amountIn);\\n    event Exited(address indexed subscriber, uint256 purchased);\\n    event StreamFinalized(address indexed creator, uint256 spentIn, uint256 outRemaining, IStreamTypes.FinalizedStatus finalized);\\n    event ParamsUpdated();\\n    event FeeCollectorUpdated(address newFeeCollector);\\n    event ProtocolAdminUpdated(address newProtocolAdmin);\\n    event FrozenStateUpdated(bool frozen);\\n}\",\"keccak256\":\"0x7d9419add94ed5d02af6da2642e70dfd07749bf3d23787d4cbeb98af6149518e\",\"license\":\"MIT\"},\"contracts/StreamFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"./Stream.sol\\\";\\nimport \\\"./StreamEvents.sol\\\";\\ncontract StreamFactory is IStreamEvents {\\n    struct Params {\\n        uint256 streamCreationFee;    // Fixed fee to create a stream\\n        address streamCreationFeeToken; // Token used for creation fee,\\n        uint256 exitFeePercent;       // Fee percentage when exiting a stream\\n        uint256 minWaitingDuration;   // Minimum waiting period\\n        uint256 minBootstrappingDuration;  // Minimum bootstrapping period\\n        uint256 minStreamDuration;    // Minimum duration for a stream\\n        address feeCollector;         // Address where fees are collected\\n        address protocolAdmin;        // Admin address for protocol\\n        string tosVersion;          // Terms of service version\\n    }\\n\\n    mapping(address => bool) public acceptedTokens;\\n    \\n    address public constant NATIVE_TOKEN = address(0);\\n\\n    uint256 public streamId;\\n    \\n    Params public params;\\n    mapping(address => bool) public streams;\\n\\n    bool public frozen;\\n\\n    constructor(\\n        uint256 _streamCreationFee,\\n        address _streamCreationFeeToken,\\n        uint256 _exitFeePercent,\\n        uint256 _minWaitingDuration,\\n        uint256 _minBootstrappingDuration,\\n        uint256 _minStreamDuration,\\n        address[] memory _acceptedTokens,\\n        address _feeCollector,\\n        address _protocolAdmin,\\n        string memory _tosVersion\\n    ) {\\n        require(_feeCollector != address(0), \\\"Invalid fee collector\\\");\\n        require(_protocolAdmin != address(0), \\\"Invalid protocol admin\\\");\\n        \\n        params = Params({\\n            streamCreationFee: _streamCreationFee,\\n            streamCreationFeeToken: _streamCreationFeeToken,\\n            exitFeePercent: _exitFeePercent,\\n            minWaitingDuration: _minWaitingDuration,\\n            minBootstrappingDuration: _minBootstrappingDuration,\\n            minStreamDuration: _minStreamDuration,\\n            feeCollector: _feeCollector,\\n            protocolAdmin: _protocolAdmin,\\n            tosVersion: _tosVersion\\n        });\\n\\n        // Set accepted tokens\\n        for (uint i = 0; i < _acceptedTokens.length; i++) {\\n            acceptedTokens[_acceptedTokens[i]] = true;\\n        }\\n        streamId = 0;\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(msg.sender == params.protocolAdmin, \\\"Not the admin\\\");\\n        _;\\n    }\\n\\n    function updateParams(\\n        uint256 _streamCreationFee,\\n        uint256 _exitFeePercent,\\n        uint256 _minWaitingDuration,\\n        uint256 _minBootstrappingDuration,\\n        uint256 _minStreamDuration,\\n        string memory _tosVersion\\n    ) external onlyAdmin {\\n        params.streamCreationFee = _streamCreationFee;\\n        params.exitFeePercent = _exitFeePercent;\\n        params.minWaitingDuration = _minWaitingDuration;\\n        params.minBootstrappingDuration = _minBootstrappingDuration;\\n        params.minStreamDuration = _minStreamDuration;\\n        params.tosVersion = _tosVersion;\\n        \\n        emit ParamsUpdated();\\n    }\\n\\n    function updateFeeCollector(address _feeCollector) external onlyAdmin {\\n        require(_feeCollector != address(0), \\\"Invalid fee collector\\\");\\n        params.feeCollector = _feeCollector;\\n        emit FeeCollectorUpdated(_feeCollector);\\n    }\\n\\n    function updateProtocolAdmin(address _protocolAdmin) external onlyAdmin {\\n        require(_protocolAdmin != address(0), \\\"Invalid protocol admin\\\");\\n        params.protocolAdmin = _protocolAdmin;\\n        emit ProtocolAdminUpdated(_protocolAdmin);\\n    }\\n\\n    function updateAcceptedTokens(address[] calldata tokens_to_add, address[] calldata tokens_to_remove) external onlyAdmin {\\n        for (uint i = 0; i < tokens_to_add.length; i++) {\\n            acceptedTokens[tokens_to_add[i]] = true;\\n        }\\n        for (uint i = 0; i < tokens_to_remove.length; i++) {\\n            acceptedTokens[tokens_to_remove[i]] = false;\\n        }\\n    }\\n\\n    function isAcceptedToken(address token) public view returns (bool) {\\n        return acceptedTokens[token];\\n    }\\n\\n    function createStream(\\n        uint256 _streamOutAmount,\\n        address _streamOutDenom,\\n        uint256 _bootstrappingStartTime,\\n        uint256 _streamStartTime,\\n        uint256 _streamEndTime,\\n        uint256 _threshold,\\n        string memory _name,\\n        address _inDenom,\\n        string memory _tosVersion,\\n        bytes32 _salt\\n    ) external payable {\\n        // Check if contract is accepting new streams (not frozen)\\n        require(!frozen, \\\"Contract is frozen\\\");\\n        \\n        // Validate input parameters\\n        require(_streamOutAmount > 0, \\\"Zero out supply not allowed\\\");\\n        require(acceptedTokens[_inDenom], \\\"Stream in denom not accepted\\\");\\n        \\n        // Validate time parameters\\n        require(_bootstrappingStartTime >= block.timestamp, \\\"Invalid bootstrapping start time\\\");\\n        require(_streamStartTime > _bootstrappingStartTime, \\\"Stream start must be after bootstrapping\\\");\\n        require(_streamEndTime > _streamStartTime, \\\"Stream end must be after start\\\");\\n        \\n        // Validate durations against minimum requirements\\n        require(_streamStartTime - _bootstrappingStartTime >= params.minBootstrappingDuration, \\n            \\\"Bootstrapping duration too short\\\");\\n        require(_streamEndTime - _streamStartTime >= params.minStreamDuration,\\n            \\\"Stream duration too short\\\");\\n        \\n        // Validate TOS version\\n        require(keccak256(abi.encodePacked(_tosVersion)) == keccak256(abi.encodePacked(params.tosVersion)), \\\"Invalid ToS version\\\");\\n\\n        // Load creation fee\\n        uint256 creationFee = params.streamCreationFee;\\n        if (creationFee > 0) {\\n            if (params.streamCreationFeeToken == address(0)) {\\n                // Native token\\n                require(msg.value >= creationFee, \\\"Insufficient native token\\\");\\n                // Transfer fee to fee collector\\n                require(payable(params.feeCollector).send(creationFee), \\\"Fee transfer failed\\\");\\n            } else {\\n                // ERC20 token\\n                require(IERC20(params.streamCreationFeeToken).transferFrom(msg.sender, address(params.feeCollector), creationFee), \\\"Token transfer failed\\\");\\n            }\\n        }\\n        // Increment stream id\\n        // Predict stream address\\n        streamId++;\\nbytes32 bytecodeHash = keccak256(abi.encodePacked(\\n    type(Stream).creationCode,\\n    abi.encode(\\n        _streamOutAmount,\\n        _streamOutDenom,\\n        _bootstrappingStartTime,\\n        _streamStartTime,\\n        _streamEndTime,\\n        _threshold,\\n        _name,\\n        _inDenom,\\n        msg.sender\\n    )\\n));\\n\\n        address predictedAddress = predictAddress(address(this), _salt, bytecodeHash);\\n        // Transfer out denom to stream contract\\n        require(IERC20(_streamOutDenom).transferFrom(msg.sender, predictedAddress, _streamOutAmount), \\\"Token transfer failed\\\");\\n        // Deploy new stream contract with all parameters\\n        Stream newStream = new Stream{salt: _salt}(\\n            _streamOutAmount,\\n            _streamOutDenom,\\n            _bootstrappingStartTime,\\n            _streamStartTime,\\n            _streamEndTime,\\n            _threshold,\\n            _name,\\n            _inDenom,\\n            msg.sender\\n            );\\n\\n        require(address(newStream) == predictedAddress, \\\"Stream address prediction failed\\\");\\n            \\n\\n        emit StreamCreated(\\n            _streamOutAmount,\\n            _bootstrappingStartTime,\\n            _streamStartTime,\\n            _streamEndTime,\\n            address(newStream)\\n        );\\n    }\\n\\n    function isStream(address streamAddress) external view returns (bool) {\\n        return streams[streamAddress];\\n    }\\n\\n    function getParams() external view returns (Params memory) {\\n        return params;\\n    }\\n\\n    // Optional: Add ability to transfer ownership\\n    function transferOwnership(address newOwner) external onlyAdmin {\\n        require(newOwner != address(0), \\\"Invalid new owner\\\");\\n        params.protocolAdmin = newOwner;\\n    }\\n\\n    function setFrozen(bool _frozen) external onlyAdmin {\\n        frozen = _frozen;\\n        emit FrozenStateUpdated(_frozen);\\n    }\\n\\n    function predictAddress(address creator, bytes32 _salt, bytes32 bytecodeHash) public pure returns (address) {\\n        return address(uint160(uint(keccak256(abi.encodePacked(\\n            bytes1(0xff),\\n            creator,\\n            _salt,\\n            bytecodeHash\\n        )))));\\n    }\\n} \",\"keccak256\":\"0xb9705c3e42c19264c85fffab3cbd189a3a79c29ce0e82a30f1a321d862e51f05\",\"license\":\"MIT\"},\"contracts/StreamTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\ninterface IStreamTypes {\\n    enum Status {\\n        Waiting,\\n        Bootstrapping, \\n        Active,\\n        Ended,\\n        Finalized,\\n        Cancelled\\n    }\\n\\n    enum FinalizedStatus {\\n        None,\\n        Streamed,\\n        Refunded\\n    }\\n\\n    struct StatusInfo {\\n        Status mainStatus;\\n        FinalizedStatus finalized;\\n        uint256 lastUpdated;\\n        uint256 bootstrappingStartTime;\\n        uint256 streamStartTime;\\n        uint256 streamEndTime;\\n    }\\n\\n    struct StreamMetadata {\\n        string name;\\n    }\\n\\n    struct StreamState {\\n        uint256 outRemaining;\\n        uint256 distIndex;\\n        uint256 spentIn;\\n        uint256 shares;\\n        uint256 currentStreamedPrice;\\n        uint256 threshold;\\n        uint256 inSupply;\\n        address inDenom;\\n        address streamOutDenom;\\n        uint256 outSupply;\\n    }\\n}\\n\",\"keccak256\":\"0xbacc837f34dfa9bc30fa8ae09edfa7e81ff79ad689a06f21f273d648bca66d63\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nlibrary console {\\n    address constant CONSOLE_ADDRESS =\\n        0x000000000000000000636F6e736F6c652e6c6f67;\\n\\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            pop(\\n                staticcall(\\n                    gas(),\\n                    consoleAddress,\\n                    add(payload, 32),\\n                    mload(payload),\\n                    0,\\n                    0\\n                )\\n            )\\n        }\\n    }\\n\\n    function _castToPure(\\n      function(bytes memory) internal view fnIn\\n    ) internal pure returns (function(bytes memory) pure fnOut) {\\n        assembly {\\n            fnOut := fnIn\\n        }\\n    }\\n\\n    function _sendLogPayload(bytes memory payload) internal pure {\\n        _castToPure(_sendLogPayloadImplementation)(payload);\\n    }\\n\\n    function log() internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n    }\\n\\n    function logInt(int256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n    }\\n\\n    function logUint(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function logString(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function logBool(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function logAddress(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n    }\\n\\n    function log(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function log(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function log(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function log(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function log(uint256 p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n}\\n\",\"keccak256\":\"0xf2560b5386574153057104d19a9e68a32ee912cf23c0c8df1fe9a0607f42d543\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234620004f15762004198803803806200001d8162000514565b928339610140828281010312620004f1578151906200003f602084016200053a565b604084015191606085015193608086015160a08701519060c088015160018060401b038111620004f157880196848901601f89011215620004f1578751976001600160401b03891162000438578860051b60206200009f81830162000514565b809b81520190878c0160208285010111620004f1579060208301915b6020818501018310620004f65750505050620000da60e08a016200053a565b93620000ea6101008b016200053a565b6101208b01519a9096906001600160401b038c11620004f157818101601f8d8301011215620004f157808c01519b6001600160401b038d1162000438578c926200013e601f8501601f191660200162000514565b9d8e528201602084838501010111620004f15760005b8d848210620004d85760009401602001939093525050506001600160a01b0385161562000493576001600160a01b038616156200044e576040519661012088016001600160401b03811189821017620004385760409081528289526001600160a01b0391821660208a018190529089018a9052606089018490526080890185905260a0890186905295811660c08901819052961660e088018190526101009097018a9052600255600380546001600160a01b0319908116909517905560049687556005556006556007556008805482169092179091556009805490911690911790558251916001600160401b0383116200042357600a54926001938481811c9116801562000418575b60208210146200040357601f8111620003a7575b506020601f82116001146200032f578190859660009262000323575b5050600019600383901b1c191690841b17600a555b6000935b620002c0575b60008355604051613c289081620005508239f35b80518410156200031d5760018060a01b0360208560051b8301015116600052600060205260406000208360ff19825416179055600019841462000308578280940193620002a6565b601182634e487b7160e01b6000525260246000fd5b620002ac565b0151905038806200028d565b600a6000908152600080516020620041788339815191529690601f198416905b81811062000390575091869791848895941062000376575b505050811b01600a55620002a2565b015160001960f88460031b161c1916905538808062000367565b83830151895597870197602093840193016200034f565b600a60005260008051602062004178833981519152601f830160051c81019160208410620003f8575b601f0160051c019085905b828110620003eb57505062000271565b60008155018590620003db565b9091508190620003d0565b602284634e487b7160e01b6000525260246000fd5b90607f16906200025d565b604182634e487b7160e01b6000525260246000fd5b634e487b7160e01b600052604160045260246000fd5b60405162461bcd60e51b815260206004820152601660248201527f496e76616c69642070726f746f636f6c2061646d696e000000000000000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601560248201527f496e76616c69642066656520636f6c6c6563746f7200000000000000000000006044820152606490fd5b9060209182828181878901010151920101520162000154565b600080fd5b602080809362000506866200053a565b8152019301929150620000bb565b6040519190601f01601f191682016001600160401b038111838210176200043857604052565b51906001600160a01b0382168203620004f15756fe60808060405260043610156200001457600080fd5b60003560e01c908163054f7d9c14620011315750806331f7d96414620011135780633b6e750f1462000de457806342d6b34b14620010d05780635e615a6b1462000fa05780637c526bb31462000e9b5780637e932d321462000e2757806382dc4a051462000de4578063836992751462000da1578063bfb792241462000da1578063c101944d1462000bdd578063c1d3be8b1462000b20578063cff0ab961462000a91578063d2c35ce814620009cd578063dce27b6a146200019c578063f2fde38b14620001115763f4408e4b14620000ec57600080fd5b346200010c5760003660031901126200010c576020600154604051908152f35b600080fd5b346200010c5760203660031901126200010c576200012e62001153565b600954906001600160a01b03906200014a33838516146200137d565b1690811562000163576001600160a01b03191617600955005b60405162461bcd60e51b815260206004820152601160248201527024b73b30b634b2103732bb9037bbb732b960791b6044820152606490fd5b6101403660031901126200010c576024356001600160a01b03811690036200010c5760c43567ffffffffffffffff81116200010c57620001e19036906004016200122b565b60e4356001600160a01b038116908190036200010c576101043567ffffffffffffffff81116200010c576200021b9036906004016200122b565b9060ff600c54166200099357600435156200094e57600052600060205260ff604060002054161562000909574260443510620008c55760443560643511156200086f5760643560843511156200082a576200027b6044356064356200141c565b60065411620007e657620002946064356084356200141c565b60075411620007a157604051620002cb60208281620002bd81830196878151938492016200116a565b810103808452018262001208565b519020604051600a54816000620002e28362001287565b926001811690811562000781575060011462000730575b6200030e925003601f19810183528262001208565b6020815191012003620006f55760025480620005a1575b5062000333600154620013ba565b600155620003ed6040516200034e602061268f018262001208565b61268f815261268f6200154460208301396040516200039b816200038c3360e4358860a43560843560643560443560243560043560208b0162001489565b03601f19810183528262001208565b620003df6020604051809382620003bc81840197888151938492016200116a565b8201620003d2825180938680850191016200116a565b0103808452018262001208565b5190206101243530620014e0565b6040516323b872dd60e01b8152336004808301919091526001600160a01b03831660248301523560448201529091906020818060648101038160006024356001600160a01b03165af18015620005495762000452916000916200056b575b5062001444565b6040518061268f81011067ffffffffffffffff61268f83011117620005555761268f62001544823980620004a76101243593339060e4359060a43560843560643560443560243560043561268f8b0162001489565b03906000f5801562000549576001600160a01b0390811691168103620005055760405160643581526084356020820152604435907f5914f6e96b84dd66c423f0c46e581af1f077747acb3b06d82ff211c3d0bc32e0604060043592a4005b606460405162461bcd60e51b815260206004820152602060248201527f53747265616d20616464726573732070726564696374696f6e206661696c65646044820152fd5b6040513d6000823e3d90fd5b634e487b7160e01b600052604160045260246000fd5b62000592915060203d60201162000599575b62000589818362001208565b8101906200142a565b846200044b565b503d6200057d565b6003546001600160a01b0316806200067357508034106200062e576008546000918291829182916001600160a01b031682821562000624575bf115620005e9575b8162000325565b60405162461bcd60e51b8152602060048201526013602482015272119959481d1c985b9cd9995c8819985a5b1959606a1b6044820152606490fd5b506108fc620005da565b60405162461bcd60e51b815260206004820152601960248201527f496e73756666696369656e74206e617469766520746f6b656e000000000000006044820152606490fd5b6008546040516323b872dd60e01b81523360048201526001600160a01b0390911660248201526044810192909252602090829060649082906000905af180156200054957620006cb91600091620006d1575062001444565b620005e2565b620006ee915060203d602011620005995762000589818362001208565b836200044b565b60405162461bcd60e51b815260206004820152601360248201527224b73b30b634b2102a37a9903b32b939b4b7b760691b6044820152606490fd5b5050600a6000528160008051602062003bd38339815191526000905b8382106200076657505060206200030e92820101620002f9565b6020919250806001915483858801015201910183916200074c565b602092506200030e94915060ff19168284015280151502820101620002f9565b60405162461bcd60e51b815260206004820152601960248201527f53747265616d206475726174696f6e20746f6f2073686f7274000000000000006044820152606490fd5b606460405162461bcd60e51b815260206004820152602060248201527f426f6f74737472617070696e67206475726174696f6e20746f6f2073686f72746044820152fd5b60405162461bcd60e51b815260206004820152601e60248201527f53747265616d20656e64206d75737420626520616674657220737461727400006044820152606490fd5b60405162461bcd60e51b815260206004820152602860248201527f53747265616d207374617274206d75737420626520616674657220626f6f74736044820152677472617070696e6760c01b6064820152608490fd5b606460405162461bcd60e51b815260206004820152602060248201527f496e76616c696420626f6f74737472617070696e672073746172742074696d656044820152fd5b60405162461bcd60e51b815260206004820152601c60248201527f53747265616d20696e2064656e6f6d206e6f74206163636570746564000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601b60248201527f5a65726f206f757420737570706c79206e6f7420616c6c6f77656400000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601260248201527121b7b73a3930b1ba1034b990333937bd32b760711b6044820152606490fd5b346200010c5760203660031901126200010c57620009ea62001153565b6009546001600160a01b03919062000a0690831633146200137d565b16801562000a54576020817fe5693914d19c789bdee50a362998c0bc8d035a835f9871da5d51152f0582c34f926bffffffffffffffffffffffff60a01b6008541617600855604051908152a1005b60405162461bcd60e51b815260206004820152601560248201527424b73b30b634b2103332b29031b7b63632b1ba37b960591b6044820152606490fd5b346200010c5760003660031901126200010c5760025460018060a01b039062000b1c826003541692600454906005549060065460075490826008541692600954169362000add620012c4565b95604051998a998a5260208a015260408901526060880152608087015260a086015260c085015260e0840152610120806101008501528301906200118f565b0390f35b346200010c5760203660031901126200010c5762000b3d62001153565b600954906001600160a01b039062000b5933838516146200137d565b1690811562000b9f576001600160a01b03191681176009556040519081527f1af81a401acf01a36af32532151690df1252f468decdeb32a9252e7e15d0a30f90602090a1005b60405162461bcd60e51b815260206004820152601660248201527524b73b30b634b210383937ba37b1b7b61030b236b4b760511b6044820152606490fd5b346200010c5760c03660031901126200010c5767ffffffffffffffff60a4358181116200010c5762000c149036906004016200122b565b9062000c2c60018060a01b036009541633146200137d565b6004356002556024356004556044356005556064356006556084356007558151908111620005555762000c61600a5462001287565b601f811162000d48575b50602080601f831160011462000cd05750819260009262000cc4575b50508160011b916000199060031b1c191617600a555b7f4e5005547c24dfd12003c2845fd20f2071c49fa3cd30b0be7a064e3f4c3f8d2a600080a1005b01519050828062000c87565b90601f19831693600a60005260008051602062003bd3833981519152926000905b86821062000d2f575050836001951062000d15575b505050811b01600a5562000c9d565b015160001960f88460031b161c1916905582808062000d06565b8060018596829496860151815501950193019062000cf1565b600a60005260008051602062003bd3833981519152601f830160051c8101916020841062000d96575b601f0160051c01905b81811062000d89575062000c6b565b6000815560010162000d7a565b909150819062000d71565b346200010c5760203660031901126200010c576001600160a01b0362000dc662001153565b16600052600b602052602060ff604060002054166040519015158152f35b346200010c5760203660031901126200010c576001600160a01b0362000e0962001153565b166000526000602052602060ff604060002054166040519015158152f35b346200010c5760203660031901126200010c576004358015158091036200010c5760207f5e836595170048222f815b36aad9e5217a02753f833b3e65739120eb989cf8b49162000e8360018060a01b036009541633146200137d565b60ff19600c541660ff821617600c55604051908152a1005b346200010c5760403660031901126200010c5767ffffffffffffffff6004358181116200010c5762000ed2903690600401620011b6565b916024359081116200010c5762000eee903690600401620011b6565b92909160018060a01b039162000f0a836009541633146200137d565b60005b81811062000f645750505060005b83811062000f2557005b808262000f4262000f3c62000f5e948888620013e0565b62001407565b166000526000602052604060002060ff198154169055620013ba565b62000f1b565b808462000f7b62000f3c62000f9a948688620013e0565b1660005260006020526040600020600160ff19825416179055620013ba565b62000f0d565b346200010c5760003660031901126200010c5760405162000fc181620011ea565b6000815260006020820152600060408201526000606082015260006080820152600060a0820152600060c0820152600060e0820152606061010080920152602062000b1c60405180936200101582620011ea565b600254825260018060a01b038060035416858401908152816004546040860190815260055460608701908152600654608088019081526007549160a0890192835284600854169360c08a019485528580600954169760e08c019889528a6200107c620012c4565b9c019b8c526040519e8f9e8f9181835251910152511660408d01525160608c01525160808b01525160a08a01525160c0890152511660e087015251169084015251610120808401526101408301906200118f565b346200010c5760603660031901126200010c57602062001101620010f362001153565b6044359060243590620014e0565b6040516001600160a01b039091168152f35b346200010c5760003660031901126200010c57602060405160008152f35b346200010c5760003660031901126200010c5760209060ff600c541615158152f35b600435906001600160a01b03821682036200010c57565b60005b8381106200117e5750506000910152565b81810151838201526020016200116d565b90602091620011aa815180928185528580860191016200116a565b601f01601f1916010190565b9181601f840112156200010c5782359167ffffffffffffffff83116200010c576020808501948460051b0101116200010c57565b610120810190811067ffffffffffffffff8211176200055557604052565b90601f8019910116810190811067ffffffffffffffff8211176200055557604052565b81601f820112156200010c5780359067ffffffffffffffff821162000555576040519262001264601f8401601f19166020018562001208565b828452602083830101116200010c57816000926020809301838601378301015290565b90600182811c92168015620012b9575b6020831014620012a357565b634e487b7160e01b600052602260045260246000fd5b91607f169162001297565b60405190600082600a5491620012da8362001287565b8083529260019081811690811562001359575060011462001307575b50620013059250038362001208565b565b600a6000908152915060008051602062003bd38339815191525b8483106200133d575062001305935050810160200138620012f6565b81935090816020925483858a0101520191019091859262001321565b9050602092506200130594915060ff191682840152151560051b82010138620012f6565b156200138557565b60405162461bcd60e51b815260206004820152600d60248201526c2737ba103a34329030b236b4b760991b6044820152606490fd5b6000198114620013ca5760010190565b634e487b7160e01b600052601160045260246000fd5b9190811015620013f15760051b0190565b634e487b7160e01b600052603260045260246000fd5b356001600160a01b03811681036200010c5790565b91908203918211620013ca57565b908160209103126200010c575180151581036200010c5790565b156200144c57565b60405162461bcd60e51b8152602060048201526015602482015274151bdad95b881d1c985b9cd9995c8819985a5b1959605a1b6044820152606490fd5b97999894610100979294620014d39497928a5260018060a01b03978880971660208c015260408b015260608a0152608089015260a08801526101208060c08901528701906200118f565b961660e085015216910152565b909160405192602084019260ff60f81b84526bffffffffffffffffffffffff199060601b16602185015260358401526055830152605582526080820182811067ffffffffffffffff8211176200055557604052905190206001600160a01b03169056fe60808060405234620005c8576200268f8038038091620000208285620006e3565b833981019061012081830312620005c8578051620000416020830162000707565b9060408301519060608401519260808501519460a081015160c082015160018060401b038111620005c857820188601f82011215620005c8578051906001600160401b038211620004855760405199620000a6601f8401601f19166020018c620006e3565b828b5260208383010111620005c85760005b828110620006ce57505060206000918a010152620000e8610100620000e060e0850162000707565b930162000707565b854211620006bc57868611620006aa57878711620006985760326200010e888a6200071c565b106200068657600a6200012287896200071c565b106200067457600a6200013642886200071c565b1062000662576040516370a0823160e01b81523060048201526020816024816001600160a01b0389165afa80156200060657869160009162000624575b50106200061257600080546001600160a01b0319166001600160a01b03929092169190911790556040516104e38082016001600160401b0381118382101762000485578291620021ac833903906000f080156200060657601580546001600160a01b039283166001600160a01b031991821681179092556001805490911690911790556040516370a0823160e01b8152336004820152906020908290602490829087165afa9081620005d5575b5062000238576040516320ea362d60e21b8152600490fd5b600380546001600160a01b0319166001600160a01b03848116919091179091556040516370a0823160e01b8152336004820152906020908290602490829088165afa90816200059f575b506200029a576040516320ea362d60e21b8152600490fd5b600380546001600160a01b0319166001600160a01b0385161790556040516001600160401b03610140820190811190821117620004855761012081610140879301604052828152600060208201526000604082015260006060820152600060808201528360a0820152600060c082015260018060a01b03851660e082015260018060a01b03861661010082015201528360045560006005556000600655600060075560006008556009556000600a5560018060a01b031660018060a01b0319600b541617600b5560018060a01b031660018060a01b0319600c541617600c55600d55604051602081019080821060018060401b03831117620004855760409190915284905283516001600160401b0381116200048557600e54600181811c9116801562000594575b60208210146200057e57601f811162000514575b50602094601f8211600114620004a7579481929394956000926200049b575b50508160011b916000199060031b1c191617600e555b60405160c081016001600160401b038111828210176200048557849160a0916040526000815260006020820152426040820152836060820152846080820152015261ffff19600f5416600f55426010556011556012556013553360018060a01b03196014541617601455604051611a6b9081620007418239f35b634e487b7160e01b600052604160045260246000fd5b015190503880620003f5565b601f19821695600e60005260206000209160005b888110620004fb57508360019596979810620004e1575b505050811b01600e556200040b565b015160001960f88460031b161c19169055388080620004d2565b91926020600181928685015181550194019201620004bb565b600e6000527fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fd601f830160051c8101916020841062000573575b601f0160051c01905b818110620005665750620003d6565b6000815560010162000557565b90915081906200054e565b634e487b7160e01b600052602260045260246000fd5b90607f1690620003c2565b602090813d8311620005cd575b620005b88183620006e3565b81010312620005c8573862000282565b600080fd5b503d620005ac565b602090813d8311620005fe575b620005ee8183620006e3565b81010312620005c8573862000220565b503d620005e2565b6040513d6000823e3d90fd5b6040516357084d7360e11b8152600490fd5b91506020823d60201162000659575b816200064260209383620006e3565b810103126200065657508590513862000173565b80fd5b3d915062000633565b604051635bdfbd0360e11b8152600490fd5b6040516372904fb160e01b8152600490fd5b6040516318861b4960e01b8152600490fd5b6040516349f8456b60e11b8152600490fd5b604051633060050d60e21b8152600490fd5b6040516341f01d5760e01b8152600490fd5b60208183018101518c830182015201620000b8565b601f909101601f19168101906001600160401b038211908210176200048557604052565b51906001600160a01b0382168203620005c857565b919082039182116200072a57565b634e487b7160e01b600052601160045260246000fdfe608060408181526004918236101561001657600080fd5b600092833560e01c91826302d05d3f146113045750816306fdde03146112375781630e5634df1461111c5781630f574ba714610dbd5781632e1a7d4d14610b1157816334793e0514610aed5781638cd4741514610ac4578163af5c3ac414610a4d578163c0ae398c146109d4578163c45a0155146109ab578163cbf0641514610618578163e427d08c146105ef578163f69e8fba146100ea575063fc0c546a146100bf57600080fd5b346100e657816003193601126100e65760035490516001600160a01b039091168152602090f35b5080fd5b9050346105eb57826003193601126105eb5782546001600160a01b039190821633036105de5761011861151f565b600f60ff81541660068110156105cb576003036105bc5761013761168e565b82600b54169280600c54166006546009541115600014610506578390878360145416885193848092635e615a6b60e01b82525afa9182156104fc5788926103c9575b508260c088840151930151169160065490620f4240908183028381048314841517156103b457916101ae81926101b7946115d4565b04048092611607565b928161034f575b505082885416958588518092818c816101fd63a9059cbb60e01b998a835260209e8f98840160209093929193604081019460018060a01b031681520152565b03925af1801561034557610328575b50835461ffff19166101041784558454918261027a575b5050507f423655f1f3de1bcb0a4e39a00d01e1e3d389d77ef6ce384e129be79181ef9d8e935060609291610276915b8754169560ff6006549454925460081c1691815194855260208501528301906113f5565ba280f35b8854885191825284166001600160a01b031686820190815260208101939093529493918691869182908b90829060400103925af191821561031e577f423655f1f3de1bcb0a4e39a00d01e1e3d389d77ef6ce384e129be79181ef9d8e95606095610276946102f0575b5082949550819350610223565b8161030f92903d10610317575b610307818361138b565b810190611418565b5038806102e3565b503d6102fd565b86513d89823e3d90fd5b61033e90873d891161031757610307818361138b565b503861020c565b88513d8b823e3d90fd5b885163a9059cbb60e01b81526001600160a01b039091168782019081526020818101939093529091908290819060400103818c8b5af1801561034557610396575b806101be565b6103ad9060203d811161031757610307818361138b565b5038610390565b601189634e487b7160e01b6000525260246000fd5b9091503d8089833e6103db818361138b565b8101602080838303126104f857825167ffffffffffffffff938482116104f45701906101209384838503126104f4578a51948501858110828211176104db578b528251855261042b8284016119c9565b828601528a8301518b860152606083015160608601526080830151608086015260a083015160a086015261046160c084016119c9565b60c086015261047260e084016119c9565b60e08601526101009283810151908282116104f0570184601f820112156104d75780519182116104db578b51946104b2601f8401601f191685018761138b565b8286528383830101116104d757826104cd93860191016113ad565b8201529038610179565b8c80fd5b60418a634e487b7160e01b6000525260246000fd5b8d80fd5b8b80fd5b8980fd5b87513d8a823e3d90fd5b825461020461ffff199091161783558654600d54875163a9059cbb60e01b81529184166001600160a01b0316868301908152602080820192909252939650909493929091859182908a90829060400103925af19081156105b2577f423655f1f3de1bcb0a4e39a00d01e1e3d389d77ef6ce384e129be79181ef9d8e9460609461027693610594575b50610252565b6105ab9060203d811161031757610307818361138b565b503861058e565b85513d88823e3d90fd5b508251637a851da960e11b8152fd5b634e487b7160e01b865260218352602486fd5b82516282b42960e81b8152fd5b8280fd5b5050346100e657816003193601126100e65760015490516001600160a01b039091168152602090f35b8383346100e657816003193601126100e65760155481516316c1973960e01b81523381860152610100946001600160a01b03939290919086908290602490829088165afa9586156109a1578596610972575b505060209485810151158015610965575b610956576106909061068b61168e565b61180f565b9261069961151f565b600f5460ff811690600682101561094357600382149182610934575b8215610906575b5050958596600014610890578581865180610831575b50600c5460c0880151875163a9059cbb60e01b8152338882019081526020810192909252938492871691839190829060400103925af1801561080657610814575b505b8160155416803b1561081057845163fb33ce8160e01b8152338582019081524260208201529091889183919082908490829060400103925af18015610806579087916107ee575b50507f920bb94eb3842a728db98228c375ff6b00c5bc5a54fac6736155517a0a20a61a60c08601519185519283523392a26015541692833b156107ea576107bb93859283855180978195829463159595fd60e01b8452339084016114bd565b03925af19081156107e157506107ce5750f35b6107d790611328565b6107de5780f35b80fd5b513d84823e3d90fd5b8480fd5b6107f790611328565b61080257858861075c565b8580fd5b85513d89823e3d90fd5b8680fd5b61082a90823d841161031757610307818361138b565b5087610713565b600b54875163a9059cbb60e01b81523388820190815260208101939093529384928390036040019183919088165af1801561080657610873575b8187916106d2565b61088990823d841161031757610307818361138b565b508761086b565b85816108d46108a5885160a08a01519061149a565b600b54885163a9059cbb60e01b8152338982019081526020810193909352948593918816928492839160400190565b03925af18015610806576108e9575b50610715565b6108ff90823d841161031757610307818361138b565b50876108e3565b8414915081610918575b5085886106bc565b60ff915060081c169560038710156105cb579560011485610910565b600654600954111592506106b5565b634e487b7160e01b875260218452602487fd5b509051637a851da960e11b8152fd5b5060e0810151151561067b565b610992929650803d1061099a575b61098a818361138b565b810190611435565b93858061066a565b503d610980565b83513d87823e3d90fd5b5050346100e657816003193601126100e65760145490516001600160a01b039091168152602090f35b9050346105eb57826003193601126105eb57610140925054906005549060065460075460085460095490600a549260018060a01b039485600b541695600c541696600d549881519a8b5260208b01528901526060880152608087015260a086015260c085015260e0840152610100830152610120820152f35b8383346100e657816003193601126100e657600f5460ff8116916010546011549160125493601354958251976006821015610ab15750875260c09750610a9d90602088019060081c60ff166113f5565b8501526060840152608083015260a0820152f35b634e487b7160e01b815260218a52602490fd5b5050346100e657816003193601126100e65760155490516001600160a01b039091168152602090f35b83346107de57806003193601126107de57610b0661168e565b610b0e61151f565b80f35b919050346105eb5760209081600319360112610db9578235928315610dab5760155482516316c1973960e01b815233838201526001600160a01b0391610100919082908290602490829087165afa918215610da1578892610d84575b50508481015115610d3e5780518611610d6d57610b8861151f565b60ff600f54166006811015610d5a5760028114159081610d4e575b50610d3e57610bb5879161068b61168e565b80518703610d195781868201528181525b8260155416803b156105eb57855163159595fd60e01b81529183918391829084908290610bf690338c84016114bd565b03925af18015610d0f57610cfb575b5050610c1385600a54611607565b600a55610c2b600754610c2587611649565b90611607565b600755600b54835163a9059cbb60e01b815233848201908152602081018890529092869284928390036040019183918b91165af1908115610cf1578691610cd4575b5015610ca15750907f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d591519283523392a280f35b82606492519162461bcd60e51b8352820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b6044820152fd5b610ceb9150843d861161031757610307818361138b565b38610c6d565b83513d88823e3d90fd5b610d0490611328565b610802578538610c05565b85513d84823e3d90fd5b858101610d2a8151610c258a611649565b9052610d37878251611607565b8152610bc6565b8351637a851da960e11b81528390fd5b60019150141538610ba3565b634e487b7160e01b885260218452602488fd5b83516318928cbf60e31b8152808401879052602490fd5b610d9a9250803d1061099a5761098a818361138b565b3880610b6d565b85513d8a823e3d90fd5b9051630db73cdf60e41b8152fd5b8380fd5b839150602092836003193601126105eb57813591610dd961151f565b60ff600f5416600681101561110957600181141590816110fd575b506110ef57600b5482516370a0823160e01b815233818401526001600160a01b0392918316908781602481855afa9081156108065787916110c2575b508581106110a6575086869160648651809481936323b872dd60e01b835233888401523060248401528a60448401525af190811561109c57869161107f575b5015611071578160155416835180916316c1973960e01b825233848301528160246101009485935afa918215610806578792611054575b505080870151610f7f57509380959394610ebe61168e565b610ec786611614565b926015541690600554823b15610db95760848492838851958694859363f8c4ee6d60e01b855233908501528c602485015289604485015260648401525af18015610f7557610f61575b50507ff94991dcbea6e8ac439cbc93bd9c62a4d39f04e0ad656df9a703f13552c2787f925b610f4185600a5461149a565b600a55610f508260075461149a565b60075582519485528401523392a280f35b610f6a90611328565b6107ea578486610f10565b84513d84823e3d90fd5b9190610f8961168e565b610f9b610f9586611614565b9361180f565b91610fa786845161149a565b8352878301610fb785825161149a565b90526015541690813b1561081057918691610fe89383875180968195829463159595fd60e01b8452339084016114bd565b03925af180156109a157611021575b507ff94991dcbea6e8ac439cbc93bd9c62a4d39f04e0ad656df9a703f13552c2787f929394610f35565b9361104d7ff94991dcbea6e8ac439cbc93bd9c62a4d39f04e0ad656df9a703f13552c2787f9495611328565b9392610ff7565b61106a9250803d1061099a5761098a818361138b565b8780610ea6565b82516307a4ced160e51b8152fd5b6110969150873d891161031757610307818361138b565b87610e6f565b84513d88823e3d90fd5b82604491878751926381ddee1b60e01b84528301526024820152fd5b90508781813d83116110e8575b6110d9818361138b565b81010312610810575188610e30565b503d6110cf565b9051637a851da960e11b8152fd5b60029150141586610df4565b634e487b7160e01b855260218252602485fd5b8284346107de57806003193601126107de5781519181600e5492600184811c9181861695861561122d575b602096878510811461121a578899509688969785829a5291826000146111f3575050600114611197575b505050611193929161118491038561138b565b519282849384528301906113d0565b0390f35b9190869350600e83527fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fd5b8284106111db5750505082010181611184611193611171565b8054848a0186015288955087949093019281016111c2565b60ff19168782015293151560051b8601909301935084925061118491506111939050611171565b634e487b7160e01b835260228a52602483fd5b92607f1692611147565b8284346107de57806003193601126107de578151918160025492600184811c918186169586156112fa575b602096878510811461121a578899509688969785829a5291826000146111f357505060011461129e57505050611193929161118491038561138b565b9190869350600283527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace5b8284106112e25750505082010181611184611193611171565b8054848a0186015288955087949093019281016112c9565b92607f1692611262565b8490346100e657816003193601126100e65790546001600160a01b03168152602090f35b67ffffffffffffffff811161133c57604052565b634e487b7160e01b600052604160045260246000fd5b610100810190811067ffffffffffffffff82111761133c57604052565b6040810190811067ffffffffffffffff82111761133c57604052565b90601f8019910116810190811067ffffffffffffffff82111761133c57604052565b60005b8381106113c05750506000910152565b81810151838201526020016113b0565b906020916113e9815180928185528580860191016113ad565b601f01601f1916010190565b9060038210156114025752565b634e487b7160e01b600052602160045260246000fd5b90816020910312611430575180151581036114305790565b600080fd5b90816101009103126114305760e06040519161145083611352565b805183526020810151602084015260408101516040840152606081015160608401526080810151608084015260a081015160a084015260c081015160c0840152015160e082015290565b919082018092116114a757565b634e487b7160e01b600052601160045260246000fd5b90929160e06101009161012084019560018060a01b0316845280516020850152602081015160408501526040810151606085015260608101516080850152608081015160a085015260a081015160c085015260c0810151828501520151910152565b600f805460ff811660068110156114025760058114908115611595575b50611591576011544210156115565750805460ff19169055565b60125442101561156e5750805460ff19166001179055565b6013544210156115865750805460ff19166002179055565b60ff19166003179055565b5050565b6004915014806115a6575b3861153c565b5060ff8160081c16600381101561140257600181149081156115c9575b506115a0565b6002915014386115c3565b818102929181159184041417156114a757565b81156115f1570490565b634e487b7160e01b600052601260045260246000fd5b919082039182116114a757565b60075480158015611641575b61163d5761163a91611631916115d4565b600a54906115e7565b90565b5090565b508115611620565b60075480158015611686575b61163d5790611663916115d4565b611670600a54809261149a565b6000198101919082116114a75761163a916115e7565b508115611655565b61169661176d565b6007549081151580611764575b6116b0575b505042601055565b60045490670de0b6b3a764000092836116c983856115d4565b04926116f3856116dc600a5495866115d4565b0480946116eb8260065461149a565b600655611607565b600a558315908115611709575b505050506116a8565b8461171391611607565b60045584840290848204861417156114a75761173a91611732916115e7565b60055461149a565b6005558281029281840414901517156114a757611756916115e7565b600855388080808080611700565b508015156116a3565b6012548042108015611801575b6117fb57601054908082106117f3575b506117ac429160135492818482116117eb575b6117a691611607565b92611607565b801580156117e3575b6117dc57670de0b6b3a7640000918281029281840414901517156114a75761163a916115e7565b5050600090565b5081156117b5565b84915061179d565b90503861178a565b50600090565b50601054601354111561177a565b604090815161181d81611352565b600080825260e0602092828482015282868201528260608201528260808201528260a08201528260c0820152015281518183015192848101519260608201519460808301519360a084015160e060c0860151950151958951998a9361188185611352565b845285840194855280840197898952606085019a8b526080850192835260a0850193845260c0850197885260e08501526118be600554998a611607565b9060075490816118d9575b5050505050505050505242905290565b6119b99761198d61195a6119a7946119556119186119ae99670de0b6b3a764000061190f8f9b641cdc195b9d60da1b9c516115d4565b0490519061149a565b9b61194a8d88516119288161136f565b60118152701c1bdcda5d1a5bdb941d5c98da185cd959607a1b898201526119dd565b600a549051906115d4565b6115e7565b809861198782865161196b8161136f565b600b81526a696e52656d61696e696e6760a81b878201526119dd565b51611607565b938492519161199b8361136f565b600583528201526119dd565b825161149a565b90528752825161149a565b90523880808681808080806118c9565b51906001600160a01b038216820361143057565b600091908291611a226040518092611a0e6020830195632d839cb360e21b87526040602485015260648401906113d0565b90604483015203601f19810183528261138b565b51906a636f6e736f6c652e6c6f675afa5056fea264697066735822122059422f4dd2d1ae79194b3ef7c61aa588f3c1eec6b7384f94b357e1e36763645464736f6c6343000814003360a0806040523461003657336080526104a7908161003c823960805181818160800152818160ec015281816101a901526103580152f35b600080fdfe604060808152600436101561001357600080fd5b60009060e08235811c908163159595fd146102ce57816316c19739146101d85781635cb0175c14610194578163f8c4ee6d146100bf575063fb33ce811461005957600080fd5b346100bb57806003193601126100bb576100716103bb565b6001600160a01b03906100a7337f000000000000000000000000000000000000000000000000000000000000000084161461040d565b168252816020526007602435918320015580f35b5080fd5b905034610190576080366003190112610190576007906100dd6103bb565b906001600160a01b03610113337f000000000000000000000000000000000000000000000000000000000000000083161461040d565b61011b6103d6565b9460243586526020860160443581528187016064358152606088019142835260808901938a855260a08a01958b875260c08b01978c89528b01988c8a52168b528a6020528a20985189555160018901555160028801555160038701555160048601555160058501555160068401555191015580f35b8280fd5b5050346100bb57816003193601126100bb57517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b9050346101905760203660031901126101905781610100936101f86103bb565b81846102026103d6565b82815282602082015282868201528260608201528260808201528260a08201528260c0820152015260018060a01b0316815280602052206102416103d6565b9080549384835260018201549060208401918252600283015490808501918252600384015490606086019182526004850154926080870193845260058601549460a0880195865288600760068901549860c08b01998a52015498019788528251998a525160208a015251908801525160608701525160808601525160a08501525160c08401525190820152f35b90503461019057610120366003190112610190576102ea6103bb565b6101003660231901126103b7576007916103026103d6565b936024358552602085016044358152818601606435815260608701906084358252608088019260a435845260a089019460c435865260c08a019660e43588528a019761010435895260018060a01b039061037f827f000000000000000000000000000000000000000000000000000000000000000016331461040d565b168b528a6020528a20985189555160018901555160028801555160038701555160048601555160058501555160068401555191015580f35b8380fd5b600435906001600160a01b03821682036103d157565b600080fd5b60405190610100820182811067ffffffffffffffff8211176103f757604052565b634e487b7160e01b600052604160045260246000fd5b1561041457565b60405162461bcd60e51b815260206004820152602f60248201527f506f736974696f6e2063616e206f6e6c7920626520736574206279207468652060448201526e1cdd1c99585b4818dbdb9d1c9858dd608a1b6064820152608490fdfea26469706673582212200e736f41d0f700841c64e931e5d2c65e65de0d66e07534a99153a88a69263f6d64736f6c63430008140033c65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a8a26469706673582212204022497e3322f4ad5fc6b3007e459f2d11bc31241919390d15e51a707fa1cdde64736f6c63430008140033c65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a8",
  "deployedBytecode": "0x60808060405260043610156200001457600080fd5b60003560e01c908163054f7d9c14620011315750806331f7d96414620011135780633b6e750f1462000de457806342d6b34b14620010d05780635e615a6b1462000fa05780637c526bb31462000e9b5780637e932d321462000e2757806382dc4a051462000de4578063836992751462000da1578063bfb792241462000da1578063c101944d1462000bdd578063c1d3be8b1462000b20578063cff0ab961462000a91578063d2c35ce814620009cd578063dce27b6a146200019c578063f2fde38b14620001115763f4408e4b14620000ec57600080fd5b346200010c5760003660031901126200010c576020600154604051908152f35b600080fd5b346200010c5760203660031901126200010c576200012e62001153565b600954906001600160a01b03906200014a33838516146200137d565b1690811562000163576001600160a01b03191617600955005b60405162461bcd60e51b815260206004820152601160248201527024b73b30b634b2103732bb9037bbb732b960791b6044820152606490fd5b6101403660031901126200010c576024356001600160a01b03811690036200010c5760c43567ffffffffffffffff81116200010c57620001e19036906004016200122b565b60e4356001600160a01b038116908190036200010c576101043567ffffffffffffffff81116200010c576200021b9036906004016200122b565b9060ff600c54166200099357600435156200094e57600052600060205260ff604060002054161562000909574260443510620008c55760443560643511156200086f5760643560843511156200082a576200027b6044356064356200141c565b60065411620007e657620002946064356084356200141c565b60075411620007a157604051620002cb60208281620002bd81830196878151938492016200116a565b810103808452018262001208565b519020604051600a54816000620002e28362001287565b926001811690811562000781575060011462000730575b6200030e925003601f19810183528262001208565b6020815191012003620006f55760025480620005a1575b5062000333600154620013ba565b600155620003ed6040516200034e602061268f018262001208565b61268f815261268f6200154460208301396040516200039b816200038c3360e4358860a43560843560643560443560243560043560208b0162001489565b03601f19810183528262001208565b620003df6020604051809382620003bc81840197888151938492016200116a565b8201620003d2825180938680850191016200116a565b0103808452018262001208565b5190206101243530620014e0565b6040516323b872dd60e01b8152336004808301919091526001600160a01b03831660248301523560448201529091906020818060648101038160006024356001600160a01b03165af18015620005495762000452916000916200056b575b5062001444565b6040518061268f81011067ffffffffffffffff61268f83011117620005555761268f62001544823980620004a76101243593339060e4359060a43560843560643560443560243560043561268f8b0162001489565b03906000f5801562000549576001600160a01b0390811691168103620005055760405160643581526084356020820152604435907f5914f6e96b84dd66c423f0c46e581af1f077747acb3b06d82ff211c3d0bc32e0604060043592a4005b606460405162461bcd60e51b815260206004820152602060248201527f53747265616d20616464726573732070726564696374696f6e206661696c65646044820152fd5b6040513d6000823e3d90fd5b634e487b7160e01b600052604160045260246000fd5b62000592915060203d60201162000599575b62000589818362001208565b8101906200142a565b846200044b565b503d6200057d565b6003546001600160a01b0316806200067357508034106200062e576008546000918291829182916001600160a01b031682821562000624575bf115620005e9575b8162000325565b60405162461bcd60e51b8152602060048201526013602482015272119959481d1c985b9cd9995c8819985a5b1959606a1b6044820152606490fd5b506108fc620005da565b60405162461bcd60e51b815260206004820152601960248201527f496e73756666696369656e74206e617469766520746f6b656e000000000000006044820152606490fd5b6008546040516323b872dd60e01b81523360048201526001600160a01b0390911660248201526044810192909252602090829060649082906000905af180156200054957620006cb91600091620006d1575062001444565b620005e2565b620006ee915060203d602011620005995762000589818362001208565b836200044b565b60405162461bcd60e51b815260206004820152601360248201527224b73b30b634b2102a37a9903b32b939b4b7b760691b6044820152606490fd5b5050600a6000528160008051602062003bd38339815191526000905b8382106200076657505060206200030e92820101620002f9565b6020919250806001915483858801015201910183916200074c565b602092506200030e94915060ff19168284015280151502820101620002f9565b60405162461bcd60e51b815260206004820152601960248201527f53747265616d206475726174696f6e20746f6f2073686f7274000000000000006044820152606490fd5b606460405162461bcd60e51b815260206004820152602060248201527f426f6f74737472617070696e67206475726174696f6e20746f6f2073686f72746044820152fd5b60405162461bcd60e51b815260206004820152601e60248201527f53747265616d20656e64206d75737420626520616674657220737461727400006044820152606490fd5b60405162461bcd60e51b815260206004820152602860248201527f53747265616d207374617274206d75737420626520616674657220626f6f74736044820152677472617070696e6760c01b6064820152608490fd5b606460405162461bcd60e51b815260206004820152602060248201527f496e76616c696420626f6f74737472617070696e672073746172742074696d656044820152fd5b60405162461bcd60e51b815260206004820152601c60248201527f53747265616d20696e2064656e6f6d206e6f74206163636570746564000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601b60248201527f5a65726f206f757420737570706c79206e6f7420616c6c6f77656400000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601260248201527121b7b73a3930b1ba1034b990333937bd32b760711b6044820152606490fd5b346200010c5760203660031901126200010c57620009ea62001153565b6009546001600160a01b03919062000a0690831633146200137d565b16801562000a54576020817fe5693914d19c789bdee50a362998c0bc8d035a835f9871da5d51152f0582c34f926bffffffffffffffffffffffff60a01b6008541617600855604051908152a1005b60405162461bcd60e51b815260206004820152601560248201527424b73b30b634b2103332b29031b7b63632b1ba37b960591b6044820152606490fd5b346200010c5760003660031901126200010c5760025460018060a01b039062000b1c826003541692600454906005549060065460075490826008541692600954169362000add620012c4565b95604051998a998a5260208a015260408901526060880152608087015260a086015260c085015260e0840152610120806101008501528301906200118f565b0390f35b346200010c5760203660031901126200010c5762000b3d62001153565b600954906001600160a01b039062000b5933838516146200137d565b1690811562000b9f576001600160a01b03191681176009556040519081527f1af81a401acf01a36af32532151690df1252f468decdeb32a9252e7e15d0a30f90602090a1005b60405162461bcd60e51b815260206004820152601660248201527524b73b30b634b210383937ba37b1b7b61030b236b4b760511b6044820152606490fd5b346200010c5760c03660031901126200010c5767ffffffffffffffff60a4358181116200010c5762000c149036906004016200122b565b9062000c2c60018060a01b036009541633146200137d565b6004356002556024356004556044356005556064356006556084356007558151908111620005555762000c61600a5462001287565b601f811162000d48575b50602080601f831160011462000cd05750819260009262000cc4575b50508160011b916000199060031b1c191617600a555b7f4e5005547c24dfd12003c2845fd20f2071c49fa3cd30b0be7a064e3f4c3f8d2a600080a1005b01519050828062000c87565b90601f19831693600a60005260008051602062003bd3833981519152926000905b86821062000d2f575050836001951062000d15575b505050811b01600a5562000c9d565b015160001960f88460031b161c1916905582808062000d06565b8060018596829496860151815501950193019062000cf1565b600a60005260008051602062003bd3833981519152601f830160051c8101916020841062000d96575b601f0160051c01905b81811062000d89575062000c6b565b6000815560010162000d7a565b909150819062000d71565b346200010c5760203660031901126200010c576001600160a01b0362000dc662001153565b16600052600b602052602060ff604060002054166040519015158152f35b346200010c5760203660031901126200010c576001600160a01b0362000e0962001153565b166000526000602052602060ff604060002054166040519015158152f35b346200010c5760203660031901126200010c576004358015158091036200010c5760207f5e836595170048222f815b36aad9e5217a02753f833b3e65739120eb989cf8b49162000e8360018060a01b036009541633146200137d565b60ff19600c541660ff821617600c55604051908152a1005b346200010c5760403660031901126200010c5767ffffffffffffffff6004358181116200010c5762000ed2903690600401620011b6565b916024359081116200010c5762000eee903690600401620011b6565b92909160018060a01b039162000f0a836009541633146200137d565b60005b81811062000f645750505060005b83811062000f2557005b808262000f4262000f3c62000f5e948888620013e0565b62001407565b166000526000602052604060002060ff198154169055620013ba565b62000f1b565b808462000f7b62000f3c62000f9a948688620013e0565b1660005260006020526040600020600160ff19825416179055620013ba565b62000f0d565b346200010c5760003660031901126200010c5760405162000fc181620011ea565b6000815260006020820152600060408201526000606082015260006080820152600060a0820152600060c0820152600060e0820152606061010080920152602062000b1c60405180936200101582620011ea565b600254825260018060a01b038060035416858401908152816004546040860190815260055460608701908152600654608088019081526007549160a0890192835284600854169360c08a019485528580600954169760e08c019889528a6200107c620012c4565b9c019b8c526040519e8f9e8f9181835251910152511660408d01525160608c01525160808b01525160a08a01525160c0890152511660e087015251169084015251610120808401526101408301906200118f565b346200010c5760603660031901126200010c57602062001101620010f362001153565b6044359060243590620014e0565b6040516001600160a01b039091168152f35b346200010c5760003660031901126200010c57602060405160008152f35b346200010c5760003660031901126200010c5760209060ff600c541615158152f35b600435906001600160a01b03821682036200010c57565b60005b8381106200117e5750506000910152565b81810151838201526020016200116d565b90602091620011aa815180928185528580860191016200116a565b601f01601f1916010190565b9181601f840112156200010c5782359167ffffffffffffffff83116200010c576020808501948460051b0101116200010c57565b610120810190811067ffffffffffffffff8211176200055557604052565b90601f8019910116810190811067ffffffffffffffff8211176200055557604052565b81601f820112156200010c5780359067ffffffffffffffff821162000555576040519262001264601f8401601f19166020018562001208565b828452602083830101116200010c57816000926020809301838601378301015290565b90600182811c92168015620012b9575b6020831014620012a357565b634e487b7160e01b600052602260045260246000fd5b91607f169162001297565b60405190600082600a5491620012da8362001287565b8083529260019081811690811562001359575060011462001307575b50620013059250038362001208565b565b600a6000908152915060008051602062003bd38339815191525b8483106200133d575062001305935050810160200138620012f6565b81935090816020925483858a0101520191019091859262001321565b9050602092506200130594915060ff191682840152151560051b82010138620012f6565b156200138557565b60405162461bcd60e51b815260206004820152600d60248201526c2737ba103a34329030b236b4b760991b6044820152606490fd5b6000198114620013ca5760010190565b634e487b7160e01b600052601160045260246000fd5b9190811015620013f15760051b0190565b634e487b7160e01b600052603260045260246000fd5b356001600160a01b03811681036200010c5790565b91908203918211620013ca57565b908160209103126200010c575180151581036200010c5790565b156200144c57565b60405162461bcd60e51b8152602060048201526015602482015274151bdad95b881d1c985b9cd9995c8819985a5b1959605a1b6044820152606490fd5b97999894610100979294620014d39497928a5260018060a01b03978880971660208c015260408b015260608a0152608089015260a08801526101208060c08901528701906200118f565b961660e085015216910152565b909160405192602084019260ff60f81b84526bffffffffffffffffffffffff199060601b16602185015260358401526055830152605582526080820182811067ffffffffffffffff8211176200055557604052905190206001600160a01b03169056fe60808060405234620005c8576200268f8038038091620000208285620006e3565b833981019061012081830312620005c8578051620000416020830162000707565b9060408301519060608401519260808501519460a081015160c082015160018060401b038111620005c857820188601f82011215620005c8578051906001600160401b038211620004855760405199620000a6601f8401601f19166020018c620006e3565b828b5260208383010111620005c85760005b828110620006ce57505060206000918a010152620000e8610100620000e060e0850162000707565b930162000707565b854211620006bc57868611620006aa57878711620006985760326200010e888a6200071c565b106200068657600a6200012287896200071c565b106200067457600a6200013642886200071c565b1062000662576040516370a0823160e01b81523060048201526020816024816001600160a01b0389165afa80156200060657869160009162000624575b50106200061257600080546001600160a01b0319166001600160a01b03929092169190911790556040516104e38082016001600160401b0381118382101762000485578291620021ac833903906000f080156200060657601580546001600160a01b039283166001600160a01b031991821681179092556001805490911690911790556040516370a0823160e01b8152336004820152906020908290602490829087165afa9081620005d5575b5062000238576040516320ea362d60e21b8152600490fd5b600380546001600160a01b0319166001600160a01b03848116919091179091556040516370a0823160e01b8152336004820152906020908290602490829088165afa90816200059f575b506200029a576040516320ea362d60e21b8152600490fd5b600380546001600160a01b0319166001600160a01b0385161790556040516001600160401b03610140820190811190821117620004855761012081610140879301604052828152600060208201526000604082015260006060820152600060808201528360a0820152600060c082015260018060a01b03851660e082015260018060a01b03861661010082015201528360045560006005556000600655600060075560006008556009556000600a5560018060a01b031660018060a01b0319600b541617600b5560018060a01b031660018060a01b0319600c541617600c55600d55604051602081019080821060018060401b03831117620004855760409190915284905283516001600160401b0381116200048557600e54600181811c9116801562000594575b60208210146200057e57601f811162000514575b50602094601f8211600114620004a7579481929394956000926200049b575b50508160011b916000199060031b1c191617600e555b60405160c081016001600160401b038111828210176200048557849160a0916040526000815260006020820152426040820152836060820152846080820152015261ffff19600f5416600f55426010556011556012556013553360018060a01b03196014541617601455604051611a6b9081620007418239f35b634e487b7160e01b600052604160045260246000fd5b015190503880620003f5565b601f19821695600e60005260206000209160005b888110620004fb57508360019596979810620004e1575b505050811b01600e556200040b565b015160001960f88460031b161c19169055388080620004d2565b91926020600181928685015181550194019201620004bb565b600e6000527fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fd601f830160051c8101916020841062000573575b601f0160051c01905b818110620005665750620003d6565b6000815560010162000557565b90915081906200054e565b634e487b7160e01b600052602260045260246000fd5b90607f1690620003c2565b602090813d8311620005cd575b620005b88183620006e3565b81010312620005c8573862000282565b600080fd5b503d620005ac565b602090813d8311620005fe575b620005ee8183620006e3565b81010312620005c8573862000220565b503d620005e2565b6040513d6000823e3d90fd5b6040516357084d7360e11b8152600490fd5b91506020823d60201162000659575b816200064260209383620006e3565b810103126200065657508590513862000173565b80fd5b3d915062000633565b604051635bdfbd0360e11b8152600490fd5b6040516372904fb160e01b8152600490fd5b6040516318861b4960e01b8152600490fd5b6040516349f8456b60e11b8152600490fd5b604051633060050d60e21b8152600490fd5b6040516341f01d5760e01b8152600490fd5b60208183018101518c830182015201620000b8565b601f909101601f19168101906001600160401b038211908210176200048557604052565b51906001600160a01b0382168203620005c857565b919082039182116200072a57565b634e487b7160e01b600052601160045260246000fdfe608060408181526004918236101561001657600080fd5b600092833560e01c91826302d05d3f146113045750816306fdde03146112375781630e5634df1461111c5781630f574ba714610dbd5781632e1a7d4d14610b1157816334793e0514610aed5781638cd4741514610ac4578163af5c3ac414610a4d578163c0ae398c146109d4578163c45a0155146109ab578163cbf0641514610618578163e427d08c146105ef578163f69e8fba146100ea575063fc0c546a146100bf57600080fd5b346100e657816003193601126100e65760035490516001600160a01b039091168152602090f35b5080fd5b9050346105eb57826003193601126105eb5782546001600160a01b039190821633036105de5761011861151f565b600f60ff81541660068110156105cb576003036105bc5761013761168e565b82600b54169280600c54166006546009541115600014610506578390878360145416885193848092635e615a6b60e01b82525afa9182156104fc5788926103c9575b508260c088840151930151169160065490620f4240908183028381048314841517156103b457916101ae81926101b7946115d4565b04048092611607565b928161034f575b505082885416958588518092818c816101fd63a9059cbb60e01b998a835260209e8f98840160209093929193604081019460018060a01b031681520152565b03925af1801561034557610328575b50835461ffff19166101041784558454918261027a575b5050507f423655f1f3de1bcb0a4e39a00d01e1e3d389d77ef6ce384e129be79181ef9d8e935060609291610276915b8754169560ff6006549454925460081c1691815194855260208501528301906113f5565ba280f35b8854885191825284166001600160a01b031686820190815260208101939093529493918691869182908b90829060400103925af191821561031e577f423655f1f3de1bcb0a4e39a00d01e1e3d389d77ef6ce384e129be79181ef9d8e95606095610276946102f0575b5082949550819350610223565b8161030f92903d10610317575b610307818361138b565b810190611418565b5038806102e3565b503d6102fd565b86513d89823e3d90fd5b61033e90873d891161031757610307818361138b565b503861020c565b88513d8b823e3d90fd5b885163a9059cbb60e01b81526001600160a01b039091168782019081526020818101939093529091908290819060400103818c8b5af1801561034557610396575b806101be565b6103ad9060203d811161031757610307818361138b565b5038610390565b601189634e487b7160e01b6000525260246000fd5b9091503d8089833e6103db818361138b565b8101602080838303126104f857825167ffffffffffffffff938482116104f45701906101209384838503126104f4578a51948501858110828211176104db578b528251855261042b8284016119c9565b828601528a8301518b860152606083015160608601526080830151608086015260a083015160a086015261046160c084016119c9565b60c086015261047260e084016119c9565b60e08601526101009283810151908282116104f0570184601f820112156104d75780519182116104db578b51946104b2601f8401601f191685018761138b565b8286528383830101116104d757826104cd93860191016113ad565b8201529038610179565b8c80fd5b60418a634e487b7160e01b6000525260246000fd5b8d80fd5b8b80fd5b8980fd5b87513d8a823e3d90fd5b825461020461ffff199091161783558654600d54875163a9059cbb60e01b81529184166001600160a01b0316868301908152602080820192909252939650909493929091859182908a90829060400103925af19081156105b2577f423655f1f3de1bcb0a4e39a00d01e1e3d389d77ef6ce384e129be79181ef9d8e9460609461027693610594575b50610252565b6105ab9060203d811161031757610307818361138b565b503861058e565b85513d88823e3d90fd5b508251637a851da960e11b8152fd5b634e487b7160e01b865260218352602486fd5b82516282b42960e81b8152fd5b8280fd5b5050346100e657816003193601126100e65760015490516001600160a01b039091168152602090f35b8383346100e657816003193601126100e65760155481516316c1973960e01b81523381860152610100946001600160a01b03939290919086908290602490829088165afa9586156109a1578596610972575b505060209485810151158015610965575b610956576106909061068b61168e565b61180f565b9261069961151f565b600f5460ff811690600682101561094357600382149182610934575b8215610906575b5050958596600014610890578581865180610831575b50600c5460c0880151875163a9059cbb60e01b8152338882019081526020810192909252938492871691839190829060400103925af1801561080657610814575b505b8160155416803b1561081057845163fb33ce8160e01b8152338582019081524260208201529091889183919082908490829060400103925af18015610806579087916107ee575b50507f920bb94eb3842a728db98228c375ff6b00c5bc5a54fac6736155517a0a20a61a60c08601519185519283523392a26015541692833b156107ea576107bb93859283855180978195829463159595fd60e01b8452339084016114bd565b03925af19081156107e157506107ce5750f35b6107d790611328565b6107de5780f35b80fd5b513d84823e3d90fd5b8480fd5b6107f790611328565b61080257858861075c565b8580fd5b85513d89823e3d90fd5b8680fd5b61082a90823d841161031757610307818361138b565b5087610713565b600b54875163a9059cbb60e01b81523388820190815260208101939093529384928390036040019183919088165af1801561080657610873575b8187916106d2565b61088990823d841161031757610307818361138b565b508761086b565b85816108d46108a5885160a08a01519061149a565b600b54885163a9059cbb60e01b8152338982019081526020810193909352948593918816928492839160400190565b03925af18015610806576108e9575b50610715565b6108ff90823d841161031757610307818361138b565b50876108e3565b8414915081610918575b5085886106bc565b60ff915060081c169560038710156105cb579560011485610910565b600654600954111592506106b5565b634e487b7160e01b875260218452602487fd5b509051637a851da960e11b8152fd5b5060e0810151151561067b565b610992929650803d1061099a575b61098a818361138b565b810190611435565b93858061066a565b503d610980565b83513d87823e3d90fd5b5050346100e657816003193601126100e65760145490516001600160a01b039091168152602090f35b9050346105eb57826003193601126105eb57610140925054906005549060065460075460085460095490600a549260018060a01b039485600b541695600c541696600d549881519a8b5260208b01528901526060880152608087015260a086015260c085015260e0840152610100830152610120820152f35b8383346100e657816003193601126100e657600f5460ff8116916010546011549160125493601354958251976006821015610ab15750875260c09750610a9d90602088019060081c60ff166113f5565b8501526060840152608083015260a0820152f35b634e487b7160e01b815260218a52602490fd5b5050346100e657816003193601126100e65760155490516001600160a01b039091168152602090f35b83346107de57806003193601126107de57610b0661168e565b610b0e61151f565b80f35b919050346105eb5760209081600319360112610db9578235928315610dab5760155482516316c1973960e01b815233838201526001600160a01b0391610100919082908290602490829087165afa918215610da1578892610d84575b50508481015115610d3e5780518611610d6d57610b8861151f565b60ff600f54166006811015610d5a5760028114159081610d4e575b50610d3e57610bb5879161068b61168e565b80518703610d195781868201528181525b8260155416803b156105eb57855163159595fd60e01b81529183918391829084908290610bf690338c84016114bd565b03925af18015610d0f57610cfb575b5050610c1385600a54611607565b600a55610c2b600754610c2587611649565b90611607565b600755600b54835163a9059cbb60e01b815233848201908152602081018890529092869284928390036040019183918b91165af1908115610cf1578691610cd4575b5015610ca15750907f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d591519283523392a280f35b82606492519162461bcd60e51b8352820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b6044820152fd5b610ceb9150843d861161031757610307818361138b565b38610c6d565b83513d88823e3d90fd5b610d0490611328565b610802578538610c05565b85513d84823e3d90fd5b858101610d2a8151610c258a611649565b9052610d37878251611607565b8152610bc6565b8351637a851da960e11b81528390fd5b60019150141538610ba3565b634e487b7160e01b885260218452602488fd5b83516318928cbf60e31b8152808401879052602490fd5b610d9a9250803d1061099a5761098a818361138b565b3880610b6d565b85513d8a823e3d90fd5b9051630db73cdf60e41b8152fd5b8380fd5b839150602092836003193601126105eb57813591610dd961151f565b60ff600f5416600681101561110957600181141590816110fd575b506110ef57600b5482516370a0823160e01b815233818401526001600160a01b0392918316908781602481855afa9081156108065787916110c2575b508581106110a6575086869160648651809481936323b872dd60e01b835233888401523060248401528a60448401525af190811561109c57869161107f575b5015611071578160155416835180916316c1973960e01b825233848301528160246101009485935afa918215610806578792611054575b505080870151610f7f57509380959394610ebe61168e565b610ec786611614565b926015541690600554823b15610db95760848492838851958694859363f8c4ee6d60e01b855233908501528c602485015289604485015260648401525af18015610f7557610f61575b50507ff94991dcbea6e8ac439cbc93bd9c62a4d39f04e0ad656df9a703f13552c2787f925b610f4185600a5461149a565b600a55610f508260075461149a565b60075582519485528401523392a280f35b610f6a90611328565b6107ea578486610f10565b84513d84823e3d90fd5b9190610f8961168e565b610f9b610f9586611614565b9361180f565b91610fa786845161149a565b8352878301610fb785825161149a565b90526015541690813b1561081057918691610fe89383875180968195829463159595fd60e01b8452339084016114bd565b03925af180156109a157611021575b507ff94991dcbea6e8ac439cbc93bd9c62a4d39f04e0ad656df9a703f13552c2787f929394610f35565b9361104d7ff94991dcbea6e8ac439cbc93bd9c62a4d39f04e0ad656df9a703f13552c2787f9495611328565b9392610ff7565b61106a9250803d1061099a5761098a818361138b565b8780610ea6565b82516307a4ced160e51b8152fd5b6110969150873d891161031757610307818361138b565b87610e6f565b84513d88823e3d90fd5b82604491878751926381ddee1b60e01b84528301526024820152fd5b90508781813d83116110e8575b6110d9818361138b565b81010312610810575188610e30565b503d6110cf565b9051637a851da960e11b8152fd5b60029150141586610df4565b634e487b7160e01b855260218252602485fd5b8284346107de57806003193601126107de5781519181600e5492600184811c9181861695861561122d575b602096878510811461121a578899509688969785829a5291826000146111f3575050600114611197575b505050611193929161118491038561138b565b519282849384528301906113d0565b0390f35b9190869350600e83527fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fd5b8284106111db5750505082010181611184611193611171565b8054848a0186015288955087949093019281016111c2565b60ff19168782015293151560051b8601909301935084925061118491506111939050611171565b634e487b7160e01b835260228a52602483fd5b92607f1692611147565b8284346107de57806003193601126107de578151918160025492600184811c918186169586156112fa575b602096878510811461121a578899509688969785829a5291826000146111f357505060011461129e57505050611193929161118491038561138b565b9190869350600283527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace5b8284106112e25750505082010181611184611193611171565b8054848a0186015288955087949093019281016112c9565b92607f1692611262565b8490346100e657816003193601126100e65790546001600160a01b03168152602090f35b67ffffffffffffffff811161133c57604052565b634e487b7160e01b600052604160045260246000fd5b610100810190811067ffffffffffffffff82111761133c57604052565b6040810190811067ffffffffffffffff82111761133c57604052565b90601f8019910116810190811067ffffffffffffffff82111761133c57604052565b60005b8381106113c05750506000910152565b81810151838201526020016113b0565b906020916113e9815180928185528580860191016113ad565b601f01601f1916010190565b9060038210156114025752565b634e487b7160e01b600052602160045260246000fd5b90816020910312611430575180151581036114305790565b600080fd5b90816101009103126114305760e06040519161145083611352565b805183526020810151602084015260408101516040840152606081015160608401526080810151608084015260a081015160a084015260c081015160c0840152015160e082015290565b919082018092116114a757565b634e487b7160e01b600052601160045260246000fd5b90929160e06101009161012084019560018060a01b0316845280516020850152602081015160408501526040810151606085015260608101516080850152608081015160a085015260a081015160c085015260c0810151828501520151910152565b600f805460ff811660068110156114025760058114908115611595575b50611591576011544210156115565750805460ff19169055565b60125442101561156e5750805460ff19166001179055565b6013544210156115865750805460ff19166002179055565b60ff19166003179055565b5050565b6004915014806115a6575b3861153c565b5060ff8160081c16600381101561140257600181149081156115c9575b506115a0565b6002915014386115c3565b818102929181159184041417156114a757565b81156115f1570490565b634e487b7160e01b600052601260045260246000fd5b919082039182116114a757565b60075480158015611641575b61163d5761163a91611631916115d4565b600a54906115e7565b90565b5090565b508115611620565b60075480158015611686575b61163d5790611663916115d4565b611670600a54809261149a565b6000198101919082116114a75761163a916115e7565b508115611655565b61169661176d565b6007549081151580611764575b6116b0575b505042601055565b60045490670de0b6b3a764000092836116c983856115d4565b04926116f3856116dc600a5495866115d4565b0480946116eb8260065461149a565b600655611607565b600a558315908115611709575b505050506116a8565b8461171391611607565b60045584840290848204861417156114a75761173a91611732916115e7565b60055461149a565b6005558281029281840414901517156114a757611756916115e7565b600855388080808080611700565b508015156116a3565b6012548042108015611801575b6117fb57601054908082106117f3575b506117ac429160135492818482116117eb575b6117a691611607565b92611607565b801580156117e3575b6117dc57670de0b6b3a7640000918281029281840414901517156114a75761163a916115e7565b5050600090565b5081156117b5565b84915061179d565b90503861178a565b50600090565b50601054601354111561177a565b604090815161181d81611352565b600080825260e0602092828482015282868201528260608201528260808201528260a08201528260c0820152015281518183015192848101519260608201519460808301519360a084015160e060c0860151950151958951998a9361188185611352565b845285840194855280840197898952606085019a8b526080850192835260a0850193845260c0850197885260e08501526118be600554998a611607565b9060075490816118d9575b5050505050505050505242905290565b6119b99761198d61195a6119a7946119556119186119ae99670de0b6b3a764000061190f8f9b641cdc195b9d60da1b9c516115d4565b0490519061149a565b9b61194a8d88516119288161136f565b60118152701c1bdcda5d1a5bdb941d5c98da185cd959607a1b898201526119dd565b600a549051906115d4565b6115e7565b809861198782865161196b8161136f565b600b81526a696e52656d61696e696e6760a81b878201526119dd565b51611607565b938492519161199b8361136f565b600583528201526119dd565b825161149a565b90528752825161149a565b90523880808681808080806118c9565b51906001600160a01b038216820361143057565b600091908291611a226040518092611a0e6020830195632d839cb360e21b87526040602485015260648401906113d0565b90604483015203601f19810183528261138b565b51906a636f6e736f6c652e6c6f675afa5056fea264697066735822122059422f4dd2d1ae79194b3ef7c61aa588f3c1eec6b7384f94b357e1e36763645464736f6c6343000814003360a0806040523461003657336080526104a7908161003c823960805181818160800152818160ec015281816101a901526103580152f35b600080fdfe604060808152600436101561001357600080fd5b60009060e08235811c908163159595fd146102ce57816316c19739146101d85781635cb0175c14610194578163f8c4ee6d146100bf575063fb33ce811461005957600080fd5b346100bb57806003193601126100bb576100716103bb565b6001600160a01b03906100a7337f000000000000000000000000000000000000000000000000000000000000000084161461040d565b168252816020526007602435918320015580f35b5080fd5b905034610190576080366003190112610190576007906100dd6103bb565b906001600160a01b03610113337f000000000000000000000000000000000000000000000000000000000000000083161461040d565b61011b6103d6565b9460243586526020860160443581528187016064358152606088019142835260808901938a855260a08a01958b875260c08b01978c89528b01988c8a52168b528a6020528a20985189555160018901555160028801555160038701555160048601555160058501555160068401555191015580f35b8280fd5b5050346100bb57816003193601126100bb57517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b9050346101905760203660031901126101905781610100936101f86103bb565b81846102026103d6565b82815282602082015282868201528260608201528260808201528260a08201528260c0820152015260018060a01b0316815280602052206102416103d6565b9080549384835260018201549060208401918252600283015490808501918252600384015490606086019182526004850154926080870193845260058601549460a0880195865288600760068901549860c08b01998a52015498019788528251998a525160208a015251908801525160608701525160808601525160a08501525160c08401525190820152f35b90503461019057610120366003190112610190576102ea6103bb565b6101003660231901126103b7576007916103026103d6565b936024358552602085016044358152818601606435815260608701906084358252608088019260a435845260a089019460c435865260c08a019660e43588528a019761010435895260018060a01b039061037f827f000000000000000000000000000000000000000000000000000000000000000016331461040d565b168b528a6020528a20985189555160018901555160028801555160038701555160048601555160058501555160068401555191015580f35b8380fd5b600435906001600160a01b03821682036103d157565b600080fd5b60405190610100820182811067ffffffffffffffff8211176103f757604052565b634e487b7160e01b600052604160045260246000fd5b1561041457565b60405162461bcd60e51b815260206004820152602f60248201527f506f736974696f6e2063616e206f6e6c7920626520736574206279207468652060448201526e1cdd1c99585b4818dbdb9d1c9858dd608a1b6064820152608490fdfea26469706673582212200e736f41d0f700841c64e931e5d2c65e65de0d66e07534a99153a88a69263f6d64736f6c63430008140033c65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a8a26469706673582212204022497e3322f4ad5fc6b3007e459f2d11bc31241919390d15e51a707fa1cdde64736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1866,
        "contract": "contracts/StreamFactory.sol:StreamFactory",
        "label": "acceptedTokens",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1874,
        "contract": "contracts/StreamFactory.sol:StreamFactory",
        "label": "streamId",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1877,
        "contract": "contracts/StreamFactory.sol:StreamFactory",
        "label": "params",
        "offset": 0,
        "slot": "2",
        "type": "t_struct(Params)1862_storage"
      },
      {
        "astId": 1881,
        "contract": "contracts/StreamFactory.sol:StreamFactory",
        "label": "streams",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1883,
        "contract": "contracts/StreamFactory.sol:StreamFactory",
        "label": "frozen",
        "offset": 0,
        "slot": "12",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Params)1862_storage": {
        "encoding": "inplace",
        "label": "struct StreamFactory.Params",
        "members": [
          {
            "astId": 1845,
            "contract": "contracts/StreamFactory.sol:StreamFactory",
            "label": "streamCreationFee",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1847,
            "contract": "contracts/StreamFactory.sol:StreamFactory",
            "label": "streamCreationFeeToken",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 1849,
            "contract": "contracts/StreamFactory.sol:StreamFactory",
            "label": "exitFeePercent",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1851,
            "contract": "contracts/StreamFactory.sol:StreamFactory",
            "label": "minWaitingDuration",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 1853,
            "contract": "contracts/StreamFactory.sol:StreamFactory",
            "label": "minBootstrappingDuration",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 1855,
            "contract": "contracts/StreamFactory.sol:StreamFactory",
            "label": "minStreamDuration",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 1857,
            "contract": "contracts/StreamFactory.sol:StreamFactory",
            "label": "feeCollector",
            "offset": 0,
            "slot": "6",
            "type": "t_address"
          },
          {
            "astId": 1859,
            "contract": "contracts/StreamFactory.sol:StreamFactory",
            "label": "protocolAdmin",
            "offset": 0,
            "slot": "7",
            "type": "t_address"
          },
          {
            "astId": 1861,
            "contract": "contracts/StreamFactory.sol:StreamFactory",
            "label": "tosVersion",
            "offset": 0,
            "slot": "8",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}