{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard ERC20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\n */\ninterface IERC20Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender(address spender);\n}\n\n/**\n * @dev Standard ERC721 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\n */\ninterface IERC721Errors {\n    /**\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\n     * Used in balance queries.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721InvalidOwner(address owner);\n\n    /**\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721NonexistentToken(uint256 tokenId);\n\n    /**\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param tokenId Identifier number of a token.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC721InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC721InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC721InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC721InvalidOperator(address operator);\n}\n\n/**\n * @dev Standard ERC1155 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\n */\ninterface IERC1155Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC1155InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC1155InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC1155MissingApprovalForAll(address operator, address owner);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC1155InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC1155InvalidOperator(address operator);\n\n    /**\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n     * Used in batch transfers.\n     * @param idsLength Length of the array of token identifiers\n     * @param valuesLength Length of the array of token amounts\n     */\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC20Metadata} from \"./extensions/IERC20Metadata.sol\";\nimport {Context} from \"../../utils/Context.sol\";\nimport {IERC20Errors} from \"../../interfaces/draft-IERC6093.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n */\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\n    mapping(address account => uint256) private _balances;\n\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer(address to, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `value`.\n     */\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        if (to == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(from, to, value);\n    }\n\n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _update(address from, address to, uint256 value) internal virtual {\n        if (from == address(0)) {\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            _totalSupply += value;\n        } else {\n            uint256 fromBalance = _balances[from];\n            if (fromBalance < value) {\n                revert ERC20InsufficientBalance(from, fromBalance, value);\n            }\n            unchecked {\n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                _balances[from] = fromBalance - value;\n            }\n        }\n\n        if (to == address(0)) {\n            unchecked {\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                _totalSupply -= value;\n            }\n        } else {\n            unchecked {\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                _balances[to] += value;\n            }\n        }\n\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _mint(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(address(0), account, value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n     * Relies on the `_update` mechanism.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead\n     */\n    function _burn(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        _update(account, address(0), value);\n    }\n\n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        _approve(owner, spender, value, true);\n    }\n\n    /**\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n     *\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     * ```\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     *     super._approve(owner, spender, value, true);\n     * }\n     * ```\n     *\n     * Requirements are the same as {_approve}.\n     */\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\n        if (owner == address(0)) {\n            revert ERC20InvalidApprover(address(0));\n        }\n        if (spender == address(0)) {\n            revert ERC20InvalidSpender(address(0));\n        }\n        _allowances[owner][spender] = value;\n        if (emitEvent) {\n            emit Approval(owner, spender, value);\n        }\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            if (currentAllowance < value) {\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\n            }\n            unchecked {\n                _approve(owner, spender, currentAllowance - value, false);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "contracts/ERC20Mock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract ERC20Mock is ERC20 {\n    constructor(\n        string memory _name,\n        string memory _symbol\n    ) ERC20(_name, _symbol) {}\n\n    // Add the mint function\n    function mint(address to, uint256 amount) public {\n        _mint(to, amount);\n    }\n\n    function transferFrom(address from, address to, uint256 amount) public override returns (bool) {\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    function transfer(address to, uint256 amount) public override returns (bool) {\n        _transfer(msg.sender, to, amount);\n        return true;\n    }\n}\n"
    },
    "contracts/PositionStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\nimport \"./PositionTypes.sol\";   \n\ncontract PositionStorage {\n    using PositionTypes for PositionTypes.Position;\n\n    mapping(address => PositionTypes.Position) private positions;\n    address public immutable streamContractAddress;\n\n    constructor() {\n        streamContractAddress = msg.sender;\n    }\n\n    function getPosition(address _owner) external view returns (PositionTypes.Position memory) {\n        return positions[_owner];\n    }\n\n    modifier onlySender() {\n        require(msg.sender == streamContractAddress, \"Position can only be set by the stream contract\");\n        _;\n    }\n\n    function createPosition(\n        address owner,\n        uint256 inBalance,\n        uint256 shares,\n        uint256 index\n    ) external onlySender {\n        positions[owner] = PositionTypes.Position(inBalance, shares, index, block.timestamp, 0, 0, 0, 0);\n    }\n\n    function updatePosition(\n        address owner,\n        PositionTypes.Position memory position\n    ) external onlySender {\n        positions[owner] = position;\n    }\n\n    function setExitDate(address owner, uint256 exitDate) external onlySender {\n        positions[owner].exitDate = exitDate;\n    }\n}\n"
    },
    "contracts/PositionTypes.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\nlibrary PositionTypes {\n    struct Position {\n        uint256 inBalance;\n        uint256 shares;\n        uint256 index;\n        uint256 lastUpdateTime;\n        uint256 pendingReward;\n        uint256 spentIn;\n        uint256 purchased;\n        uint256 exitDate;\n    }\n} "
    },
    "contracts/Stream.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\nimport \"./PositionStorage.sol\";\nimport \"./PositionTypes.sol\";\nimport \"./StreamEvents.sol\";\nimport \"./StreamErrors.sol\";\nimport \"./StreamTypes.sol\";\ninterface IERC20 {\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address to, uint256 amount) external returns (bool);\n}\n\ncontract Stream is IStreamErrors, IStreamEvents {\n    address public creator;\n    address public positionStorageAddress;\n    string public name;\n    uint256 private constant MIN_WAITING_DURATION = 10 seconds;\n    uint256 private constant MIN_BOOTSTRAPPING_DURATION = 10 seconds;\n    uint256 private constant MIN_STREAM_DURATION = 50 seconds;\n\n    IERC20 public token;\n    IStreamTypes.StreamState public streamState;\n    IStreamTypes.StreamMetadata public streamMetadata;\n    IStreamTypes.StatusInfo public streamStatus;\n\n    PositionStorage public positionStorage;\n    // constructor should return its address\n    constructor(\n        uint256 _streamOutAmount,\n        address _streamOutDenom,\n        uint256 _bootstrappingStartTime,\n        uint256 _streamStartTime,\n        uint256 _streamEndTime,\n        uint256 _threshold,\n        string memory _name,\n        address _inDenom,\n        address _creator\n    ) {\n        // validateStreamTimes(block.timestamp, _bootstrappingStartTime, _streamStartTime, _streamEndTime);\n\n        // // Check if the factory sent required amount of out_amount\n        // IERC20 streamOutDenom = IERC20(_streamOutDenom);\n        // if (streamOutDenom.balanceOf(address(this)) < _streamOutAmount) {\n        //     revert InsufficientOutAmount();\n        // }\n        // creator = _creator;\n        // positionStorage = new PositionStorage();\n        // positionStorageAddress = address(positionStorage);\n        \n        // // Validate _inDenom\n        // try IERC20(_inDenom).balanceOf(msg.sender) returns (uint256) {\n        //     token = IERC20(_inDenom);\n        // } catch {\n        //     revert InvalidStreamOutDenom();\n        // }\n\n        // // Validate _streamOutDenom\n        // try IERC20(_streamOutDenom).balanceOf(msg.sender) returns (uint256) {\n        //     token = IERC20(_streamOutDenom);\n        // } catch {\n        //     revert InvalidStreamOutDenom();\n        // }\n\n        // streamState = IStreamTypes.StreamState({\n        //     distIndex: 0,\n        //     outRemaining: _streamOutAmount,\n        //     inDenom: _inDenom,\n        //     streamOutDenom: _streamOutDenom,\n        //     inSupply: 0,\n        //     spentIn: 0,\n        //     shares: 0,\n        //     currentStreamedPrice: 0,\n        //     threshold: _threshold\n        // });\n\n        // streamMetadata = IStreamTypes.StreamMetadata({\n        //     name: _name\n        // });\n\n        // streamStatus = IStreamTypes.StatusInfo({\n        //     mainStatus: IStreamTypes.Status.Waiting,\n        //     finalized: IStreamTypes.FinalizedStatus.None,\n        //     lastUpdated: block.timestamp,\n        //     bootstrappingStartTime: _bootstrappingStartTime,\n        //     streamStartTime: _streamStartTime,\n        //     streamEndTime: _streamEndTime\n        // });\n    }\n\n    function validateStreamTimes(\n        uint256 nowTime,\n        uint256 _bootstrappingStartTime,\n        uint256 _startTime,\n        uint256 _endTime\n    ) internal pure {\n        if (nowTime > _bootstrappingStartTime) revert InvalidBootstrappingStartTime();\n        if (_bootstrappingStartTime > _startTime) revert InvalidStreamStartTime();\n        if (_startTime > _endTime) revert InvalidStreamEndTime();\n        if (_endTime - _startTime < MIN_STREAM_DURATION) revert StreamDurationTooShort();\n        if (_startTime - _bootstrappingStartTime < MIN_BOOTSTRAPPING_DURATION) revert BootstrappingDurationTooShort();\n        if (_bootstrappingStartTime - nowTime < MIN_WAITING_DURATION) revert WaitingDurationTooShort();\n    }\n\n    function calculateDiff() internal view returns (uint256) {\n        // If the stream is not started yet or already ended, return 0\n        if (block.timestamp < streamStatus.streamStartTime || streamStatus.lastUpdated >= streamStatus.streamEndTime) {\n            return 0;\n        }\n\n        // If lastUpdated is before start time, set it to start time\n        uint256 effectiveLastUpdated = streamStatus.lastUpdated;\n        if (effectiveLastUpdated < streamStatus.streamStartTime) {\n            effectiveLastUpdated = streamStatus.streamStartTime;\n        }\n\n        // If current time is past end time, use end time instead\n        uint256 effectiveNow = block.timestamp;\n        if (effectiveNow > streamStatus.streamEndTime) {\n            effectiveNow = streamStatus.streamEndTime;\n        }\n\n        uint256 numerator = effectiveNow - effectiveLastUpdated;\n        uint256 denominator = streamStatus.streamEndTime - effectiveLastUpdated;\n\n        if (denominator == 0 || numerator == 0) {\n            return 0;\n        }\n        // Return ratio of time elapsed since last update compared to total remaining time\n        return (numerator * 1e18) / denominator;\n    }\n\n    function syncStreamStatus() internal {\n        // Don't update if stream is in a final state\n        if (streamStatus.mainStatus == IStreamTypes.Status.Cancelled ||\n            (streamStatus.mainStatus == IStreamTypes.Status.Finalized && \n            (streamStatus.finalized == IStreamTypes.FinalizedStatus.Streamed || \n             streamStatus.finalized == IStreamTypes.FinalizedStatus.Refunded))) {\n            return;\n        }\n\n        // Update status based on current timestamp\n        if (block.timestamp < streamStatus.bootstrappingStartTime) {\n            streamStatus.mainStatus = IStreamTypes.Status.Waiting;\n        } \n        else if (block.timestamp >= streamStatus.bootstrappingStartTime && \n                 block.timestamp < streamStatus.streamStartTime) {\n            streamStatus.mainStatus = IStreamTypes.Status.Bootstrapping;\n        }\n        else if (block.timestamp >= streamStatus.streamStartTime && \n                 block.timestamp < streamStatus.streamEndTime) {\n            streamStatus.mainStatus = IStreamTypes.Status.Active;\n        }\n        else if (block.timestamp >= streamStatus.streamEndTime) {\n            streamStatus.mainStatus = IStreamTypes.Status.Ended;\n        }\n    }\n\n    function computeSharesAmount(uint256 amountIn, bool roundUp) internal view returns (uint256) {\n        if (streamState.shares == 0 || amountIn == 0) {\n            return amountIn;\n        }\n        \n        uint256 shares = streamState.shares * amountIn;\n        if (roundUp) {\n            return (shares + streamState.inSupply - 1) / streamState.inSupply;\n        } else {\n            return shares / streamState.inSupply;\n        }\n    }\n\n    function syncStream() internal {\n        uint256 diff = calculateDiff();\n\n        if (streamState.shares > 0 && diff > 0) {\n            // Calculate new distribution balance and spent in amount\n            uint256 newDistributionBalance = (streamState.outRemaining * diff) / 1e18;\n            uint256 spentIn = (streamState.inSupply * diff) / 1e18;\n\n            // Update state variables\n            streamState.spentIn += spentIn;\n            streamState.inSupply -= spentIn;\n\n            if (newDistributionBalance > 0) {\n                streamState.outRemaining -= newDistributionBalance;\n                // Update distribution index (shares are in base units, multiply by 1e18 for precision)\n                streamState.distIndex += (newDistributionBalance * 1e18) / streamState.shares;\n                // Update current streamed price\n                streamState.currentStreamedPrice = (spentIn * 1e18) / newDistributionBalance;\n            }\n        }\n\n        streamStatus.lastUpdated = block.timestamp;\n    }\n\n    function subscribe(uint256 amountIn) external payable {\n        // Get current status\n        syncStreamStatus();\n        if (streamStatus.mainStatus != IStreamTypes.Status.Bootstrapping && \n            streamStatus.mainStatus != IStreamTypes.Status.Active) {\n            revert OperationNotAllowed();\n        }\n        // Validate if sender has enough tokens\n        IERC20 streamInDenom = IERC20(streamState.inDenom);\n        uint256 streamInDenomBalance = streamInDenom.balanceOf(msg.sender);\n        if (streamInDenomBalance < amountIn) {\n            revert InsufficientTokenPayment(amountIn, streamInDenomBalance);\n        }\n        // Transfer tokens from sender to this contract\n        bool success = streamInDenom.transferFrom(msg.sender, address(this), amountIn);\n        if (!success) {\n            revert PaymentFailed();\n        }\n\n        // Query position from PositionStorage contract\n        PositionTypes.Position memory position = positionStorage.getPosition(msg.sender);\n        uint256 newShares = 0;\n\n        if (position.shares == 0) {\n            // New position case\n            // First sync the stream to ensure new tokens don't participate in previous distribution\n            syncStream();\n\n            // Calculate new shares (we'll implement this next)\n            newShares = computeSharesAmount(amountIn, false);\n            positionStorage.createPosition(msg.sender, amountIn, newShares, streamState.distIndex);\n        }\n        else {\n            // Sync stream to ensure new tokens don't participate in previous distribution\n            syncStream();\n            // Calculate new shares (we'll implement this next)\n            newShares = computeSharesAmount(amountIn, false);\n            position = syncPosition(position);\n            position.inBalance += amountIn;\n            position.shares += newShares;\n            // Save position to PositionStorage contract\n            positionStorage.updatePosition(msg.sender, position);\n        }\n\n        // Update StreamState\n        streamState.inSupply += amountIn;\n        streamState.shares += newShares;\n\n        // Emit event\n        emit Subscribed(msg.sender, amountIn, newShares);\n    }\n\n    function syncPosition(PositionTypes.Position memory position) internal view returns (PositionTypes.Position memory) {\n        // Create a new position in memory to store the updated values\n        PositionTypes.Position memory updatedPosition = PositionTypes.Position({\n            inBalance: position.inBalance,\n            shares: position.shares,\n            index: position.index,\n            lastUpdateTime: position.lastUpdateTime,\n            pendingReward: position.pendingReward,\n            spentIn: position.spentIn,\n            purchased: position.purchased,\n            exitDate: position.exitDate\n        });\n\n        // Calculate index difference for distributions since last update\n        uint256 indexDiff = streamState.distIndex - updatedPosition.index;\n        uint256 spent = 0;\n        uint256 purchased = 0;\n\n        // Only process if there are shares in the stream\n        if (streamState.shares > 0) {\n            // Calculate purchased amount based on position shares and index difference\n            uint256 positionPurchased = (updatedPosition.shares * indexDiff) / 1e18 + updatedPosition.pendingReward;\n\n            // Calculate remaining balance based on current shares ratio\n            uint256 inRemaining = (streamState.inSupply * updatedPosition.shares) / streamState.shares;\n\n            // Calculate spent amount\n            spent = updatedPosition.inBalance - inRemaining;\n            updatedPosition.spentIn += spent;\n            updatedPosition.inBalance = inRemaining;\n\n            // Update purchased amount\n            purchased = positionPurchased;\n            updatedPosition.purchased += purchased;\n        }\n\n        // Update position tracking\n        updatedPosition.index = streamState.distIndex;\n        updatedPosition.lastUpdateTime = block.timestamp;\n\n        return updatedPosition;\n    }\n\n    function withdraw(uint256 cap) external {\n        if (cap == 0) {\n            revert InvalidWithdrawAmount();\n        }\n        PositionTypes.Position memory position = positionStorage.getPosition(msg.sender);\n        if (position.shares == 0) {\n            revert OperationNotAllowed();\n        }\n\n        if (cap > position.inBalance) {\n            revert WithdrawAmountExceedsBalance(cap);\n        }\n\n        syncStreamStatus();\n        if (streamStatus.mainStatus != IStreamTypes.Status.Active && streamStatus.mainStatus != IStreamTypes.Status.Bootstrapping) {\n            revert OperationNotAllowed();\n        }\n\n        syncStream();\n        syncPosition(position);\n\n        if (cap == position.inBalance) {\n            position.shares = 0;\n            position.inBalance = 0;\n        } else {\n            position.shares = position.shares - computeSharesAmount(cap, true);\n            position.inBalance = position.inBalance - cap;\n        }\n\n        positionStorage.updatePosition(msg.sender, position);\n        streamState.inSupply = streamState.inSupply - cap;\n        streamState.shares = streamState.shares - computeSharesAmount(cap, true);\n        IERC20 streamInDenom = IERC20(streamState.inDenom);\n        bool success = streamInDenom.transfer(msg.sender, cap);\n        require(success, \"Transfer failed\");\n        emit Withdrawn(msg.sender, cap);\n    }\n\n    function exitStream() external {\n        PositionTypes.Position memory position = positionStorage.getPosition(msg.sender);\n        if (position.shares == 0 || position.exitDate > 0) {\n            revert OperationNotAllowed();\n        }\n        // Sync stream\n        syncStream();\n        // Sync position\n        position = syncPosition(position);\n        // Check status\n        syncStreamStatus();\n        // Exit is only allowed if stream is ended or finalized\n        if (streamStatus.mainStatus != IStreamTypes.Status.Ended && streamStatus.mainStatus != IStreamTypes.Status.Finalized) {\n            revert OperationNotAllowed();\n        }\n        // Refund in_amount remaining if any in position\n        if (position.inBalance > 0) {\n            IERC20 streamInDenom = IERC20(streamState.inDenom);\n            streamInDenom.transfer(msg.sender, position.inBalance);\n        }\n        // send out_amount earned to msg.sender\n        IERC20 streamOutDenom = IERC20(streamState.streamOutDenom);\n        streamOutDenom.transfer(msg.sender, position.purchased-1);\n        // Set exit date\n        positionStorage.setExitDate(msg.sender, block.timestamp);\n        emit Exited(msg.sender, position.purchased);\n    }\n\n    function finalizeStream() external {\n        // Check is sender is the creator\n        if (msg.sender != creator) {\n            revert Unauthorized();\n        }\n        // Check status\n        syncStreamStatus();\n        // Finalize is only allowed if stream is ended \n        if (streamStatus.mainStatus != IStreamTypes.Status.Ended) {\n            revert OperationNotAllowed();\n        }\n        // Sync stream\n        syncStream();\n\n        //Send total spent in to creator\n        IERC20 streamInDenom = IERC20(streamState.inDenom);\n        streamInDenom.transfer(creator, streamState.spentIn);\n        // Send total out_remaining to creator if more than 0\n        if (streamState.outRemaining > 0) {\n            IERC20 streamOutDenom = IERC20(streamState.streamOutDenom);\n            streamOutDenom.transfer(creator, streamState.outRemaining);\n        }\n        // Set stream status to finalized\n        streamStatus.mainStatus = IStreamTypes.Status.Finalized;\n        streamStatus.finalized = IStreamTypes.FinalizedStatus.Streamed;\n        emit StreamFinalized(creator, streamState.spentIn, streamState.outRemaining);\n    }\n\n    function syncStreamExternal() external {\n        syncStream();\n    }\n    \n}\n\n\n\n"
    },
    "contracts/StreamErrors.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\ninterface IStreamErrors {\n    error InvalidBootstrappingStartTime();\n    error InvalidStreamStartTime();\n    error InvalidStreamEndTime();\n    error StreamDurationTooShort();\n    error BootstrappingDurationTooShort();\n    error WaitingDurationTooShort();\n    error InsufficientTokenPayment(uint256 requiredTokenAmount, uint256 tokenBalance);\n    error InvalidStreamOutDenom();\n    error InvalidInDenom();\n    error PaymentFailed();\n    error OperationNotAllowed();\n    error Unauthorized();\n    error InvalidWithdrawAmount();\n    error WithdrawAmountExceedsBalance(uint256 cap);\n    error InsufficientOutAmount();\n} "
    },
    "contracts/StreamEvents.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\nimport \"./StreamTypes.sol\";\n\ninterface IStreamEvents {\n        event StreamCreated(\n        uint256 indexed streamOutAmount,\n        uint256 indexed bootstrappingStartTime,\n        uint256 streamStartTime,\n        uint256 streamEndTime,\n        address indexed streamAddress\n    );\n    \n    event StreamSynced(\n        IStreamTypes.Status mainStatus,\n        IStreamTypes.FinalizedStatus finalized,\n        uint256 lastUpdated\n    );\n    \n    event Subscribed(address indexed subscriber, uint256 amountIn, uint256 newShares);\n    event Withdrawn(address indexed subscriber, uint256 amountIn);\n    event Exited(address indexed subscriber, uint256 purchased);\n    event StreamFinalized(address indexed creator, uint256 spentIn, uint256 outRemaining);\n    event ParamsUpdated();\n    event FeeCollectorUpdated(address newFeeCollector);\n    event ProtocolAdminUpdated(address newProtocolAdmin);\n    event FrozenStateUpdated(bool frozen);\n}"
    },
    "contracts/StreamFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\nimport \"./Stream.sol\";\nimport \"./StreamEvents.sol\";\n\ncontract StreamFactory is IStreamEvents {\n    struct Params {\n        uint256 streamCreationFee;    // Fixed fee to create a stream\n        address streamCreationFeeToken; // Token used for creation fee,\n        uint256 exitFeePercent;       // Fee percentage when exiting a stream\n        uint256 minWaitingDuration;   // Minimum waiting period\n        uint256 minBootstrappingDuration;  // Minimum bootstrapping period\n        uint256 minStreamDuration;    // Minimum duration for a stream\n        address feeCollector;         // Address where fees are collected\n        address protocolAdmin;        // Admin address for protocol\n        string tosVersion;          // Terms of service version\n        bytes32 streamBytecodeHash; // Hash of the stream bytecode\n    }\n\n    mapping(address => bool) public acceptedTokens;\n    \n    address public constant NATIVE_TOKEN = address(0);\n\n    uint256 public streamId;\n    \n    Params public params;\n    mapping(address => bool) public streams;\n\n    bool public frozen;\n\n    constructor(\n        uint256 _streamCreationFee,\n        address _streamCreationFeeToken,\n        uint256 _exitFeePercent,\n        uint256 _minWaitingDuration,\n        uint256 _minBootstrappingDuration,\n        uint256 _minStreamDuration,\n        address[] memory _acceptedTokens,\n        address _feeCollector,\n        address _protocolAdmin,\n        string memory _tosVersion,\n        bytes32 _streamBytecodeHash\n    ) {\n        require(_feeCollector != address(0), \"Invalid fee collector\");\n        require(_protocolAdmin != address(0), \"Invalid protocol admin\");\n        \n        params = Params({\n            streamCreationFee: _streamCreationFee,\n            streamCreationFeeToken: _streamCreationFeeToken,\n            exitFeePercent: _exitFeePercent,\n            minWaitingDuration: _minWaitingDuration,\n            minBootstrappingDuration: _minBootstrappingDuration,\n            minStreamDuration: _minStreamDuration,\n            feeCollector: _feeCollector,\n            protocolAdmin: _protocolAdmin,\n            tosVersion: _tosVersion,\n            streamBytecodeHash: _streamBytecodeHash\n        });\n\n        // Set accepted tokens\n        for (uint i = 0; i < _acceptedTokens.length; i++) {\n            acceptedTokens[_acceptedTokens[i]] = true;\n        }\n        streamId = 0;\n    }\n\n    modifier onlyAdmin() {\n        require(msg.sender == params.protocolAdmin, \"Not the admin\");\n        _;\n    }\n\n    function updateParams(\n        uint256 _streamCreationFee,\n        uint256 _exitFeePercent,\n        uint256 _minWaitingDuration,\n        uint256 _minBootstrappingDuration,\n        uint256 _minStreamDuration,\n        string memory _tosVersion\n    ) external onlyAdmin {\n        params.streamCreationFee = _streamCreationFee;\n        params.exitFeePercent = _exitFeePercent;\n        params.minWaitingDuration = _minWaitingDuration;\n        params.minBootstrappingDuration = _minBootstrappingDuration;\n        params.minStreamDuration = _minStreamDuration;\n        params.tosVersion = _tosVersion;\n        \n        emit ParamsUpdated();\n    }\n\n    function updateFeeCollector(address _feeCollector) external onlyAdmin {\n        require(_feeCollector != address(0), \"Invalid fee collector\");\n        params.feeCollector = _feeCollector;\n        emit FeeCollectorUpdated(_feeCollector);\n    }\n\n    function updateProtocolAdmin(address _protocolAdmin) external onlyAdmin {\n        require(_protocolAdmin != address(0), \"Invalid protocol admin\");\n        params.protocolAdmin = _protocolAdmin;\n        emit ProtocolAdminUpdated(_protocolAdmin);\n    }\n\n    function updateAcceptedTokens(address[] calldata tokens_to_add, address[] calldata tokens_to_remove) external onlyAdmin {\n        for (uint i = 0; i < tokens_to_add.length; i++) {\n            acceptedTokens[tokens_to_add[i]] = true;\n        }\n        for (uint i = 0; i < tokens_to_remove.length; i++) {\n            acceptedTokens[tokens_to_remove[i]] = false;\n        }\n    }\n\n    function isAcceptedToken(address token) public view returns (bool) {\n        return acceptedTokens[token];\n    }\n\n    function createStream(\n        uint256 _streamOutAmount,\n        address _streamOutDenom,\n        uint256 _bootstrappingStartTime,\n        uint256 _streamStartTime,\n        uint256 _streamEndTime,\n        uint256 _threshold,\n        string memory _name,\n        address _inDenom,\n        string memory _tosVersion,\n        bytes32 _salt\n    ) external payable {\n        // Check if contract is accepting new streams (not frozen)\n        require(!frozen, \"Contract is frozen\");\n        \n        // Validate input parameters\n        require(_streamOutAmount > 0, \"Zero out supply not allowed\");\n        require(acceptedTokens[_inDenom], \"Stream in denom not accepted\");\n        \n        // Validate time parameters\n        require(_bootstrappingStartTime >= block.timestamp, \"Invalid bootstrapping start time\");\n        require(_streamStartTime > _bootstrappingStartTime, \"Stream start must be after bootstrapping\");\n        require(_streamEndTime > _streamStartTime, \"Stream end must be after start\");\n        \n        // Validate durations against minimum requirements\n        require(_streamStartTime - _bootstrappingStartTime >= params.minBootstrappingDuration, \n            \"Bootstrapping duration too short\");\n        require(_streamEndTime - _streamStartTime >= params.minStreamDuration,\n            \"Stream duration too short\");\n        \n        // Validate TOS version\n        require(keccak256(abi.encodePacked(_tosVersion)) == keccak256(abi.encodePacked(params.tosVersion)), \"Invalid ToS version\");\n\n        // Load creation fee\n        uint256 creationFee = params.streamCreationFee;\n        if (creationFee > 0) {\n            if (params.streamCreationFeeToken == address(0)) {\n                // Native token\n                require(msg.value >= creationFee, \"Insufficient native token\");\n                // Transfer fee to fee collector\n                require(payable(params.feeCollector).send(creationFee), \"Fee transfer failed\");\n            } else {\n                // ERC20 token\n                require(IERC20(params.streamCreationFeeToken).transferFrom(msg.sender, address(params.feeCollector), creationFee), \"Token transfer failed\");\n            }\n        }\n        // Increment stream id\n        // Predict stream address\n        streamId++;\n        bytes32 bytecodeHash = keccak256(type(Stream).creationCode);\n        address predictedAddress = predictAddress(address(this), _salt, bytecodeHash);\n\n        // Deploy new stream contract with all parameters\n        Stream newStream = new Stream{salt: _salt}(\n            _streamOutAmount,\n            _streamOutDenom,\n            _bootstrappingStartTime,\n            _streamStartTime,\n            _streamEndTime,\n            _threshold,\n            _name,\n            _inDenom,\n            msg.sender\n            );\n\n        require(address(newStream) == predictedAddress, \"Stream address prediction failed\");\n\n        // Transfer out denom to stream contract\n        require(IERC20(_streamOutDenom).transfer(address(newStream), _streamOutAmount), \"Token transfer failed\");\n\n        emit StreamCreated(\n            _streamOutAmount,\n            _bootstrappingStartTime,\n            _streamStartTime,\n            _streamEndTime,\n            address(newStream)\n        );\n    }\n\n    function isStream(address streamAddress) external view returns (bool) {\n        return streams[streamAddress];\n    }\n\n    // Optional: Add ability to transfer ownership\n    function transferOwnership(address newOwner) external onlyAdmin {\n        require(newOwner != address(0), \"Invalid new owner\");\n        params.protocolAdmin = newOwner;\n    }\n\n    function setFrozen(bool _frozen) external onlyAdmin {\n        frozen = _frozen;\n        emit FrozenStateUpdated(_frozen);\n    }\n\n    function predictAddress(address creator, bytes32 _salt, bytes32 bytecodeHash) public pure returns (address) {\n        return address(uint160(uint(keccak256(abi.encodePacked(\n            bytes1(0xff),\n            creator,\n            _salt,\n            bytecodeHash\n        )))));\n    }\n} "
    },
    "contracts/StreamTypes.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\ninterface IStreamTypes {\n    enum Status {\n        Waiting,\n        Bootstrapping, \n        Active,\n        Ended,\n        Finalized,\n        Cancelled\n    }\n\n    enum FinalizedStatus {\n        None,\n        Streamed,\n        Refunded\n    }\n\n    struct StatusInfo {\n        Status mainStatus;\n        FinalizedStatus finalized;\n        uint256 lastUpdated;\n        uint256 bootstrappingStartTime;\n        uint256 streamStartTime;\n        uint256 streamEndTime;\n    }\n\n    struct StreamMetadata {\n        string name;\n    }\n\n    struct StreamState {\n        uint256 outRemaining;\n        uint256 distIndex;\n        uint256 spentIn;\n        uint256 shares;\n        uint256 currentStreamedPrice;\n        uint256 threshold;\n        uint256 inSupply;\n        address inDenom;\n        address streamOutDenom;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "viaIR": true,
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}