{
  "address": "0xaC53Bcd1f2Bda2f942F0a0ED90d6c49f0657F034",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "factoryAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InsufficientOutAmount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requiredTokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenBalance",
          "type": "uint256"
        }
      ],
      "name": "InsufficientTokenPayment",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidExitCondition",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidImplementationAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInSupplyToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidOutSupplyToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidPoolOutSupplyAmount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "exitDate",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "InvalidPosition",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidPositionStorageAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidStreamFactoryAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidVestingCliffDuration",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidVestingDuration",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidWithdrawAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OperationNotAllowed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PaymentFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StreamFactoryAddressAlreadySet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Unauthorized",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "cap",
          "type": "uint256"
        }
      ],
      "name": "WithdrawAmountExceedsBalance",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "tokensAdded",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "tokensRemoved",
          "type": "address[]"
        }
      ],
      "name": "AcceptedTokensUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "streamAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "subscriber",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "refundedAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "exitTimestamp",
          "type": "uint256"
        }
      ],
      "name": "ExitRefunded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "streamAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "subscriber",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "purchased",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "spentIn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "exitTimestamp",
          "type": "uint256"
        }
      ],
      "name": "ExitStreamed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "streamImplementationAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "poolWrapperAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "feeCollector",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "protocolAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "streamCreationFeeToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "acceptedInSupplyTokens",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "streamCreationFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "exitFeeRatio",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minWaitingDuration",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minBootstrappingDuration",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minStreamDuration",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "tosVersion",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "vestingAddress",
          "type": "address"
        }
      ],
      "name": "FactoryInitialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newFeeCollector",
          "type": "address"
        }
      ],
      "name": "FeeCollectorUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "streamAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "refundedOutAmount",
          "type": "uint256"
        }
      ],
      "name": "FinalizedRefunded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "streamAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "creatorRevenue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "exitFeeAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "refundedOutAmount",
          "type": "uint256"
        }
      ],
      "name": "FinalizedStreamed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "frozen",
          "type": "bool"
        }
      ],
      "name": "FrozenStateUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "streamCreationFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "exitFeeRatio",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minWaitingDuration",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minBootstrappingDuration",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minStreamDuration",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "tosVersion",
          "type": "string"
        }
      ],
      "name": "ParamsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "factoryAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "poolWrapper",
          "type": "address"
        }
      ],
      "name": "PoolWrapperUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "streamAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "subscriber",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "positionInBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "positionShares",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "positionLastUpdateTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "positionSpentIn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "positionPurchased",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "positionIndex",
          "type": "uint256"
        }
      ],
      "name": "PositionSynced",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newProtocolAdmin",
          "type": "address"
        }
      ],
      "name": "ProtocolAdminUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "streamAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "outSupply",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "status",
          "type": "uint8"
        }
      ],
      "name": "StreamCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "streamFactoryAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "streamOutToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "streamInToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "streamAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "positionStorageAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "streamOutAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bootstrappingStartTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "streamStartTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "streamEndTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "threshold",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "metadataIpfsHash",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "tosVersion",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "streamId",
          "type": "uint16"
        }
      ],
      "name": "StreamCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "streamAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lastUpdated",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "distIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "outRemaining",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "inSupply",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "spentIn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "currentStreamedPrice",
          "type": "uint256"
        }
      ],
      "name": "StreamStateUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "streamAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lastUpdated",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "newStatus",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "distIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "outRemaining",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "inSupply",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "spentIn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "currentStreamedPrice",
          "type": "uint256"
        }
      ],
      "name": "StreamSynced",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "streamAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "subscriber",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "positionInBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "positionShares",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "positionLastUpdateTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "positionSpentIn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "positionPurchased",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "positionIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "streamInSupply",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "streamShares",
          "type": "uint256"
        }
      ],
      "name": "Subscribed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "factoryAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "vestingContract",
          "type": "address"
        }
      ],
      "name": "VestingContractDeployed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "streamAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "subscriber",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "positionInBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "positionShares",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "positionLastUpdateTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "positionSpentIn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "positionPurchased",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "positionIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "streamInSupply",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "streamShares",
          "type": "uint256"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "STREAM_FACTORY_ADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cancelStream",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cancelWithAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "creator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exitStream",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "finalizeStream",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getPosition",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "inBalance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "shares",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Decimal",
              "name": "index",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "lastUpdateTime",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Decimal",
              "name": "pendingReward",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "spentIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "purchased",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "exitDate",
              "type": "uint256"
            }
          ],
          "internalType": "struct PositionTypes.Position",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStreamState",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "outRemaining",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Decimal",
              "name": "distIndex",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "spentIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "shares",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Decimal",
              "name": "currentStreamedPrice",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "threshold",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "inSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "outSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastUpdated",
              "type": "uint256"
            }
          ],
          "internalType": "struct StreamTypes.StreamState",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStreamStatus",
      "outputs": [
        {
          "internalType": "enum StreamTypes.Status",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "creator",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "inSupplyToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "outSupplyToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "streamOutAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "threshold",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "bootstrappingStartTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "streamStartTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "streamEndTime",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "ipfsHash",
                  "type": "string"
                }
              ],
              "internalType": "struct StreamTypes.StreamMetadata",
              "name": "metadata",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "bool",
                  "name": "isVestingEnabled",
                  "type": "bool"
                },
                {
                  "internalType": "uint64",
                  "name": "vestingDuration",
                  "type": "uint64"
                }
              ],
              "internalType": "struct StreamTypes.VestingInfo",
              "name": "creatorVesting",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "bool",
                  "name": "isVestingEnabled",
                  "type": "bool"
                },
                {
                  "internalType": "uint64",
                  "name": "vestingDuration",
                  "type": "uint64"
                }
              ],
              "internalType": "struct StreamTypes.VestingInfo",
              "name": "beneficiaryVesting",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "poolOutSupplyAmount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct StreamTypes.PoolInfo",
              "name": "poolInfo",
              "type": "tuple"
            },
            {
              "internalType": "string",
              "name": "tosVersion",
              "type": "string"
            }
          ],
          "internalType": "struct StreamTypes.CreateStreamMessage",
          "name": "createStreamMessage",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "storageAddress",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "positionStorageAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "postStreamActions",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "poolOutSupplyAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct StreamTypes.PoolInfo",
          "name": "poolInfo",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "isVestingEnabled",
              "type": "bool"
            },
            {
              "internalType": "uint64",
              "name": "vestingDuration",
              "type": "uint64"
            }
          ],
          "internalType": "struct StreamTypes.VestingInfo",
          "name": "creatorVesting",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "isVestingEnabled",
              "type": "bool"
            },
            {
              "internalType": "uint64",
              "name": "vestingDuration",
              "type": "uint64"
            }
          ],
          "internalType": "struct StreamTypes.VestingInfo",
          "name": "beneficiaryVesting",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "streamMetadata",
      "outputs": [
        {
          "internalType": "string",
          "name": "ipfsHash",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "streamState",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "outRemaining",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal",
          "name": "distIndex",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "spentIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal",
          "name": "currentStreamedPrice",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "threshold",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "inSupply",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "outSupply",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastUpdated",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "streamStatus",
      "outputs": [
        {
          "internalType": "enum StreamTypes.Status",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "streamTimes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "bootstrappingStartTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "streamStartTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "streamEndTime",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "streamTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "inSupplyToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "outSupplyToken",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        }
      ],
      "name": "subscribe",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "syncPositionExternal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "syncStreamExternal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "cap",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xdd4a4d0780ce6921351d303f7fdb91f30aa4654fe446128ae6ee245e687c61bf",
  "receipt": {
    "to": null,
    "from": "0xB4eE189569597EFDB3bB48DB5ede8394d1D48e7b",
    "contractAddress": "0xaC53Bcd1f2Bda2f942F0a0ED90d6c49f0657F034",
    "transactionIndex": 10,
    "gasUsed": "2413395",
    "logsBloom": "0x
    "blockHash": "0xd9b71a503c60b7731fcc3c092d1817a33af7752a1f4b2da7a01354d4aebb15f7",
    "transactionHash": "0xdd4a4d0780ce6921351d303f7fdb91f30aa4654fe446128ae6ee245e687c61bf",
    "logs": [],
    "blockNumber": 24062176,
    "cumulativeGasUsed": "3629420",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2B3Db98aC7De966AE2422b26FB887870633C6E28"
  ],
  "numDeployments": 1,
  "solcInputHash": "f877331f615334fb5951804fa5553efb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factoryAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InsufficientOutAmount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requiredTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenBalance\",\"type\":\"uint256\"}],\"name\":\"InsufficientTokenPayment\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidExitCondition\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidImplementationAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInSupplyToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidOutSupplyToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPoolOutSupplyAmount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"exitDate\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"InvalidPosition\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPositionStorageAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidStreamFactoryAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidVestingCliffDuration\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidVestingDuration\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidWithdrawAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OperationNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PaymentFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StreamFactoryAddressAlreadySet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cap\",\"type\":\"uint256\"}],\"name\":\"WithdrawAmountExceedsBalance\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokensAdded\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokensRemoved\",\"type\":\"address[]\"}],\"name\":\"AcceptedTokensUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"streamAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"subscriber\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"refundedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"exitTimestamp\",\"type\":\"uint256\"}],\"name\":\"ExitRefunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"streamAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"subscriber\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"purchased\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"spentIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"exitTimestamp\",\"type\":\"uint256\"}],\"name\":\"ExitStreamed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"streamImplementationAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"poolWrapperAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeCollector\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"protocolAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"streamCreationFeeToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"acceptedInSupplyTokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"streamCreationFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"exitFeeRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minWaitingDuration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minBootstrappingDuration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minStreamDuration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"tosVersion\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vestingAddress\",\"type\":\"address\"}],\"name\":\"FactoryInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newFeeCollector\",\"type\":\"address\"}],\"name\":\"FeeCollectorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"streamAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"refundedOutAmount\",\"type\":\"uint256\"}],\"name\":\"FinalizedRefunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"streamAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"creatorRevenue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"exitFeeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"refundedOutAmount\",\"type\":\"uint256\"}],\"name\":\"FinalizedStreamed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenStateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"streamCreationFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"exitFeeRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minWaitingDuration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minBootstrappingDuration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minStreamDuration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"tosVersion\",\"type\":\"string\"}],\"name\":\"ParamsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"factoryAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"poolWrapper\",\"type\":\"address\"}],\"name\":\"PoolWrapperUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"streamAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"subscriber\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"positionInBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"positionShares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"positionLastUpdateTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"positionSpentIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"positionPurchased\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"positionIndex\",\"type\":\"uint256\"}],\"name\":\"PositionSynced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newProtocolAdmin\",\"type\":\"address\"}],\"name\":\"ProtocolAdminUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"streamAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"outSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"StreamCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"streamFactoryAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"streamOutToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"streamInToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"streamAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"positionStorageAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"streamOutAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bootstrappingStartTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"streamStartTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"streamEndTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metadataIpfsHash\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"tosVersion\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"streamId\",\"type\":\"uint16\"}],\"name\":\"StreamCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"streamAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastUpdated\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"distIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"outRemaining\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"spentIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentStreamedPrice\",\"type\":\"uint256\"}],\"name\":\"StreamStateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"streamAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastUpdated\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"newStatus\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"distIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"outRemaining\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"spentIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentStreamedPrice\",\"type\":\"uint256\"}],\"name\":\"StreamSynced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"streamAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"subscriber\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"positionInBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"positionShares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"positionLastUpdateTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"positionSpentIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"positionPurchased\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"positionIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"streamInSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"streamShares\",\"type\":\"uint256\"}],\"name\":\"Subscribed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"factoryAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vestingContract\",\"type\":\"address\"}],\"name\":\"VestingContractDeployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"streamAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"subscriber\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"positionInBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"positionShares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"positionLastUpdateTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"positionSpentIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"positionPurchased\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"positionIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"streamInSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"streamShares\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"STREAM_FACTORY_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelStream\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelWithAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exitStream\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalizeStream\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getPosition\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"inBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal\",\"name\":\"index\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateTime\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal\",\"name\":\"pendingReward\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"spentIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"purchased\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"exitDate\",\"type\":\"uint256\"}],\"internalType\":\"struct PositionTypes.Position\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStreamState\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"outRemaining\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal\",\"name\":\"distIndex\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"spentIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal\",\"name\":\"currentStreamedPrice\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdated\",\"type\":\"uint256\"}],\"internalType\":\"struct StreamTypes.StreamState\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStreamStatus\",\"outputs\":[{\"internalType\":\"enum StreamTypes.Status\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"inSupplyToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"outSupplyToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"streamOutAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bootstrappingStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"streamStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"streamEndTime\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"ipfsHash\",\"type\":\"string\"}],\"internalType\":\"struct StreamTypes.StreamMetadata\",\"name\":\"metadata\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isVestingEnabled\",\"type\":\"bool\"},{\"internalType\":\"uint64\",\"name\":\"vestingDuration\",\"type\":\"uint64\"}],\"internalType\":\"struct StreamTypes.VestingInfo\",\"name\":\"creatorVesting\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isVestingEnabled\",\"type\":\"bool\"},{\"internalType\":\"uint64\",\"name\":\"vestingDuration\",\"type\":\"uint64\"}],\"internalType\":\"struct StreamTypes.VestingInfo\",\"name\":\"beneficiaryVesting\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"poolOutSupplyAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct StreamTypes.PoolInfo\",\"name\":\"poolInfo\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"tosVersion\",\"type\":\"string\"}],\"internalType\":\"struct StreamTypes.CreateStreamMessage\",\"name\":\"createStreamMessage\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"storageAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"positionStorageAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"postStreamActions\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"poolOutSupplyAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct StreamTypes.PoolInfo\",\"name\":\"poolInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isVestingEnabled\",\"type\":\"bool\"},{\"internalType\":\"uint64\",\"name\":\"vestingDuration\",\"type\":\"uint64\"}],\"internalType\":\"struct StreamTypes.VestingInfo\",\"name\":\"creatorVesting\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isVestingEnabled\",\"type\":\"bool\"},{\"internalType\":\"uint64\",\"name\":\"vestingDuration\",\"type\":\"uint64\"}],\"internalType\":\"struct StreamTypes.VestingInfo\",\"name\":\"beneficiaryVesting\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"streamMetadata\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"ipfsHash\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"streamState\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"outRemaining\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal\",\"name\":\"distIndex\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"spentIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal\",\"name\":\"currentStreamedPrice\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdated\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"streamStatus\",\"outputs\":[{\"internalType\":\"enum StreamTypes.Status\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"streamTimes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bootstrappingStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"streamStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"streamEndTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"streamTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"inSupplyToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"outSupplyToken\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"subscribe\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"syncPositionExternal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"syncStreamExternal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cap\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Main contract for managing token streaming with vesting and pool creation capabilities\",\"kind\":\"dev\",\"methods\":{\"cancelStream()\":{\"details\":\"Allows the creator to cancel the stream during the Waiting phase\"},\"cancelWithAdmin()\":{\"details\":\"Allows the protocol admin to cancel the stream during Waiting, Bootstrapping, or Active phases\"},\"constructor\":{\"details\":\"Constructor to set the stream factory address\",\"params\":{\"factoryAddress\":\"Address of the stream factory\"}},\"exitStream()\":{\"details\":\"Allows users to exit the stream and receive their tokens based on stream outcome\"},\"finalizeStream()\":{\"details\":\"Allows the creator to finalize the stream after it has ended\"},\"getPosition(address)\":{\"details\":\"Get a user's position information\",\"params\":{\"user\":\"Address of the user\"},\"returns\":{\"_0\":\"The user's position\"}},\"getStreamState()\":{\"details\":\"Get the current stream state\",\"returns\":{\"_0\":\"The current stream state\"}},\"getStreamStatus()\":{\"details\":\"Get the current stream status\",\"returns\":{\"_0\":\"The current stream status\"}},\"initialize((address,address,address,uint256,uint256,uint256,uint256,uint256,(string),(bool,uint64),(bool,uint64),(uint256),string),address)\":{\"details\":\"Initializes the stream with the provided configuration\",\"params\":{\"createStreamMessage\":\"Stream creation parameters\",\"storageAddress\":\"Address of the position storage contract\"}},\"subscribe(uint256)\":{\"details\":\"Allows users to subscribe to the stream by providing input tokens\",\"params\":{\"amountIn\":\"Amount of input tokens to subscribe with\"}},\"syncPositionExternal(address)\":{\"details\":\"External function to sync a specific user's position\",\"params\":{\"user\":\"Address of the user whose position should be synced\"}},\"syncStreamExternal()\":{\"details\":\"External function to sync the stream state and status\"},\"withdraw(uint256)\":{\"details\":\"Allows users to withdraw their input tokens from the stream\",\"params\":{\"cap\":\"Amount of input tokens to withdraw\"}}},\"title\":\"Stream\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"STREAM_FACTORY_ADDRESS()\":{\"notice\":\"Immutable address of the stream factory that deployed this stream\"},\"cancelStream()\":{\"notice\":\"Only the creator can cancel during Waiting phase\"},\"cancelWithAdmin()\":{\"notice\":\"Only the protocol admin can call this function\"},\"creator()\":{\"notice\":\"Address of the stream creator\"},\"exitStream()\":{\"notice\":\"Users can exit after the stream has ended or been cancelled\"},\"finalizeStream()\":{\"notice\":\"Only the creator can call this function when stream status is Ended\"},\"initialize((address,address,address,uint256,uint256,uint256,uint256,uint256,(string),(bool,uint64),(bool,uint64),(uint256),string),address)\":{\"notice\":\"This function can only be called once by the stream factory\"},\"positionStorageAddress()\":{\"notice\":\"Address of the position storage contract\"},\"postStreamActions()\":{\"notice\":\"Post-stream actions like vesting and pool creation\"},\"streamMetadata()\":{\"notice\":\"Metadata associated with the stream\"},\"streamState()\":{\"notice\":\"Current state of the stream (distribution index, remaining tokens, etc.)\"},\"streamStatus()\":{\"notice\":\"Current status of the stream (Waiting, Bootstrapping, Active, etc.)\"},\"streamTimes()\":{\"notice\":\"Timing information for the stream phases\"},\"streamTokens()\":{\"notice\":\"Token addresses for input and output tokens\"},\"subscribe(uint256)\":{\"notice\":\"Users can subscribe during Bootstrapping or Active phases\"},\"syncPositionExternal(address)\":{\"notice\":\"Anyone can call this to update a user's position based on current stream state\"},\"syncStreamExternal()\":{\"notice\":\"Anyone can call this to update the stream state based on current time\"},\"withdraw(uint256)\":{\"notice\":\"Users can withdraw during Active or Bootstrapping phases\"}},\"notice\":\"This contract handles the core streaming logic including subscriptions, withdrawals, exits, and finalization\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/Stream.sol\":\"Stream\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/finance/VestingWallet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (finance/VestingWallet.sol)\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @title VestingWallet\\n * @dev This contract handles the vesting of Eth and ERC20 tokens for a given beneficiary. Custody of multiple tokens\\n * can be given to this contract, which will release the token to the beneficiary following a given vesting schedule.\\n * The vesting schedule is customizable through the {vestedAmount} function.\\n *\\n * Any token transferred to this contract will follow the vesting schedule as if they were locked from the beginning.\\n * Consequently, if the vesting has already started, any amount of tokens sent to this contract will (at least partly)\\n * be immediately releasable.\\n */\\ncontract VestingWallet is Context {\\n    event EtherReleased(uint256 amount);\\n    event ERC20Released(address indexed token, uint256 amount);\\n\\n    uint256 private _released;\\n    mapping(address => uint256) private _erc20Released;\\n    address private immutable _beneficiary;\\n    uint64 private immutable _start;\\n    uint64 private immutable _duration;\\n\\n    /**\\n     * @dev Set the beneficiary, start timestamp and vesting duration of the vesting wallet.\\n     */\\n    constructor(address beneficiaryAddress, uint64 startTimestamp, uint64 durationSeconds) payable {\\n        require(beneficiaryAddress != address(0), \\\"VestingWallet: beneficiary is zero address\\\");\\n        _beneficiary = beneficiaryAddress;\\n        _start = startTimestamp;\\n        _duration = durationSeconds;\\n    }\\n\\n    /**\\n     * @dev The contract should be able to receive Eth.\\n     */\\n    receive() external payable virtual {}\\n\\n    /**\\n     * @dev Getter for the beneficiary address.\\n     */\\n    function beneficiary() public view virtual returns (address) {\\n        return _beneficiary;\\n    }\\n\\n    /**\\n     * @dev Getter for the start timestamp.\\n     */\\n    function start() public view virtual returns (uint256) {\\n        return _start;\\n    }\\n\\n    /**\\n     * @dev Getter for the vesting duration.\\n     */\\n    function duration() public view virtual returns (uint256) {\\n        return _duration;\\n    }\\n\\n    /**\\n     * @dev Amount of eth already released\\n     */\\n    function released() public view virtual returns (uint256) {\\n        return _released;\\n    }\\n\\n    /**\\n     * @dev Amount of token already released\\n     */\\n    function released(address token) public view virtual returns (uint256) {\\n        return _erc20Released[token];\\n    }\\n\\n    /**\\n     * @dev Getter for the amount of releasable eth.\\n     */\\n    function releasable() public view virtual returns (uint256) {\\n        return vestedAmount(uint64(block.timestamp)) - released();\\n    }\\n\\n    /**\\n     * @dev Getter for the amount of releasable `token` tokens. `token` should be the address of an\\n     * IERC20 contract.\\n     */\\n    function releasable(address token) public view virtual returns (uint256) {\\n        return vestedAmount(token, uint64(block.timestamp)) - released(token);\\n    }\\n\\n    /**\\n     * @dev Release the native token (ether) that have already vested.\\n     *\\n     * Emits a {EtherReleased} event.\\n     */\\n    function release() public virtual {\\n        uint256 amount = releasable();\\n        _released += amount;\\n        emit EtherReleased(amount);\\n        Address.sendValue(payable(beneficiary()), amount);\\n    }\\n\\n    /**\\n     * @dev Release the tokens that have already vested.\\n     *\\n     * Emits a {ERC20Released} event.\\n     */\\n    function release(address token) public virtual {\\n        uint256 amount = releasable(token);\\n        _erc20Released[token] += amount;\\n        emit ERC20Released(token, amount);\\n        SafeERC20.safeTransfer(IERC20(token), beneficiary(), amount);\\n    }\\n\\n    /**\\n     * @dev Calculates the amount of ether that has already vested. Default implementation is a linear vesting curve.\\n     */\\n    function vestedAmount(uint64 timestamp) public view virtual returns (uint256) {\\n        return _vestingSchedule(address(this).balance + released(), timestamp);\\n    }\\n\\n    /**\\n     * @dev Calculates the amount of tokens that has already vested. Default implementation is a linear vesting curve.\\n     */\\n    function vestedAmount(address token, uint64 timestamp) public view virtual returns (uint256) {\\n        return _vestingSchedule(IERC20(token).balanceOf(address(this)) + released(token), timestamp);\\n    }\\n\\n    /**\\n     * @dev Virtual implementation of the vesting formula. This returns the amount vested, as a function of time, for\\n     * an asset given its total historical allocation.\\n     */\\n    function _vestingSchedule(uint256 totalAllocation, uint64 timestamp) internal view virtual returns (uint256) {\\n        if (timestamp < start()) {\\n            return 0;\\n        } else if (timestamp > start() + duration()) {\\n            return totalAllocation;\\n        } else {\\n            return (totalAllocation * (timestamp - start())) / duration();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3bc68a5aeb7b6ac30ebc323b0ab9965ae8b71fee660d4a2aaf5c6ee87afbedc9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create(0, 0x09, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create2(0, 0x09, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(add(ptr, 0x38), deployer)\\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\\n            mstore(add(ptr, 0x14), implementation)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\\n            mstore(add(ptr, 0x58), salt)\\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\\n            predicted := keccak256(add(ptr, 0x43), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt\\n    ) internal view returns (address predicted) {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x01f055f5c26ba25d7f83e9aa9ba877fbea4d0bf22227de046ea67494bc932999\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xb264c03a3442eb37a68ad620cefd1182766b58bee6cec40343480392d6b14d69\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"src/Stream.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/**\\n * @title Stream\\n * @author Adnan Deniz Corlu (@Ninjatosba)\\n * @notice Core streaming contract implementing time-based token distribution with dynamic pricing\\n * @dev StreamSwap enables continuous token swaps where price is determined by community participation\\n *      over time. Unlike traditional ICOs or Dutch auctions, StreamSwap uses a streaming mechanism\\n *      where tokens are distributed continuously based on subscription timing and amounts.\\n *      \\n *      Key Features:\\n *      - Dynamic pricing based on total participation and time\\n *      - Threshold mechanism to ensure minimum viable participation\\n *      - Bootstrapping phase for early commitment without immediate distribution\\n *      - Proportional withdrawal and exit mechanisms\\n *      - Post-stream vesting and automated liquidity pool creation\\n *      - Emergency controls for creator and protocol admin\\n *      \\n *      Stream Lifecycle:\\n *      1. Waiting: Stream created, no interactions allowed\\n *      2. Bootstrapping: Users can subscribe, no distribution yet\\n *      3. Active: Live streaming with continuous token distribution\\n *      4. Ended: Stream concluded, users can exit, creator can finalize\\n *      5. FinalizedStreamed: Stream finalized and streamed\\n *      6. FinalizedRefunded: Stream finalized and refunded\\n *      7. Cancelled: Emergency state, full refunds available\\n */\\n\\n\\nimport { PositionTypes } from \\\"./types/PositionTypes.sol\\\";\\nimport { IPositionStorage } from \\\"./interfaces/IPositionStorage.sol\\\";\\nimport { IStreamEvents } from \\\"./interfaces/IStreamEvents.sol\\\";\\nimport { IStreamErrors } from \\\"./interfaces/IStreamErrors.sol\\\";\\nimport { StreamTypes } from \\\"./types/StreamTypes.sol\\\";\\nimport { StreamFactory } from \\\"./StreamFactory.sol\\\";\\nimport { StreamFactoryTypes } from \\\"./types/StreamFactoryTypes.sol\\\";\\nimport { DecimalMath, Decimal } from \\\"./lib/math/DecimalMath.sol\\\";\\nimport { StreamMathLib } from \\\"./lib/math/StreamMathLib.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { IPoolWrapper } from \\\"./interfaces/IPoolWrapper.sol\\\";\\nimport { IVestingFactory } from \\\"./interfaces/IVestingFactory.sol\\\";\\nimport { PoolWrapperTypes } from \\\"./types/PoolWrapperTypes.sol\\\";\\n\\n/**\\n * @title Stream\\n * @dev Main contract for managing token streaming with vesting and pool creation capabilities\\n * @notice This contract handles the core streaming logic including subscriptions, withdrawals, exits, and finalization\\n */\\ncontract Stream is IStreamErrors, IStreamEvents {\\n    using SafeERC20 for IERC20;\\n\\n    // ============ State Variables ============\\n\\n    /// @notice Address of the stream creator\\n    address public creator;\\n\\n    /// @notice Immutable address of the stream factory that deployed this stream\\n    address public immutable STREAM_FACTORY_ADDRESS;\\n\\n    /// @notice Address of the position storage contract\\n    address public positionStorageAddress;\\n\\n    /// @notice Flag to ensure initialization happens only once\\n    bool private initialized;\\n\\n    /// @notice Current state of the stream (distribution index, remaining tokens, etc.)\\n    StreamTypes.StreamState public streamState;\\n\\n    /// @notice Token addresses for input and output tokens\\n    StreamTypes.StreamTokens public streamTokens;\\n\\n    /// @notice Metadata associated with the stream\\n    StreamTypes.StreamMetadata public streamMetadata;\\n\\n    /// @notice Current status of the stream (Waiting, Bootstrapping, Active, etc.)\\n    StreamTypes.Status public streamStatus;\\n\\n    /// @notice Timing information for the stream phases\\n    StreamTypes.StreamTimes public streamTimes;\\n\\n    /// @notice Post-stream actions like vesting and pool creation\\n    StreamTypes.PostStreamActions public postStreamActions;\\n\\n    // ============ Modifiers ============\\n\\n    /**\\n     * @dev Ensures the function can only be called once during initialization\\n     */\\n    modifier onlyOnce() {\\n        if (initialized) revert Unauthorized();\\n        _;\\n        initialized = true;\\n    }\\n\\n    /**\\n     * @dev Ensures only the stream factory can call the function\\n     */\\n    modifier onlyStreamFactory() {\\n        if (msg.sender != STREAM_FACTORY_ADDRESS) revert Unauthorized();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Ensures only the stream creator can call the function\\n     */\\n    modifier onlyCreator() {\\n        if (msg.sender != creator) revert Unauthorized();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Ensures only the protocol admin can call the function\\n     */\\n    modifier onlyProtocolAdmin() {\\n        StreamFactory factoryContract = StreamFactory(STREAM_FACTORY_ADDRESS);\\n        address protocolAdmin = factoryContract.getParams().protocolAdmin;\\n        if (msg.sender != protocolAdmin) revert Unauthorized();\\n        _;\\n    }\\n\\n    // ============ Constructor ============\\n\\n    /**\\n     * @dev Constructor to set the stream factory address\\n     * @param factoryAddress Address of the stream factory\\n     */\\n    constructor(address factoryAddress) {\\n        if (factoryAddress == address(0)) revert InvalidStreamFactoryAddress();\\n        STREAM_FACTORY_ADDRESS = factoryAddress;\\n    }\\n\\n    // ============ Initialization ============\\n\\n    /**\\n     * @dev Initializes the stream with the provided configuration\\n     * @param createStreamMessage Stream creation parameters\\n     * @param storageAddress Address of the position storage contract\\n     * @notice This function can only be called once by the stream factory\\n     */\\n    function initialize(\\n        StreamTypes.CreateStreamMessage memory createStreamMessage,\\n        address storageAddress\\n    ) external onlyOnce onlyStreamFactory {\\n        if (storageAddress == address(0)) revert InvalidPositionStorageAddress();\\n\\n        // Validate and set creator vesting info\\n        if (createStreamMessage.creatorVesting.isVestingEnabled) {\\n            postStreamActions.creatorVesting = createStreamMessage.creatorVesting;\\n        }\\n        \\n        // Validate and set beneficiary vesting info\\n        if (createStreamMessage.beneficiaryVesting.isVestingEnabled) {\\n            postStreamActions.beneficiaryVesting = createStreamMessage.beneficiaryVesting;\\n        }\\n        \\n        // Validate pool config\\n        if (createStreamMessage.poolInfo.poolOutSupplyAmount > 0) {\\n            // Validate pool amount is less than or equal to out amount\\n            if (createStreamMessage.poolInfo.poolOutSupplyAmount > createStreamMessage.streamOutAmount) {\\n                revert InvalidPoolOutSupplyAmount();\\n            }\\n            postStreamActions.poolInfo = createStreamMessage.poolInfo;\\n        }\\n        \\n        // Save position storage address\\n        positionStorageAddress = storageAddress;\\n        \\n        // Set creator\\n        creator = createStreamMessage.creator;\\n        \\n        // Initialize stream state\\n        streamState = StreamTypes.StreamState({\\n            distIndex: DecimalMath.fromNumber(0),\\n            outRemaining: createStreamMessage.streamOutAmount,\\n            inSupply: 0,\\n            spentIn: 0,\\n            shares: 0,\\n            currentStreamedPrice: DecimalMath.fromNumber(0),\\n            threshold: createStreamMessage.threshold,\\n            outSupply: createStreamMessage.streamOutAmount,\\n            lastUpdated: block.timestamp\\n        });\\n        \\n        // Initialize stream tokens\\n        streamTokens = StreamTypes.StreamTokens({\\n            inSupplyToken: createStreamMessage.inSupplyToken,\\n            outSupplyToken: createStreamMessage.outSupplyToken\\n        });\\n        \\n        // Initialize stream metadata\\n        streamMetadata = createStreamMessage.metadata;\\n        \\n        // Initialize stream status\\n        streamStatus = StreamTypes.Status.Waiting;\\n        \\n        // Initialize stream times\\n        streamTimes = StreamTypes.StreamTimes({\\n            bootstrappingStartTime: createStreamMessage.bootstrappingStartTime,\\n            streamStartTime: createStreamMessage.streamStartTime,\\n            streamEndTime: createStreamMessage.streamEndTime\\n        });\\n    }\\n\\n    // ============ Core Stream Functions ============\\n\\n    /**\\n     * @dev Allows users to subscribe to the stream by providing input tokens\\n     * @param amountIn Amount of input tokens to subscribe with\\n     * @notice Users can subscribe during Bootstrapping or Active phases\\n     */\\n    function subscribe(uint256 amountIn) external {\\n        if (amountIn == 0) revert InvalidAmount();\\n\\n        // Load and validate stream state\\n        StreamTypes.Status status = loadStreamStatus();\\n        StreamTypes.StreamTimes memory times = loadStreamTimes();\\n        status = syncStreamStatus(status, times, block.timestamp);\\n\\n        // Validate operation is allowed\\n        if (status != StreamTypes.Status.Bootstrapping && status != StreamTypes.Status.Active) {\\n            revert OperationNotAllowed();\\n        }\\n\\n        // Load and sync stream state\\n        StreamTypes.StreamState memory state = loadStream();\\n        state = syncStream(state);\\n\\n        // Load and sync position\\n        PositionTypes.Position memory position = loadPosition(msg.sender);\\n        position = StreamMathLib.syncPosition(position, state.distIndex, state.shares, state.inSupply, block.timestamp);\\n\\n        // Calculate shares before any state changes\\n        uint256 newShares = StreamMathLib.computeSharesAmount(amountIn, false, state.inSupply, state.shares);\\n\\n        // Transfer tokens\\n        IERC20(streamTokens.inSupplyToken).safeTransferFrom(msg.sender, address(this), amountIn);\\n\\n        // Update position\\n        position.inBalance += amountIn;\\n        position.shares += newShares;\\n\\n        // Update stream state\\n        state.inSupply += amountIn;\\n        state.shares += newShares;\\n\\n        \\n\\n        // Save all states\\n        saveStreamStatus(status);\\n        savePosition(msg.sender, position);\\n        saveStream(state);\\n\\n        emit Subscribed(\\n            address(this),\\n            msg.sender,\\n            position.inBalance,\\n            newShares,\\n            position.lastUpdateTime,\\n            position.spentIn,\\n            position.purchased,\\n            position.index.value,\\n            state.inSupply,\\n            state.shares\\n        );\\n    }\\n\\n    /**\\n     * @dev Allows users to withdraw their input tokens from the stream\\n     * @param cap Amount of input tokens to withdraw\\n     * @notice Users can withdraw during Active or Bootstrapping phases\\n     */\\n    function withdraw(uint256 cap) external {\\n        if (cap == 0) revert InvalidAmount();\\n\\n        // Load position once\\n        PositionTypes.Position memory position = loadPosition(msg.sender);\\n\\n        // Validate position\\n        validatePosition(position, msg.sender);\\n\\n        // load stream times\\n        StreamTypes.StreamTimes memory times = loadStreamTimes();\\n\\n        // Load and update status\\n        StreamTypes.Status status = loadStreamStatus();\\n        status = syncStreamStatus(status, times, block.timestamp);\\n\\n        // Check if operation is allowed\\n        if (status != StreamTypes.Status.Active && status != StreamTypes.Status.Bootstrapping) {\\n            revert OperationNotAllowed();\\n        }\\n\\n        // Load and update stream state\\n        StreamTypes.StreamState memory state = loadStream();\\n        state = syncStream(state);\\n\\n        // Sync position with the updated state\\n        position = StreamMathLib.syncPosition(position, state.distIndex, state.shares, state.inSupply, block.timestamp);\\n\\n        // Check if withdrawal amount exceeds position balance\\n        if (cap > position.inBalance) revert WithdrawAmountExceedsBalance(cap);\\n\\n        uint256 shareDeduction = 0;\\n\\n        if (cap == position.inBalance) {\\n            shareDeduction = position.shares;\\n        } else {\\n            shareDeduction = StreamMathLib.computeSharesAmount(cap, true, state.inSupply, position.shares);\\n        }\\n\\n        // Update position\\n        position.shares = position.shares - shareDeduction;\\n        position.inBalance = position.inBalance - cap;\\n\\n        // Update stream state\\n        state.inSupply = state.inSupply - cap;\\n        state.shares = state.shares - shareDeduction;\\n\\n        // Save all states first\\n        saveStreamStatus(status);\\n        savePosition(msg.sender, position);\\n        saveStream(state);\\n\\n        // Emit events\\n        emit Withdrawn(\\n            address(this),\\n            msg.sender,\\n            position.inBalance,\\n            position.shares,\\n            position.lastUpdateTime,\\n            position.spentIn,\\n            position.purchased,\\n            position.index.value,\\n            state.inSupply,\\n            state.shares\\n        );\\n\\n        // Transfer tokens\\n        IERC20(streamTokens.inSupplyToken).safeTransfer(msg.sender, cap);\\n    }\\n\\n    /**\\n     * @dev Allows users to exit the stream and receive their tokens based on stream outcome\\n     * @notice Users can exit after the stream has ended or been cancelled\\n     */\\n    function exitStream() external {\\n        // Load and validate position\\n        PositionTypes.Position memory position = loadPosition(msg.sender);\\n        validatePosition(position, msg.sender);\\n\\n        // Load and sync stream state\\n        StreamTypes.StreamState memory state = syncStream(loadStream());\\n\\n        // Sync position with updated stream state\\n        position = StreamMathLib.syncPosition(position, state.distIndex, state.shares, state.inSupply, block.timestamp);\\n\\n        // Load and sync stream status\\n        StreamTypes.Status status = syncStreamStatus(loadStreamStatus(), loadStreamTimes(), block.timestamp);\\n\\n        // Store values for distribution before changing state\\n        uint256 inBalance = position.inBalance;\\n        uint256 purchased = position.purchased;\\n        uint256 spentIn = position.spentIn;\\n        position.exitDate = block.timestamp;\\n\\n        // Save updated state before making external calls\\n        saveStreamStatus(status);\\n        saveStream(state);\\n        savePosition(msg.sender, position);\\n\\n        // Determine outcome\\n        bool thresholdReached = (state.spentIn >= state.threshold);\\n        bool isSuccess = (status == StreamTypes.Status.FinalizedStreamed ||\\n            (status == StreamTypes.Status.Ended && thresholdReached));\\n        bool isRefund = (status == StreamTypes.Status.FinalizedRefunded ||\\n            status == StreamTypes.Status.Cancelled ||\\n            (status == StreamTypes.Status.Ended && !thresholdReached));\\n\\n        if (isSuccess) {\\n            // Case 1: Successful exit - return unused input tokens and deliver output\\n            // This case is highly unlikely to happen because the stream is designed to spend all input tokens if stream is ended\\n            if (inBalance > 0) {\\n                IERC20(streamTokens.inSupplyToken).safeTransfer(msg.sender, inBalance);\\n            }\\n\\n            if (postStreamActions.beneficiaryVesting.isVestingEnabled) {\\n                StreamFactory factoryContract = StreamFactory(STREAM_FACTORY_ADDRESS);\\n                StreamFactoryTypes.Params memory params = factoryContract.getParams();\\n                IVestingFactory vestingFactory = IVestingFactory(params.vestingFactoryAddress);\\n\\n                IERC20(streamTokens.outSupplyToken).approve(params.vestingFactoryAddress, purchased);\\n                vestingFactory.createVestingWalletWithTokens(\\n                    msg.sender,\\n                    uint64(block.timestamp),\\n                    postStreamActions.beneficiaryVesting.vestingDuration,\\n                    streamTokens.outSupplyToken,\\n                    purchased\\n                );\\n            } else {\\n                IERC20(streamTokens.outSupplyToken).safeTransfer(msg.sender, purchased);\\n            }\\n\\n            emit ExitStreamed(address(this), msg.sender, purchased, spentIn, block.timestamp);\\n        } else if (isRefund) {\\n            // Case 2: Refund exit - return all input tokens\\n            uint256 totalRefund = inBalance + spentIn;\\n            IERC20(streamTokens.inSupplyToken).safeTransfer(msg.sender, totalRefund);\\n            emit ExitRefunded(address(this), msg.sender, totalRefund, block.timestamp);\\n        } else {\\n            // Case 3: No exit allowed\\n            revert OperationNotAllowed();\\n        }\\n    }\\n\\n    // ============ Stream Management Functions ============\\n\\n    /**\\n     * @dev Allows the creator to finalize the stream after it has ended\\n     * @notice Only the creator can call this function when stream status is Ended\\n     */\\n    function finalizeStream() external onlyCreator {\\n        // Get factory params\\n        StreamFactory factoryContract = StreamFactory(STREAM_FACTORY_ADDRESS);\\n        StreamFactoryTypes.Params memory params = factoryContract.getParams();\\n\\n        // Load and update status\\n        StreamTypes.Status status = loadStreamStatus();\\n        StreamTypes.StreamTimes memory times = loadStreamTimes();\\n        status = syncStreamStatus(status, times, block.timestamp);\\n\\n        // Check if operation is allowed\\n        if (status != StreamTypes.Status.Ended) {\\n            revert OperationNotAllowed();\\n        }\\n\\n        // Load and update stream state\\n        StreamTypes.StreamState memory state = loadStream();\\n        state = syncStream(state);\\n\\n        bool thresholdReached = state.spentIn >= state.threshold;\\n\\n        // Store values needed for distribution before state changes\\n        uint256 outRemaining = state.outRemaining;\\n        uint256 outSupply = state.outSupply;\\n        uint256 spentIn = state.spentIn;\\n\\n        if (thresholdReached) {\\n            address feeCollector = params.feeCollector;\\n            Decimal memory exitFeeRatio = params.exitFeeRatio;\\n\\n            // Calculate exit fee\\n            (uint256 feeAmount, uint256 creatorRevenue) = StreamMathLib.calculateExitFee(spentIn, exitFeeRatio);\\n\\n            // Handle pool creation if configured\\n            uint256 poolInSupplyAmount = 0;\\n            uint256 poolOutSupplyAmount = 0;\\n            if (postStreamActions.poolInfo.poolOutSupplyAmount > 0) {\\n                // Calculate pool ratio\\n                Decimal memory poolRatio = DecimalMath.div(\\n                    DecimalMath.fromNumber(postStreamActions.poolInfo.poolOutSupplyAmount),\\n                    DecimalMath.fromNumber(streamState.outSupply)\\n                );\\n\\n                Decimal memory decimalCreatorRevenue = DecimalMath.fromNumber(creatorRevenue);\\n                Decimal memory decimalPoolAmount = DecimalMath.mul(decimalCreatorRevenue, poolRatio);\\n\\n                poolInSupplyAmount = DecimalMath.floor(decimalPoolAmount);\\n                poolOutSupplyAmount = postStreamActions.poolInfo.poolOutSupplyAmount;\\n                // Calculate remaining revenue\\n                creatorRevenue = creatorRevenue - poolInSupplyAmount;\\n            }\\n\\n            // Update status\\n            status = StreamTypes.Status.FinalizedStreamed;\\n            saveStreamStatus(status);\\n            saveStream(state);\\n\\n            // Emit event before external calls\\n            emit FinalizedStreamed(address(this), creator, creatorRevenue, feeAmount, outRemaining);\\n\\n            // External calls last\\n            IERC20(streamTokens.inSupplyToken).safeTransfer(feeCollector, feeAmount);\\n\\n            if (poolOutSupplyAmount > 0) {\\n                createPoolAndAddLiquidity(\\n                    streamTokens.inSupplyToken,\\n                    streamTokens.outSupplyToken,\\n                    poolInSupplyAmount,\\n                    poolOutSupplyAmount\\n                );\\n            }\\n\\n            if (postStreamActions.creatorVesting.isVestingEnabled) {\\n                IVestingFactory vestingFactory = IVestingFactory(params.vestingFactoryAddress);\\n                IERC20(streamTokens.inSupplyToken).approve(params.vestingFactoryAddress, creatorRevenue);\\n                vestingFactory.createVestingWalletWithTokens(\\n                    creator,\\n                    uint64(block.timestamp),\\n                    postStreamActions.creatorVesting.vestingDuration,\\n                    streamTokens.inSupplyToken,\\n                    creatorRevenue\\n                );\\n            } else {\\n                IERC20(streamTokens.inSupplyToken).safeTransfer(creator, creatorRevenue);\\n            }\\n\\n            if (outRemaining > 0) {\\n                IERC20(streamTokens.outSupplyToken).safeTransfer(creator, outRemaining);\\n            }\\n        } else {\\n            // Update status\\n            status = StreamTypes.Status.FinalizedRefunded;\\n            saveStreamStatus(status);\\n            saveStream(state);\\n\\n            // Emit event before external call\\n            emit FinalizedRefunded(address(this), creator, outSupply);\\n\\n            // External call last\\n            IERC20(streamTokens.outSupplyToken).safeTransfer(creator, outSupply);\\n        }\\n    }\\n\\n    /**\\n     * @dev Allows the creator to cancel the stream during the Waiting phase\\n     * @notice Only the creator can cancel during Waiting phase\\n     */\\n    function cancelStream() external onlyCreator {\\n        // Load and update status\\n        StreamTypes.Status status = loadStreamStatus();\\n        StreamTypes.StreamTimes memory times = loadStreamTimes();\\n        status = syncStreamStatus(status, times, block.timestamp);\\n\\n        // Check if operation is allowed\\n        if (status != StreamTypes.Status.Waiting) {\\n            revert OperationNotAllowed();\\n        }\\n\\n        // Store amount to transfer before updating state\\n        uint256 amountToTransfer = streamState.outSupply;\\n\\n        // Update status\\n        status = StreamTypes.Status.Cancelled;\\n        saveStreamStatus(status);\\n\\n        emit StreamCancelled(address(this), creator, amountToTransfer, uint8(status));\\n\\n        IERC20(streamTokens.outSupplyToken).safeTransfer(creator, amountToTransfer);\\n    }\\n\\n    /**\\n     * @dev Allows the protocol admin to cancel the stream during Waiting, Bootstrapping, or Active phases\\n     * @notice Only the protocol admin can call this function\\n     */\\n    function cancelWithAdmin() external onlyProtocolAdmin {\\n        // Load and update status\\n        StreamTypes.Status status = loadStreamStatus();\\n        StreamTypes.StreamTimes memory times = loadStreamTimes();\\n        status = syncStreamStatus(status, times, block.timestamp);\\n\\n        // Check if operation is allowed\\n        if (\\n            status != StreamTypes.Status.Waiting &&\\n            status != StreamTypes.Status.Bootstrapping &&\\n            status != StreamTypes.Status.Active\\n        ) {\\n            revert OperationNotAllowed();\\n        }\\n\\n        // Store amount to transfer before updating state\\n        uint256 amountToTransfer = streamState.outSupply;\\n\\n        // Update status\\n        status = StreamTypes.Status.Cancelled;\\n        saveStreamStatus(status);\\n\\n        emit StreamCancelled(address(this), creator, amountToTransfer, uint8(status));\\n\\n        // External call last\\n        IERC20(streamTokens.outSupplyToken).safeTransfer(creator, amountToTransfer);\\n    }\\n\\n    // ============ External Sync Functions ============\\n\\n    /**\\n     * @dev External function to sync the stream state and status\\n     * @notice Anyone can call this to update the stream state based on current time\\n     */\\n    function syncStreamExternal() external {\\n        // Load, update and save stream state\\n        StreamTypes.StreamState memory state = loadStream();\\n        StreamTypes.StreamTimes memory times = loadStreamTimes();\\n        state = syncStream(state);\\n        saveStream(state);\\n\\n        // Load, update and save status\\n        StreamTypes.Status status = loadStreamStatus();\\n        status = syncStreamStatus(status, times, block.timestamp);\\n        saveStreamStatus(status);\\n\\n        emit StreamSynced(\\n            address(this),\\n            state.lastUpdated,\\n            uint8(status),\\n            state.distIndex.value,\\n            state.outRemaining,\\n            state.inSupply,\\n            state.spentIn,\\n            state.currentStreamedPrice.value\\n        );\\n    }\\n\\n    /**\\n     * @dev External function to sync a specific user's position\\n     * @param user Address of the user whose position should be synced\\n     * @notice Anyone can call this to update a user's position based on current stream state\\n     */\\n    function syncPositionExternal(address user) external {\\n        PositionTypes.Position memory position = loadPosition(user);\\n        validatePosition(position, user);\\n        StreamTypes.StreamState memory state = loadStream();\\n        state = syncStream(state);\\n        position = StreamMathLib.syncPosition(position, state.distIndex, state.shares, state.inSupply, block.timestamp);\\n        savePosition(user, position);\\n        saveStream(state);\\n        emit PositionSynced(\\n            address(this),\\n            user,\\n            position.inBalance,\\n            position.shares,\\n            position.lastUpdateTime,\\n            position.spentIn,\\n            position.purchased,\\n            position.index.value\\n        );\\n    }\\n\\n    // ============ View Functions ============\\n\\n    /**\\n     * @dev Get the current stream status\\n     * @return The current stream status\\n     */\\n    function getStreamStatus() external view returns (StreamTypes.Status) {\\n        return streamStatus;\\n    }\\n\\n    /**\\n     * @dev Get the current stream state\\n     * @return The current stream state\\n     */\\n    function getStreamState() external view returns (StreamTypes.StreamState memory) {\\n        return streamState;\\n    }\\n\\n    /**\\n     * @dev Get a user's position information\\n     * @param user Address of the user\\n     * @return The user's position\\n     */\\n    function getPosition(address user) external view returns (PositionTypes.Position memory) {\\n        IPositionStorage positionStorage = IPositionStorage(positionStorageAddress);\\n        return positionStorage.getPosition(user);\\n    }\\n\\n    // ============ Internal Helper Functions ============\\n\\n    // ============ State Management ============\\n\\n    /**\\n     * @dev Synchronizes the stream state based on the current timestamp\\n     * @param state The current stream state to update\\n     * @return The updated stream state\\n     */\\n    function syncStream(StreamTypes.StreamState memory state) internal returns (StreamTypes.StreamState memory) {\\n        StreamTypes.StreamTimes memory times = loadStreamTimes();\\n\\n        Decimal memory diff = StreamMathLib.calculateDiff(\\n            block.timestamp,\\n            times.streamStartTime,\\n            times.streamEndTime,\\n            state.lastUpdated\\n        );\\n\\n        if (diff.value == 0) {\\n            state.lastUpdated = block.timestamp;\\n            return state;\\n        }\\n\\n        state = StreamMathLib.calculateUpdatedState(state, diff);\\n        state.lastUpdated = block.timestamp;\\n\\n        emit StreamStateUpdated(\\n            address(this),\\n            state.lastUpdated,\\n            state.distIndex.value,\\n            state.outRemaining,\\n            state.inSupply,\\n            state.spentIn,\\n            state.currentStreamedPrice.value\\n        );\\n\\n        return state;\\n    }\\n\\n    /**\\n     * @dev Syncs the stream status based on current time and stream times\\n     * @param status Current stream status\\n     * @param times Stream timing information\\n     * @param nowTime Current timestamp\\n     * @return Updated stream status\\n     */\\n    function syncStreamStatus(\\n        StreamTypes.Status status,\\n        StreamTypes.StreamTimes memory times,\\n        uint256 nowTime\\n    ) internal pure returns (StreamTypes.Status) {\\n        status = StreamMathLib.calculateStreamStatus(\\n            status,\\n            nowTime,\\n            times.bootstrappingStartTime,\\n            times.streamStartTime,\\n            times.streamEndTime\\n        );\\n\\n        return status;\\n    }\\n\\n    // ============ Load Functions ============\\n\\n    /**\\n     * @dev Loads the current stream state\\n     * @return Current stream state\\n     */\\n    function loadStream() internal view returns (StreamTypes.StreamState memory) {\\n        return streamState;\\n    }\\n\\n    /**\\n     * @dev Loads the current stream status\\n     * @return Current stream status\\n     */\\n    function loadStreamStatus() internal view returns (StreamTypes.Status) {\\n        return streamStatus;\\n    }\\n\\n    /**\\n     * @dev Loads a user's position from storage\\n     * @param user Address of the user\\n     * @return User's position\\n     */\\n    function loadPosition(address user) internal view returns (PositionTypes.Position memory) {\\n        IPositionStorage positionStorage = IPositionStorage(positionStorageAddress);\\n        return positionStorage.getPosition(user);\\n    }\\n\\n    /**\\n     * @dev Loads the stream timing information\\n     * @return Stream timing information\\n     */\\n    function loadStreamTimes() internal view returns (StreamTypes.StreamTimes memory) {\\n        return streamTimes;\\n    }\\n\\n    // ============ Save Functions ============\\n\\n    /**\\n     * @dev Saves the stream state\\n     * @param state Stream state to save\\n     */\\n    function saveStream(StreamTypes.StreamState memory state) internal {\\n        streamState = state;\\n    }\\n\\n    /**\\n     * @dev Saves the stream status\\n     * @param status Stream status to save\\n     */\\n    function saveStreamStatus(StreamTypes.Status status) internal {\\n        streamStatus = status;\\n    }\\n\\n    /**\\n     * @dev Saves a user's position to storage\\n     * @param user Address of the user\\n     * @param position Position to save\\n     */\\n    function savePosition(address user, PositionTypes.Position memory position) internal {\\n        IPositionStorage positionStorage = IPositionStorage(positionStorageAddress);\\n        positionStorage.updatePosition(user, position);\\n    }\\n\\n    // ============ Validation Functions ============\\n\\n    /**\\n     * @dev Validates a position and reverts if invalid\\n     * @param position The position to validate\\n     * @param user The address of the user whose position is being validated\\n     * @custom:error InvalidPosition if position is invalid or inactive\\n     */\\n    function validatePosition(PositionTypes.Position memory position, address user) internal pure {\\n        if (position.shares == 0) {\\n            revert InvalidPosition(user, position.shares, position.exitDate, \\\"Position has no shares\\\");\\n        }\\n        if (position.exitDate != 0) {\\n            revert InvalidPosition(user, position.shares, position.exitDate, \\\"Position has already exited\\\");\\n        }\\n    }\\n\\n    // ============ Pool Management ============\\n\\n    /**\\n     * @dev Creates a pool and adds liquidity using the pool wrapper\\n     * @param tokenA First token address\\n     * @param tokenB Second token address\\n     * @param amountADesired Amount of token A to add\\n     * @param amountBDesired Amount of token B to add\\n     */\\n    function createPoolAndAddLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired\\n    ) internal {\\n        StreamFactory factoryContract = StreamFactory(STREAM_FACTORY_ADDRESS);\\n        StreamFactoryTypes.Params memory params = factoryContract.getParams();\\n\\n        address poolWrapperAddress = params.poolWrapperAddress;\\n        IPoolWrapper poolWrapper = IPoolWrapper(poolWrapperAddress);\\n\\n        // Transfer pool tokens to the pool wrapper contract first\\n        IERC20(tokenA).safeTransfer(poolWrapperAddress, amountADesired);\\n        IERC20(tokenB).safeTransfer(poolWrapperAddress, amountBDesired);\\n\\n        PoolWrapperTypes.CreatePoolMsg memory createPoolMsg = PoolWrapperTypes.CreatePoolMsg({\\n            token0: tokenA,\\n            token1: tokenB,\\n            amount0: amountADesired,\\n            amount1: amountBDesired\\n        });\\n        \\n        // Now, call createPool\\n        poolWrapper.createPool(createPoolMsg);\\n    }\\n}\\n\",\"keccak256\":\"0xd8624f1db813b086be06fa54abaa9d96ee62090dd2716176224593c0842b8c62\",\"license\":\"MIT\"},\"src/StreamFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/**\\n * @title StreamFactory\\n * @author Adnan Deniz Corlu (@Ninjatosba)\\n * @notice Central factory managing StreamSwap protocol operations and stream creation\\n * @dev The StreamFactory serves as the protocol's control center, handling stream creation,\\n *      parameter management, and protocol governance. It uses minimal proxy clones for\\n *      gas-efficient stream deployment and maintains protocol-wide configurations.\\n *      \\n *      Core Responsibilities:\\n *      - Stream Creation: Deploy new streams with validation and fee collection\\n *      - Protocol Parameters: Manage fees, durations, and accepted tokens\\n *      - Access Control: Admin functions for protocol governance\\n *      - Emergency Powers: Freeze stream creation and cancel active streams\\n *      - Integration Management: Deploy and coordinate with VestingFactory\\n */\\nimport { IStreamEvents } from \\\"./interfaces/IStreamEvents.sol\\\";\\nimport { IStreamFactoryErrors } from \\\"./interfaces/IStreamFactoryErrors.sol\\\";\\nimport { VestingFactory } from \\\"./VestingFactory.sol\\\";\\nimport { StreamTypes } from \\\"./types/StreamTypes.sol\\\";\\nimport { IStream } from \\\"./interfaces/IStream.sol\\\";\\nimport { StreamFactoryTypes } from \\\"./types/StreamFactoryTypes.sol\\\";\\nimport { Clones } from \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { PositionStorage } from \\\"./storage/PositionStorage.sol\\\";\\nimport { DecimalMath, Decimal } from \\\"./lib/math/DecimalMath.sol\\\";\\n\\n/**\\n * @title StreamFactory\\n * @dev Factory contract for creating and managing token streams\\n * @notice Handles stream creation, parameter management, and accepted token management\\n */\\ncontract StreamFactory is IStreamEvents, IStreamFactoryErrors {\\n    using SafeERC20 for IERC20;\\n\\n    // ============ State Variables ============\\n\\n    /// @notice Mapping of accepted input supply tokens\\n    mapping(address => bool) public acceptedInSupplyTokens;\\n\\n    /// @notice Current stream ID counter\\n    uint16 public currentStreamId;\\n\\n    /// @notice Factory parameters\\n    StreamFactoryTypes.Params public params;\\n\\n    /// @notice Mapping of stream ID to stream address\\n    mapping(uint16 => address) public streamAddresses;\\n\\n    /// @notice Flag to freeze stream creation\\n    bool public frozen;\\n\\n    /// @notice Flag to ensure initialization happens only once\\n    bool public initialized;\\n\\n    // ============ Modifiers ============\\n\\n    /**\\n     * @dev Ensures the function can only be called once during initialization\\n     */\\n    modifier onlyOnce() {\\n        if (initialized) revert AlreadyInitialized();\\n        _;\\n        initialized = true;\\n    }\\n\\n    /**\\n     * @dev Ensures only the protocol admin can call the function\\n     */\\n    modifier onlyAdmin() {\\n        if (msg.sender != params.protocolAdmin) revert NotAdmin();\\n        _;\\n    }\\n\\n    // ============ Constructor ============\\n\\n    /**\\n     * @dev Constructor to set the protocol admin\\n     * @param protocolAdmin Address of the protocol admin\\n     */\\n    constructor(address protocolAdmin) {\\n        if (protocolAdmin == address(0)) revert InvalidProtocolAdmin();\\n        params.protocolAdmin = protocolAdmin;\\n    }\\n\\n    // ============ Initialization ============\\n\\n    /**\\n     * @dev Initializes the factory with the provided configuration\\n     * @param initializeStreamMessage Factory initialization parameters\\n     * @notice This function can only be called once by the admin\\n     */\\n    function initialize(\\n        StreamFactoryTypes.InitializeStreamMessage memory initializeStreamMessage\\n    ) external onlyAdmin onlyOnce {\\n        if (DecimalMath.gt(initializeStreamMessage.exitFeeRatio, DecimalMath.fromNumber(1)))\\n            revert InvalidExitFeeRatio();\\n\\n        if (initializeStreamMessage.acceptedInSupplyTokens.length == 0) revert InvalidAcceptedInSupplyTokens();\\n\\n        if (initializeStreamMessage.streamCreationFeeToken == address(0)) revert InvalidStreamCreationFeeToken();\\n\\n        if (initializeStreamMessage.streamImplementationAddress == address(0))\\n            revert InvalidStreamImplementationAddress();\\n\\n        if (initializeStreamMessage.poolWrapperAddress == address(0)) revert InvalidPoolWrapper();\\n\\n        // Deploy vesting factory\\n        VestingFactory vestingFactory = new VestingFactory();\\n        emit VestingContractDeployed(address(this), address(vestingFactory));\\n\\n        // Set factory parameters\\n        params.streamCreationFee = initializeStreamMessage.streamCreationFee;\\n        params.streamCreationFeeToken = initializeStreamMessage.streamCreationFeeToken;\\n        params.exitFeeRatio = initializeStreamMessage.exitFeeRatio;\\n        params.minWaitingDuration = initializeStreamMessage.minWaitingDuration;\\n        params.minBootstrappingDuration = initializeStreamMessage.minBootstrappingDuration;\\n        params.minStreamDuration = initializeStreamMessage.minStreamDuration;\\n        params.feeCollector = initializeStreamMessage.feeCollector;\\n        params.tosVersion = initializeStreamMessage.tosVersion;\\n        params.vestingFactoryAddress = address(vestingFactory);\\n        params.poolWrapperAddress = initializeStreamMessage.poolWrapperAddress;\\n        params.streamImplementationAddress = initializeStreamMessage.streamImplementationAddress;\\n\\n        // Set accepted tokens\\n        for (uint256 i = 0; i < initializeStreamMessage.acceptedInSupplyTokens.length; i++) {\\n            if (initializeStreamMessage.acceptedInSupplyTokens[i] == address(0)) revert InvalidAcceptedInSupplyTokens();\\n            acceptedInSupplyTokens[initializeStreamMessage.acceptedInSupplyTokens[i]] = true;\\n        }\\n\\n        emit FactoryInitialized(\\n            address(this),\\n            initializeStreamMessage.streamImplementationAddress,\\n            initializeStreamMessage.poolWrapperAddress,\\n            initializeStreamMessage.feeCollector,\\n            initializeStreamMessage.protocolAdmin,\\n            initializeStreamMessage.streamCreationFeeToken,\\n            initializeStreamMessage.acceptedInSupplyTokens,\\n            initializeStreamMessage.streamCreationFee,\\n            initializeStreamMessage.exitFeeRatio.value,\\n            initializeStreamMessage.minWaitingDuration,\\n            initializeStreamMessage.minBootstrappingDuration,\\n            initializeStreamMessage.minStreamDuration,\\n            initializeStreamMessage.tosVersion,\\n            address(vestingFactory)\\n        );\\n    }\\n\\n    // ============ Stream Creation ============\\n\\n    /**\\n     * @dev Creates a new stream with the provided configuration\\n     * @param createStreamMessage Stream creation parameters\\n     * @notice Anyone can create a stream if they provide the required tokens and fees\\n     */\\n    function createStream(StreamTypes.CreateStreamMessage memory createStreamMessage) external {\\n        // Check if contract is accepting new streams (not frozen)\\n        if (frozen) revert ContractFrozen();\\n\\n        // Validate input parameters\\n        if (createStreamMessage.streamOutAmount == 0) revert ZeroOutSupplyNotAllowed();\\n        if (createStreamMessage.outSupplyToken == address(0)) revert InvalidOutSupplyToken();\\n        if (createStreamMessage.creator == address(0)) revert InvalidCreator();\\n        if (!acceptedInSupplyTokens[createStreamMessage.inSupplyToken]) revert StreamInputTokenNotAccepted();\\n\\n        // Validate vesting configurations\\n        validateVesting(createStreamMessage.creatorVesting);\\n        validateVesting(createStreamMessage.beneficiaryVesting);\\n\\n        // Validate time parameters\\n        validateStreamTimes(\\n            block.timestamp,\\n            createStreamMessage.bootstrappingStartTime,\\n            createStreamMessage.streamStartTime,\\n            createStreamMessage.streamEndTime\\n        );\\n\\n        // Validate TOS version\\n        if (\\n            keccak256(abi.encodePacked(createStreamMessage.tosVersion)) !=\\n            keccak256(abi.encodePacked(params.tosVersion))\\n        ) revert InvalidToSVersion();\\n\\n        // Clone stream contract\\n        address clone = Clones.clone(params.streamImplementationAddress);\\n        IStream stream = IStream(clone);\\n\\n        // Deploy PositionStorage\\n        PositionStorage positionStorage = new PositionStorage(address(stream));\\n\\n        uint16 streamId = currentStreamId;\\n        currentStreamId++;\\n        streamAddresses[streamId] = address(stream);\\n\\n        // Transfer tokens to stream\\n        IERC20(createStreamMessage.outSupplyToken).safeTransferFrom(\\n            msg.sender,\\n            address(stream),\\n            createStreamMessage.streamOutAmount + createStreamMessage.poolInfo.poolOutSupplyAmount\\n        );\\n\\n        // Initialize the cloned stream\\n        stream.initialize(createStreamMessage, address(positionStorage));\\n\\n        // Handle creation fee\\n        if (params.streamCreationFee > 0) {\\n            IERC20(params.streamCreationFeeToken).safeTransferFrom(\\n                msg.sender,\\n                address(params.feeCollector),\\n                params.streamCreationFee\\n            );\\n        }\\n\\n        emit StreamCreated(\\n            address(this),\\n            createStreamMessage.outSupplyToken,\\n            createStreamMessage.inSupplyToken,\\n            address(stream),\\n            address(positionStorage),\\n            createStreamMessage.streamOutAmount,\\n            createStreamMessage.bootstrappingStartTime,\\n            createStreamMessage.streamStartTime,\\n            createStreamMessage.streamEndTime,\\n            createStreamMessage.threshold,\\n            createStreamMessage.metadata.ipfsHash,\\n            params.tosVersion,\\n            streamId\\n        );\\n    }\\n\\n    // ============ Parameter Management ============\\n\\n    /**\\n     * @dev Updates the stream creation fee\\n     * @param streamCreationFee New creation fee amount\\n     */\\n    function updateStreamCreationFee(uint256 streamCreationFee) external onlyAdmin {\\n        params.streamCreationFee = streamCreationFee;\\n        emit ParamsUpdated(\\n            address(this),\\n            streamCreationFee,\\n            params.exitFeeRatio.value,\\n            params.minWaitingDuration,\\n            params.minBootstrappingDuration,\\n            params.minStreamDuration,\\n            params.tosVersion\\n        );\\n    }\\n\\n    /**\\n     * @dev Updates the stream creation fee token\\n     * @param streamCreationFeeToken New fee token address\\n     */\\n    function updateStreamCreationFeeToken(address streamCreationFeeToken) external onlyAdmin {\\n        if (streamCreationFeeToken == address(0)) revert InvalidStreamCreationFeeToken();\\n        params.streamCreationFeeToken = streamCreationFeeToken;\\n        emit ParamsUpdated(\\n            address(this),\\n            params.streamCreationFee,\\n            params.exitFeeRatio.value,\\n            params.minWaitingDuration,\\n            params.minBootstrappingDuration,\\n            params.minStreamDuration,\\n            params.tosVersion\\n        );\\n    }\\n\\n    /**\\n     * @dev Updates the exit fee ratio\\n     * @param exitFeeRatio New exit fee ratio\\n     */\\n    function updateExitFeeRatio(Decimal memory exitFeeRatio) external onlyAdmin {\\n        if (DecimalMath.gt(exitFeeRatio, DecimalMath.fromNumber(1))) revert InvalidExitFeeRatio();\\n        params.exitFeeRatio = exitFeeRatio;\\n        emit ParamsUpdated(\\n            address(this),\\n            params.streamCreationFee,\\n            exitFeeRatio.value,\\n            params.minWaitingDuration,\\n            params.minBootstrappingDuration,\\n            params.minStreamDuration,\\n            params.tosVersion\\n        );\\n    }\\n\\n    /**\\n     * @dev Updates the minimum waiting duration\\n     * @param minWaitingDuration New minimum waiting duration\\n     */\\n    function updateMinWaitingDuration(uint256 minWaitingDuration) external onlyAdmin {\\n        params.minWaitingDuration = minWaitingDuration;\\n        emit ParamsUpdated(\\n            address(this),\\n            params.streamCreationFee,\\n            params.exitFeeRatio.value,\\n            minWaitingDuration,\\n            params.minBootstrappingDuration,\\n            params.minStreamDuration,\\n            params.tosVersion\\n        );\\n    }\\n\\n    /**\\n     * @dev Updates the minimum bootstrapping duration\\n     * @param minBootstrappingDuration New minimum bootstrapping duration\\n     */\\n    function updateMinBootstrappingDuration(uint256 minBootstrappingDuration) external onlyAdmin {\\n        params.minBootstrappingDuration = minBootstrappingDuration;\\n        emit ParamsUpdated(\\n            address(this),\\n            params.streamCreationFee,\\n            params.exitFeeRatio.value,\\n            params.minWaitingDuration,\\n            minBootstrappingDuration,\\n            params.minStreamDuration,\\n            params.tosVersion\\n        );\\n    }\\n\\n    /**\\n     * @dev Updates the minimum stream duration\\n     * @param minStreamDuration New minimum stream duration\\n     */\\n    function updateMinStreamDuration(uint256 minStreamDuration) external onlyAdmin {\\n        params.minStreamDuration = minStreamDuration;\\n        emit ParamsUpdated(\\n            address(this),\\n            params.streamCreationFee,\\n            params.exitFeeRatio.value,\\n            params.minWaitingDuration,\\n            params.minBootstrappingDuration,\\n            minStreamDuration,\\n            params.tosVersion\\n        );\\n    }\\n\\n    /**\\n     * @dev Updates the TOS version\\n     * @param tosVersion New TOS version\\n     */\\n    function updateTosVersion(string memory tosVersion) external onlyAdmin {\\n        params.tosVersion = tosVersion;\\n        emit ParamsUpdated(\\n            address(this),\\n            params.streamCreationFee,\\n            params.exitFeeRatio.value,\\n            params.minWaitingDuration,\\n            params.minBootstrappingDuration,\\n            params.minStreamDuration,\\n            tosVersion\\n        );\\n    }\\n\\n    /**\\n     * @dev Updates the fee collector address\\n     * @param feeCollector New fee collector address\\n     */\\n    function updateFeeCollector(address feeCollector) external onlyAdmin {\\n        if (feeCollector == address(0)) revert InvalidFeeCollector();\\n        params.feeCollector = feeCollector;\\n        emit FeeCollectorUpdated(address(this), feeCollector);\\n    }\\n\\n    /**\\n     * @dev Updates the protocol admin address\\n     * @param protocolAdmin New protocol admin address\\n     */\\n    function updateProtocolAdmin(address protocolAdmin) external onlyAdmin {\\n        if (protocolAdmin == address(0)) revert InvalidProtocolAdmin();\\n        params.protocolAdmin = protocolAdmin;\\n        emit ProtocolAdminUpdated(address(this), protocolAdmin);\\n    }\\n\\n    /**\\n     * @dev Updates the pool wrapper address\\n     * @param poolWrapper New pool wrapper address\\n     */\\n    function updatePoolWrapper(address poolWrapper) external onlyAdmin {\\n        if (poolWrapper == address(0)) revert InvalidPoolWrapper();\\n        params.poolWrapperAddress = poolWrapper;\\n        emit PoolWrapperUpdated(address(this), poolWrapper);\\n    }\\n\\n    /**\\n     * @dev Updates the stream implementation address\\n     * @param implementation New stream implementation address\\n     */\\n    function updateStreamImplementation(address implementation) external onlyAdmin {\\n        if (implementation == address(0)) revert InvalidImplementationAddress();\\n        params.streamImplementationAddress = implementation;\\n        emit ParamsUpdated(\\n            address(this),\\n            params.streamCreationFee,\\n            params.exitFeeRatio.value,\\n            params.minWaitingDuration,\\n            params.minBootstrappingDuration,\\n            params.minStreamDuration,\\n            params.tosVersion\\n        );\\n    }\\n\\n    // ============ Token Management ============\\n\\n    /**\\n     * @dev Updates the list of accepted input supply tokens\\n     * @param tokensToAdd Array of token addresses to add\\n     * @param tokensToRemove Array of token addresses to remove\\n     */\\n    function updateAcceptedTokens(\\n        address[] calldata tokensToAdd,\\n        address[] calldata tokensToRemove\\n    ) external onlyAdmin {\\n        for (uint256 i = 0; i < tokensToAdd.length; i++) {\\n            acceptedInSupplyTokens[tokensToAdd[i]] = true;\\n        }\\n        for (uint256 i = 0; i < tokensToRemove.length; i++) {\\n            acceptedInSupplyTokens[tokensToRemove[i]] = false;\\n        }\\n        emit AcceptedTokensUpdated(address(this), tokensToAdd, tokensToRemove);\\n    }\\n\\n    // ============ Factory Management ============\\n\\n    /**\\n     * @dev Sets the frozen state of the factory\\n     * @param isFrozen Whether the factory should be frozen\\n     */\\n    function setFrozen(bool isFrozen) external onlyAdmin {\\n        frozen = isFrozen;\\n        emit FrozenStateUpdated(address(this), isFrozen);\\n    }\\n\\n    // ============ View Functions ============\\n\\n    /**\\n     * @dev Get all stream addresses\\n     * @return Array of stream addresses\\n     */\\n    function getStreams() external view returns (address[] memory) {\\n        address[] memory streams = new address[](currentStreamId);\\n        for (uint16 i = 0; i < currentStreamId; i++) {\\n            streams[i] = streamAddresses[i];\\n        }\\n        return streams;\\n    }\\n\\n    /**\\n     * @dev Get stream address by ID\\n     * @param streamId Stream ID\\n     * @return Stream address\\n     */\\n    function getStream(uint16 streamId) external view returns (address) {\\n        return streamAddresses[streamId];\\n    }\\n\\n    /**\\n     * @dev Check if an address is a stream created by this factory\\n     * @param streamAddress Address to check\\n     * @return True if the address is a stream\\n     */\\n    function isStream(address streamAddress) external view returns (bool) {\\n        for (uint16 i = 0; i < currentStreamId; i++) {\\n            if (streamAddresses[i] == streamAddress) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @dev Get factory parameters\\n     * @return Factory parameters\\n     */\\n    function getParams() external view returns (StreamFactoryTypes.Params memory) {\\n        return params;\\n    }\\n\\n    /**\\n     * @dev Check if a token is accepted as input supply token\\n     * @param token Token address to check\\n     * @return True if the token is accepted\\n     */\\n    function isAcceptedInSupplyToken(address token) public view returns (bool) {\\n        return acceptedInSupplyTokens[token];\\n    }\\n\\n    /**\\n     * @dev Get all accepted input supply tokens\\n     * @return Array of accepted token addresses\\n     */\\n    function getAcceptedInSupplyTokens() external view returns (address[] memory) {\\n        address[] memory tokens = new address[](currentStreamId);\\n        for (uint16 i = 0; i < currentStreamId; i++) {\\n            if (acceptedInSupplyTokens[streamAddresses[i]]) {\\n                tokens[i] = streamAddresses[i];\\n            }\\n        }\\n        return tokens;\\n    }\\n\\n    // ============ Internal Functions ============\\n\\n    /**\\n     * @dev Validates stream timing parameters\\n     * @param nowTime Current timestamp\\n     * @param bootstrappingStartTime Bootstrapping start time\\n     * @param startTime Stream start time\\n     * @param endTime Stream end time\\n     */\\n    function validateStreamTimes(\\n        uint256 nowTime,\\n        uint256 bootstrappingStartTime,\\n        uint256 startTime,\\n        uint256 endTime\\n    ) internal view {\\n        if (nowTime > bootstrappingStartTime) revert InvalidBootstrappingStartTime();\\n        if (bootstrappingStartTime > startTime) revert InvalidStreamStartTime();\\n        if (startTime > endTime) revert InvalidStreamEndTime();\\n        if (endTime - startTime < params.minStreamDuration) revert StreamDurationTooShort();\\n        if (startTime - bootstrappingStartTime < params.minBootstrappingDuration)\\n            revert BootstrappingDurationTooShort();\\n        if (bootstrappingStartTime - nowTime < params.minWaitingDuration) revert WaitingDurationTooShort();\\n    }\\n\\n    /**\\n     * @dev Validates vesting configurations\\n     * @param vesting Vesting configuration to validate\\n     */\\n    function validateVesting(StreamTypes.VestingInfo memory vesting) internal pure {\\n        if (vesting.isVestingEnabled && vesting.vestingDuration == 0) {\\n            revert InvalidVestingDuration();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd05918df6126064d352c5396d223c11cd00b081a529a7d9259480a8381acfdf6\",\"license\":\"MIT\"},\"src/VestingFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/**\\n * @title VestingFactory\\n * @author Adnan Deniz Corlu (@Ninjatosba)\\n * @notice Factory for creating OpenZeppelin VestingWallet instances for stream participants\\n * @dev This contract creates vesting wallets for post-stream token distribution:\\n *      - Creates VestingWallet instances using OpenZeppelin's audited implementation\\n *      - Handles token transfers to newly created vesting contracts\\n *      - Used for both creator and beneficiary vesting scenarios\\n *      - Ensures secure and standardized vesting functionality\\n */\\n\\nimport { VestingWallet } from \\\"@openzeppelin/contracts/finance/VestingWallet.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n/**\\n * @title VestingFactory\\n * @dev Factory contract for creating OpenZeppelin VestingWallet instances\\n */\\ncontract VestingFactory {\\n    using SafeERC20 for IERC20;\\n\\n    // Custom errors\\n    error InvalidBeneficiary();\\n    error InvalidStartTime();\\n    error InvalidDuration();\\n    error InvalidToken();\\n    error InvalidAmount();\\n    error TokenTransferFailed();\\n\\n    event VestingWalletCreated(\\n        address indexed beneficiary,\\n        address indexed vestingWallet,\\n        uint64 startTime,\\n        uint64 duration,\\n        address token,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @dev Creates a VestingWallet and transfers tokens to it in one transaction\\n     * @param beneficiary address of the beneficiary\\n     * @param startTime the time (as Unix time) at which point vesting begins\\n     * @param duration duration in seconds of the period in which the tokens will vest\\n     * @param token the ERC20 token to transfer to the vesting wallet\\n     * @param amount the amount of tokens to transfer\\n     * @return vestingWallet the address of the created VestingWallet\\n     */\\n    function createVestingWalletWithTokens(\\n        address beneficiary,\\n        uint64 startTime,\\n        uint64 duration,\\n        address token,\\n        uint256 amount\\n    ) external returns (address vestingWallet) {\\n        if (beneficiary == address(0)) revert InvalidBeneficiary();\\n        if (startTime == 0) revert InvalidStartTime();\\n        if (startTime < block.timestamp) revert InvalidStartTime();\\n        if (duration == 0) revert InvalidDuration();\\n        if (token == address(0)) revert InvalidToken();\\n        if (amount == 0) revert InvalidAmount();\\n\\n        // Create the vesting wallet\\n        vestingWallet = address(new VestingWallet(beneficiary, startTime, duration));\\n\\n        // Transfer tokens to the vesting wallet\\n        IERC20(token).safeTransferFrom(msg.sender, vestingWallet, amount);\\n\\n        emit VestingWalletCreated(beneficiary, vestingWallet, startTime, duration, token, amount);\\n        return vestingWallet;\\n    }\\n}\\n\",\"keccak256\":\"0x6a3c4821d3c0d85302948a4888504011a230d994848fd02d519e0f09054d2d86\",\"license\":\"MIT\"},\"src/interfaces/IPoolWrapper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport { PoolWrapperTypes } from \\\"../types/PoolWrapperTypes.sol\\\";\\n\\ninterface IPoolWrapper {\\n    function createPool(\\n        PoolWrapperTypes.CreatePoolMsg calldata createPoolMsg\\n    ) external returns (PoolWrapperTypes.CreatedPoolInfo memory);\\n\\n    function getPoolInfo(address stream) external view returns (PoolWrapperTypes.CreatedPoolInfo memory);\\n}\\n\",\"keccak256\":\"0x09d5bf5378517970eed53350f9ae39426f809e2cf9971ae192188d2c361f49a4\",\"license\":\"MIT\"},\"src/interfaces/IPositionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport { PositionTypes } from \\\"../types/PositionTypes.sol\\\";\\nimport { Decimal } from \\\"../lib/math/DecimalMath.sol\\\";\\n\\ninterface IPositionStorage {\\n    function getPosition(address _owner) external view returns (PositionTypes.Position memory);\\n\\n    function createPosition(address owner, uint256 inBalance, uint256 shares, Decimal memory index) external;\\n\\n    function updatePosition(address owner, PositionTypes.Position memory position) external;\\n\\n    function setExitDate(address owner, uint256 exitDate) external;\\n}\\n\",\"keccak256\":\"0x8abecb90e444aaf7431ba16462cfedcb0e0ce2433c966031fb99586d1df428c9\",\"license\":\"MIT\"},\"src/interfaces/IStream.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport { StreamTypes } from \\\"../types/StreamTypes.sol\\\";\\nimport { PositionTypes } from \\\"../types/PositionTypes.sol\\\";\\n\\ninterface IStream {\\n    function initialize(\\n        StreamTypes.CreateStreamMessage memory createStreamMessage,\\n        address positionStorageAddress\\n    ) external;\\n\\n    function withdraw(uint256 cap) external;\\n\\n    function subscribe(uint256 amountIn) external;\\n\\n    function exitStream() external;\\n\\n    function finalizeStream() external;\\n\\n    function syncStreamExternal() external;\\n\\n    function syncPositionExternal(address user) external;\\n\\n    function cancelStream() external;\\n\\n    function cancelWithAdmin() external;\\n\\n    // View functions\\n    function getStreamStatus() external view returns (StreamTypes.Status);\\n\\n    function getStreamState() external view returns (StreamTypes.StreamState memory);\\n\\n    function getPosition(address user) external view returns (PositionTypes.Position memory);\\n\\n    // State variables getters (since they're public)\\n    function creator() external view returns (address);\\n\\n    function positionStorageAddress() external view returns (address);\\n\\n    function streamFactoryAddress() external view returns (address);\\n}\\n\",\"keccak256\":\"0x810ffda849b0ea8fcef7a37200a499b849ea8875da475d02110ff8f8f48c7f53\",\"license\":\"MIT\"},\"src/interfaces/IStreamErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\ninterface IStreamErrors {\\n    // Stream errors\\n    error InsufficientTokenPayment(uint256 requiredTokenAmount, uint256 tokenBalance);\\n    error InvalidOutSupplyToken();\\n    error InvalidInSupplyToken();\\n    error PaymentFailed();\\n    error OperationNotAllowed();\\n    error Unauthorized();\\n    error InvalidWithdrawAmount();\\n    error WithdrawAmountExceedsBalance(uint256 cap);\\n    error InsufficientOutAmount();\\n    error InvalidPosition(address user, uint256 shares, uint256 exitDate, string reason);\\n    error InvalidExitCondition();\\n    error InvalidVestingDuration();\\n    error InvalidVestingCliffDuration();\\n    error InvalidPoolOutSupplyAmount();\\n    error InvalidAmount();\\n    error StreamFactoryAddressAlreadySet();\\n    error InvalidStreamFactoryAddress();\\n    error InvalidPositionStorageAddress();\\n    error InvalidImplementationAddress();\\n}\\n\",\"keccak256\":\"0x8b827cfc338384eeecb7fa6451acdf90ed0c4e20ef70cc48f0d659dfe3525bef\",\"license\":\"MIT\"},\"src/interfaces/IStreamEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n\\n\\ninterface IStreamEvents {\\n    event StreamCreated(\\n        address indexed streamFactoryAddress,\\n        address streamOutToken,\\n        address streamInToken,\\n        address streamAddress,\\n        address positionStorageAddress,\\n        uint256 streamOutAmount,\\n        uint256 bootstrappingStartTime,\\n        uint256 streamStartTime,\\n        uint256 streamEndTime,\\n        uint256 threshold,\\n        string metadataIpfsHash,\\n        string tosVersion,\\n        uint16 streamId\\n    );\\n\\n    event StreamStateUpdated(\\n        address indexed streamAddress,\\n        uint256 lastUpdated,\\n        uint256 distIndex,\\n        uint256 outRemaining,\\n        uint256 inSupply,\\n        uint256 spentIn,\\n        uint256 currentStreamedPrice\\n    );\\n\\n    event Subscribed(\\n        address indexed streamAddress,\\n        address indexed subscriber,\\n        uint256 positionInBalance,\\n        uint256 positionShares,\\n        uint256 positionLastUpdateTime,\\n        uint256 positionSpentIn,\\n        uint256 positionPurchased,\\n        uint256 positionIndex,\\n        uint256 streamInSupply,\\n        uint256 streamShares\\n    );\\n\\n    event StreamSynced(\\n        address indexed streamAddress,\\n        uint256 lastUpdated,\\n        uint8 newStatus,\\n        uint256 distIndex,\\n        uint256 outRemaining,\\n        uint256 inSupply,\\n        uint256 spentIn,\\n        uint256 currentStreamedPrice\\n    );\\n\\n    event PositionSynced(\\n        address indexed streamAddress,\\n        address indexed subscriber,\\n        uint256 positionInBalance,\\n        uint256 positionShares,\\n        uint256 positionLastUpdateTime,\\n        uint256 positionSpentIn,\\n        uint256 positionPurchased,\\n        uint256 positionIndex\\n    );\\n\\n    event Withdrawn(\\n        address indexed streamAddress,\\n        address indexed subscriber,\\n        uint256 positionInBalance,\\n        uint256 positionShares,\\n        uint256 positionLastUpdateTime,\\n        uint256 positionSpentIn,\\n        uint256 positionPurchased,\\n        uint256 positionIndex,\\n        uint256 streamInSupply,\\n        uint256 streamShares\\n    );\\n\\n    event ExitRefunded(\\n        address indexed streamAddress,\\n        address indexed subscriber,\\n        uint256 refundedAmount,\\n        uint256 exitTimestamp\\n    );\\n    event ExitStreamed(\\n        address indexed streamAddress,\\n        address indexed subscriber,\\n        uint256 purchased,\\n        uint256 spentIn,\\n        uint256 exitTimestamp\\n    );\\n\\n    event FinalizedStreamed(\\n        address indexed streamAddress,\\n        address indexed creator,\\n        uint256 creatorRevenue,\\n        uint256 exitFeeAmount,\\n        uint256 refundedOutAmount\\n    );\\n\\n    event FinalizedRefunded(address indexed streamAddress, address indexed creator, uint256 refundedOutAmount);\\n\\n    event FactoryInitialized(\\n        address indexed factory,\\n        address streamImplementationAddress,\\n        address poolWrapperAddress,\\n        address feeCollector,\\n        address protocolAdmin,\\n        address streamCreationFeeToken,\\n        address[] acceptedInSupplyTokens,\\n        uint256 streamCreationFee,\\n        uint256 exitFeeRatio,\\n        uint256 minWaitingDuration,\\n        uint256 minBootstrappingDuration,\\n        uint256 minStreamDuration,\\n        string tosVersion,\\n        address vestingAddress\\n    );\\n\\n    event ParamsUpdated(\\n        address indexed factory,\\n        uint256 streamCreationFee,\\n        uint256 exitFeeRatio,\\n        uint256 minWaitingDuration,\\n        uint256 minBootstrappingDuration,\\n        uint256 minStreamDuration,\\n        string tosVersion\\n    );\\n\\n    event FeeCollectorUpdated(address indexed factory, address newFeeCollector);\\n\\n    event ProtocolAdminUpdated(address indexed factory, address newProtocolAdmin);\\n\\n    event FrozenStateUpdated(address indexed factory, bool frozen);\\n\\n    event AcceptedTokensUpdated(address indexed factory, address[] tokensAdded, address[] tokensRemoved);\\n\\n    event StreamCancelled(address indexed streamAddress, address creator, uint256 outSupply, uint8 status);\\n\\n    event VestingContractDeployed(address indexed factoryAddress, address vestingContract);\\n\\n    event PoolWrapperUpdated(address indexed factoryAddress, address poolWrapper);\\n}\\n\",\"keccak256\":\"0x24d220d249ef858e365bacd87e8dd0283643af1a2bdaa9d005c0763a634e260e\",\"license\":\"MIT\"},\"src/interfaces/IStreamFactoryErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n// StreamFactory errors\\ninterface IStreamFactoryErrors {\\n    // StreamFactory errors\\n    error InvalidBootstrappingStartTime();\\n    error InvalidStreamStartTime();\\n    error InvalidStreamEndTime();\\n    error StreamDurationTooShort();\\n    error BootstrappingDurationTooShort();\\n    error WaitingDurationTooShort();\\n    error ContractFrozen();\\n    error InvalidExitFeeRatio();\\n    error ZeroOutSupplyNotAllowed();\\n    error StreamInputTokenNotAccepted();\\n    error InvalidBootstrappingTime();\\n    error StreamStartMustBeAfterBootstrapping();\\n    error StreamEndMustBeAfterStart();\\n    error InvalidToSVersion();\\n    error TokenTransferFailed();\\n    error StreamAddressPredictionFailed();\\n    error InvalidFeeCollector();\\n    error InvalidProtocolAdmin();\\n    error NotAdmin();\\n    error InvalidPoolWrapper();\\n    error InvalidImplementationAddress();\\n    error InvalidStreamCreationFeeToken();\\n    error AlreadyInitialized();\\n    error InvalidAcceptedInSupplyTokens();\\n    error InvalidStreamImplementationAddress();\\n    error InvalidOutSupplyToken();\\n    error InvalidCreator();\\n    error InvalidVestingDuration();\\n}\\n\",\"keccak256\":\"0xf8f4b073be16d763e5405c34da885c9e3521626546a2f84057b2629c9fb602e3\",\"license\":\"MIT\"},\"src/interfaces/IVestingFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/**\\n * @title IVestingFactory\\n * @dev Interface for the VestingFactory contract that creates OpenZeppelin VestingWallet instances\\n */\\ninterface IVestingFactory {\\n    /**\\n     * @dev Creates a VestingWallet and transfers tokens to it in one transaction\\n     * @param beneficiary address of the beneficiary\\n     * @param startTime the time (as Unix time) at which point vesting begins\\n     * @param duration duration in seconds of the period in which the tokens will vest\\n     * @param token the ERC20 token to transfer to the vesting wallet\\n     * @param amount the amount of tokens to transfer\\n     * @return vestingWallet the address of the created VestingWallet\\n     */\\n    function createVestingWalletWithTokens(\\n        address beneficiary,\\n        uint64 startTime,\\n        uint64 duration,\\n        address token,\\n        uint256 amount\\n    ) external returns (address vestingWallet);\\n\\n    /**\\n     * @dev Event emitted when a new VestingWallet is created\\n     */\\n    event VestingWalletCreated(\\n        address indexed beneficiary,\\n        address indexed vestingWallet,\\n        uint64 startTime,\\n        uint64 duration,\\n        address token,\\n        uint256 amount\\n    );\\n}\\n\",\"keccak256\":\"0x926552fdbeaade65fedba09b29e059def06e0d09e7ddeb4070a6b1bd57359875\",\"license\":\"MIT\"},\"src/lib/math/DecimalMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/**\\n * @title DecimalMath\\n * @author Adnan Deniz Corlu (@Ninjatosba)\\n * @notice Library for high-precision decimal arithmetic operations\\n * @dev Provides decimal arithmetic with 6 decimal places precision (1e6):\\n *      - Supports basic arithmetic operations (add, sub, mul, div)\\n *      - Includes comparison operations (gt, lt)\\n *      - Provides conversion between decimals and integers\\n *      - Used throughout the protocol for precise calculations\\n */\\n\\n/**\\n * @title Decimal type and math operations\\n * @dev Library for handling decimal math operations with fixed-point arithmetic\\n */\\n\\nstruct Decimal {\\n    uint256 value; // Value scaled by DECIMAL_PRECISION\\n}\\n\\n/**\\n * @title DecimalMath\\n * @dev Library for handling decimal math operations with fixed-point arithmetic\\n */\\nlibrary DecimalMath {\\n    // We'll use 6 decimal places for precision\\n    uint256 public constant DECIMAL_PRECISION = 1e6;\\n\\n    // Convert a regular number to a Decimal\\n    function fromNumber(uint256 value) internal pure returns (Decimal memory) {\\n        return Decimal({ value: value * DECIMAL_PRECISION });\\n    }\\n\\n    // Convert a Decimal to a regular number while keeping the remainder\\n    function toNumber(Decimal memory d) internal pure returns (uint256, Decimal memory) {\\n        return (d.value / DECIMAL_PRECISION, Decimal({ value: d.value % DECIMAL_PRECISION }));\\n    }\\n\\n    // Floor division for Decimal\\n    function floor(Decimal memory d) internal pure returns (uint256) {\\n        return d.value / DECIMAL_PRECISION;\\n    }\\n\\n    // Ceiling division for Decimal\\n    function ceil(Decimal memory d) internal pure returns (uint256) {\\n        return (d.value + DECIMAL_PRECISION - 1) / DECIMAL_PRECISION;\\n    }\\n\\n    // Multiply two Decimals\\n    function mul(Decimal memory a, Decimal memory b) internal pure returns (Decimal memory) {\\n        return Decimal({ value: (a.value * b.value) / DECIMAL_PRECISION });\\n    }\\n\\n    // Multiply Decimal by a scalar\\n    function mulScalar(Decimal memory a, uint256 scalar) internal pure returns (Decimal memory) {\\n        return Decimal({ value: a.value * scalar });\\n    }\\n\\n    // Divide two Decimals\\n    function div(Decimal memory a, Decimal memory b) internal pure returns (Decimal memory) {\\n        return Decimal({ value: (a.value * DECIMAL_PRECISION) / b.value });\\n    }\\n\\n    // Divide Decimal by a scalar\\n    function divScalar(Decimal memory a, uint256 scalar) internal pure returns (Decimal memory) {\\n        return Decimal({ value: a.value / scalar });\\n    }\\n\\n    // Add two Decimals\\n    function add(Decimal memory a, Decimal memory b) internal pure returns (Decimal memory) {\\n        return Decimal({ value: a.value + b.value });\\n    }\\n\\n    // Subtract two Decimals\\n    function sub(Decimal memory a, Decimal memory b) internal pure returns (Decimal memory) {\\n        return Decimal({ value: a.value - b.value });\\n    }\\n\\n    // From ratio to Decimal\\n    function fromRatio(uint256 num, uint256 denom) internal pure returns (Decimal memory) {\\n        return Decimal({ value: (num * DECIMAL_PRECISION) / denom });\\n    }\\n\\n    // > operator for Decimals\\n    function gt(Decimal memory a, Decimal memory b) internal pure returns (bool) {\\n        return a.value > b.value;\\n    }\\n\\n    // < operator for Decimals\\n    function lt(Decimal memory a, Decimal memory b) internal pure returns (bool) {\\n        return a.value < b.value;\\n    }\\n}\\n\",\"keccak256\":\"0x7e0f27cd31d784493bf5ae906477c16b2c5e03f06f5f5d530d8d6d6dbb222deb\",\"license\":\"MIT\"},\"src/lib/math/StreamMathLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/**\\n * @title StreamMathLib\\n * @author Adnan Deniz Corlu (@Ninjatosba)\\n * @notice Core mathematical engine powering StreamSwap's time-based distribution algorithm\\n * @dev This library implements the mathematical model that enables StreamSwap's unique\\n *      continuous token distribution mechanism. Unlike traditional AMMs or auction models,\\n *      StreamSwap calculates distributions based on time progression and participation timing.\\n *      \\n *      Key Algorithms:\\n *      - Time Differential Calculation: Determines distribution progress based on elapsed time\\n *      - Share-based Distribution: Calculates proportional token allocation per participant\\n *      - Dynamic Price Discovery: Computes real-time pricing based on participation\\n *      - Position Synchronization: Updates user positions with accrued distributions\\n *      - Exit Fee Computation: Applies configurable fees on successful stream exits\\n *      \\n *      Mathematical Precision:\\n *      - Uses DecimalMath library for 6-decimal precision (1e6)\\n *      - Handles edge cases like zero participation and boundary conditions\\n *      - Prevents overflow/underflow through careful calculation ordering\\n *      - Maintains accuracy across different time scales and token amounts\\n */\\n\\nimport { StreamTypes } from \\\"../../types/StreamTypes.sol\\\";\\nimport { DecimalMath, Decimal } from \\\"./DecimalMath.sol\\\";\\nimport { PositionTypes } from \\\"../../types/PositionTypes.sol\\\";\\nlibrary StreamMathLib {\\n    /**\\n     * @dev Calculates the time difference ratio between current time and last updated time\\n     * @param currentTimestamp Current timestamp\\n     * @param streamStartTime Timestamp when the stream starts\\n     * @param streamEndTime Timestamp when the stream ends\\n     * @param lastUpdated Timestamp when the stream was last updated\\n     * @return The ratio of time elapsed since last update compared to total remaining time (scaled by 1e18)\\n     */\\n    function calculateDiff(\\n        uint256 currentTimestamp,\\n        uint256 streamStartTime,\\n        uint256 streamEndTime,\\n        uint256 lastUpdated\\n    ) internal pure returns (Decimal memory) {\\n        // If the stream is not started yet or already ended, return 0\\n        if (currentTimestamp < streamStartTime || lastUpdated >= streamEndTime) {\\n            return DecimalMath.fromNumber(0);\\n        }\\n\\n        // If lastUpdated is before start time, set it to start time\\n        uint256 effectiveLastUpdated = lastUpdated;\\n        if (effectiveLastUpdated < streamStartTime) {\\n            effectiveLastUpdated = streamStartTime;\\n        }\\n\\n        // If current time is past end time, use end time instead\\n        uint256 effectiveNow = currentTimestamp;\\n        if (effectiveNow > streamEndTime) {\\n            effectiveNow = streamEndTime;\\n        }\\n\\n        uint256 numerator = effectiveNow - effectiveLastUpdated;\\n        uint256 denominator = streamEndTime - effectiveLastUpdated;\\n\\n        if (denominator == 0 || numerator == 0) {\\n            return DecimalMath.fromNumber(0);\\n        }\\n        // Return ratio of time elapsed since last update compared to total remaining time\\n        return DecimalMath.fromRatio(numerator, denominator);\\n    }\\n\\n    /**\\n     * @dev Calculates the stream status based on the current state and timestamp\\n     * @param currentStatus Current status of the stream\\n     * @param currentTime Current timestamp to check against\\n     * @param bootstrappingStartTime Timestamp when bootstrapping phase starts\\n     * @param streamStartTime Timestamp when active streaming starts\\n     * @param streamEndTime Timestamp when streaming ends\\n     * @return IStreamTypes.Status The calculated stream status\\n     */\\n    function calculateStreamStatus(\\n        StreamTypes.Status currentStatus,\\n        uint256 currentTime,\\n        uint256 bootstrappingStartTime,\\n        uint256 streamStartTime,\\n        uint256 streamEndTime\\n    ) internal pure returns (StreamTypes.Status) {\\n        // Don't update if stream is in a final state\\n        if (\\n            currentStatus == StreamTypes.Status.Cancelled ||\\n            currentStatus == StreamTypes.Status.FinalizedRefunded ||\\n            currentStatus == StreamTypes.Status.FinalizedStreamed\\n        ) {\\n            return currentStatus;\\n        }\\n\\n        // Update status based on current timestamp\\n        if (currentTime < bootstrappingStartTime) {\\n            return StreamTypes.Status.Waiting;\\n        } else if (currentTime >= bootstrappingStartTime && currentTime < streamStartTime) {\\n            return StreamTypes.Status.Bootstrapping;\\n        } else if (currentTime >= streamStartTime && currentTime < streamEndTime) {\\n            return StreamTypes.Status.Active;\\n        } else if (currentTime >= streamEndTime) {\\n            return StreamTypes.Status.Ended;\\n        }\\n\\n        // This should never be reached, but return current status as fallback\\n        return currentStatus;\\n    }\\n\\n    /**\\n     * @dev Calculates updated stream state based on time difference\\n     * @param state Current stream state\\n     * @param diff Time difference in seconds\\n     * @return Updated stream state\\n     */\\n    function calculateUpdatedState(\\n        StreamTypes.StreamState memory state,\\n        Decimal memory diff\\n    ) internal pure returns (StreamTypes.StreamState memory) {\\n        // Create a copy of the state to avoid modifying the input\\n        StreamTypes.StreamState memory newState = state;\\n\\n        if (newState.shares > 0 && diff.value > 0) {\\n            // Calculate new distribution balance and spent in amount\\n            Decimal memory newDecimalDistributionBalance = DecimalMath.mul(\\n                DecimalMath.fromNumber(newState.outRemaining),\\n                diff\\n            );\\n            uint256 newDistributionBalance = DecimalMath.floor(newDecimalDistributionBalance);\\n\\n            Decimal memory newDecimalSpentIn = DecimalMath.mul(DecimalMath.fromNumber(newState.inSupply), diff);\\n            uint256 spentIn = DecimalMath.floor(newDecimalSpentIn);\\n\\n            // Update state variables\\n            newState.spentIn += spentIn;\\n            newState.inSupply -= spentIn;\\n\\n            if (newDistributionBalance > 0) {\\n                newState.outRemaining -= newDistributionBalance;\\n                // Increment distribution index\\n                Decimal memory distIndexIncrementAmount = DecimalMath.fromRatio(\\n                    newDistributionBalance,\\n                    newState.shares\\n                );\\n                newState.distIndex = DecimalMath.add(newState.distIndex, distIndexIncrementAmount);\\n                // Update current streamed price\\n                newState.currentStreamedPrice = DecimalMath.fromRatio(spentIn, newDistributionBalance);\\n            }\\n        }\\n        return newState;\\n    }\\n\\n    function computeSharesAmount(\\n        uint256 amountIn,\\n        bool roundUp,\\n        uint256 inSupply,\\n        uint256 totalShares\\n    ) internal pure returns (uint256) {\\n        if (totalShares == 0 || amountIn == 0) {\\n            return amountIn;\\n        }\\n        // 42*21/42\\n        uint256 totalSharesIn = totalShares * amountIn;\\n\\n        if (roundUp) {\\n            return (totalSharesIn + inSupply - 1) / inSupply;\\n        } else {\\n            return totalSharesIn / inSupply;\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates the exit fee amount based on the spent in amount\\n     * @param spentInAmount Amount of tokens spent in the stream\\n     * @return exitFeeAmount The calculated fee amount\\n     * @return remainingAmount The remaining amount after fee deduction\\n     */\\n    function calculateExitFee(\\n        uint256 spentInAmount,\\n        Decimal memory exitFeeRatio\\n    ) internal pure returns (uint256 exitFeeAmount, uint256 remainingAmount) {\\n        Decimal memory decimalSpentIn = DecimalMath.fromNumber(spentInAmount);\\n\\n        // Calculate exit fee amount using DecimalMath\\n        Decimal memory decimalExitFeeAmount = DecimalMath.mul(decimalSpentIn, exitFeeRatio);\\n        exitFeeAmount = DecimalMath.floor(decimalExitFeeAmount);\\n        remainingAmount = spentInAmount - exitFeeAmount;\\n\\n        return (exitFeeAmount, remainingAmount);\\n    }\\n\\n    function syncPosition(\\n        PositionTypes.Position memory position,\\n        Decimal memory distIndex,\\n        uint256 totalShares,\\n        uint256 inSupply,\\n        uint256 nowTime\\n    ) internal pure returns (PositionTypes.Position memory) {\\n        // Calculate index difference for distributions since last update\\n        Decimal memory indexDiff = DecimalMath.sub(distIndex, position.index);\\n        uint256 spent = 0;\\n        uint256 purchased = 0;\\n\\n        // Only process if there are shares in the stream\\n        if (position.shares > 0) {\\n            // Calculate purchased amount based on position shares and index difference\\n            Decimal memory positionSharesDecimal = DecimalMath.fromNumber(position.shares);\\n            Decimal memory purchasedDecimal = DecimalMath.add(\\n                DecimalMath.mul(positionSharesDecimal, indexDiff),\\n                position.pendingReward\\n            );\\n            (purchased, purchasedDecimal) = DecimalMath.toNumber(purchasedDecimal);\\n            position.purchased += purchased;\\n            position.pendingReward = purchasedDecimal;\\n\\n            // Calculate remaining balance based on current shares ratio\\n            uint256 inRemaining = (inSupply * position.shares) / totalShares;\\n            // Calculate spent amount\\n            spent = position.inBalance - inRemaining;\\n            position.spentIn += spent;\\n            position.inBalance = inRemaining;\\n        }\\n\\n        // Update position tracking\\n        position.index = distIndex;\\n        position.lastUpdateTime = nowTime;\\n\\n        return position;\\n    }\\n}\\n\",\"keccak256\":\"0x7180b9de27b0f4af7f8b5f6178e35168ef17ae680bc83f5289e1d11559e44705\",\"license\":\"MIT\"},\"src/storage/PositionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/**\\n * @title PositionStorage\\n * @author Adnan Deniz Corlu (@Ninjatosba)\\n * @notice Secure, isolated storage for user participation data in StreamSwap streams\\n * @dev PositionStorage implements a separation-of-concerns architecture where user data\\n *      is isolated from stream logic for enhanced security and modularity. Each stream\\n *      deploys its own PositionStorage instance, ensuring data isolation and preventing\\n *      cross-stream interference.\\n *      \\n *      Security Features:\\n *      - Single-stream access control: Only the deploying stream can modify data\\n *      - Immutable stream address: Cannot be changed after deployment\\n *      - Isolated storage: Each stream has its own position data\\n *      - Comprehensive position tracking: Balances, shares, distributions, exit status\\n *   \\n */\\n\\nimport { PositionTypes } from \\\"../types/PositionTypes.sol\\\";\\nimport { Decimal, DecimalMath } from \\\"../lib/math/DecimalMath.sol\\\";\\n\\ncontract PositionStorage {\\n    using PositionTypes for PositionTypes.Position;\\n\\n    error UnauthorizedAccess();\\n    error InvalidStreamContractAddress();\\n\\n    mapping(address => PositionTypes.Position) private positions;\\n    address public immutable STREAM_CONTRACT_ADDRESS;\\n\\n    constructor(address contractAddress) {\\n        if (contractAddress == address(0)) revert InvalidStreamContractAddress();\\n        STREAM_CONTRACT_ADDRESS = contractAddress;\\n    }\\n\\n    function getPosition(address owner) external view returns (PositionTypes.Position memory) {\\n        return positions[owner];\\n    }\\n\\n    modifier onlyStreamContract() {\\n        if (msg.sender != STREAM_CONTRACT_ADDRESS) revert UnauthorizedAccess();\\n        _;\\n    }\\n\\n    function createPosition(\\n        address owner,\\n        uint256 inBalance,\\n        uint256 shares,\\n        Decimal memory index\\n    ) external onlyStreamContract {\\n        positions[owner] = PositionTypes.Position(\\n            inBalance,\\n            shares,\\n            index,\\n            block.timestamp,\\n            DecimalMath.fromNumber(0),\\n            0,\\n            0,\\n            0\\n        );\\n    }\\n\\n    function updatePosition(address owner, PositionTypes.Position memory position) external onlyStreamContract {\\n        positions[owner] = position;\\n    }\\n\\n    function setExitDate(address owner, uint256 exitDate) external onlyStreamContract {\\n        positions[owner].exitDate = exitDate;\\n    }\\n}\\n\",\"keccak256\":\"0x377e24af7cbdd7522429d30e07cf3568a93ed7a9fe482f7333c8e0d07fba8bb1\",\"license\":\"MIT\"},\"src/types/PoolWrapperTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nlibrary PoolWrapperTypes {\\n    struct CreatePoolMsg {\\n        address token0;\\n        address token1;\\n        uint256 amount0;\\n        uint256 amount1;\\n    }\\n\\n    struct CreatedPoolInfo {\\n        address poolAddress;\\n        address token0;\\n        address token1;\\n    }\\n}\\n\",\"keccak256\":\"0x5836346a21c27337ecac9a03a9d4878eaaec389fc46e11e70b3fa1c5e1dd406e\",\"license\":\"MIT\"},\"src/types/PositionTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport { Decimal } from \\\"../lib/math/DecimalMath.sol\\\";\\n\\nlibrary PositionTypes {\\n    struct Position {\\n        uint256 inBalance;\\n        uint256 shares;\\n        Decimal index;\\n        uint256 lastUpdateTime;\\n        Decimal pendingReward;\\n        uint256 spentIn;\\n        uint256 purchased;\\n        uint256 exitDate;\\n    }\\n}\\n\",\"keccak256\":\"0x665cd05889775e5034a2ad192fdbbcdc4b68631f4e1507af7468eba208d71197\",\"license\":\"MIT\"},\"src/types/StreamFactoryTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport { Decimal } from \\\"../lib/math/DecimalMath.sol\\\";\\n\\nlibrary StreamFactoryTypes {\\n    struct Params {\\n        uint256 streamCreationFee;\\n        address streamCreationFeeToken;\\n        Decimal exitFeeRatio;\\n        uint256 minWaitingDuration;\\n        uint256 minBootstrappingDuration;\\n        uint256 minStreamDuration;\\n        address feeCollector;\\n        address protocolAdmin;\\n        string tosVersion;\\n        address vestingFactoryAddress;\\n        address poolWrapperAddress;\\n        address streamImplementationAddress;\\n    }\\n\\n    struct InitializeStreamMessage {\\n        uint256 streamCreationFee;\\n        address streamCreationFeeToken;\\n        Decimal exitFeeRatio;\\n        uint256 minWaitingDuration;\\n        uint256 minBootstrappingDuration;\\n        uint256 minStreamDuration;\\n        address feeCollector;\\n        address protocolAdmin;\\n        string tosVersion;\\n        address poolWrapperAddress;\\n        address streamImplementationAddress;\\n        address[] acceptedInSupplyTokens;\\n    }\\n}\\n\",\"keccak256\":\"0x83fad9ed9d507beb88530810ee53f1e798cef5dff3fc4c94edcfbcb9e63c35f5\",\"license\":\"MIT\"},\"src/types/StreamTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport { Decimal } from \\\"../lib/math/DecimalMath.sol\\\";\\n\\nlibrary StreamTypes {\\n    enum Status {\\n        Waiting,\\n        Bootstrapping,\\n        Active,\\n        Ended,\\n        FinalizedRefunded,\\n        FinalizedStreamed,\\n        Cancelled\\n    }\\n\\n    struct CreateStreamMessage {\\n        address creator;\\n        address inSupplyToken;\\n        address outSupplyToken;\\n        uint256 streamOutAmount;\\n        uint256 threshold;\\n        uint256 bootstrappingStartTime;\\n        uint256 streamStartTime;\\n        uint256 streamEndTime;\\n        StreamMetadata metadata;\\n        VestingInfo creatorVesting;\\n        VestingInfo beneficiaryVesting;\\n        PoolInfo poolInfo;\\n        string tosVersion;\\n    }\\n    struct StreamTimes {\\n        uint256 bootstrappingStartTime;\\n        uint256 streamStartTime;\\n        uint256 streamEndTime;\\n    }\\n\\n    struct StreamMetadata {\\n        string ipfsHash;\\n    }\\n\\n    struct StreamState {\\n        uint256 outRemaining;\\n        Decimal distIndex;\\n        uint256 spentIn;\\n        uint256 shares;\\n        Decimal currentStreamedPrice;\\n        uint256 threshold;\\n        uint256 inSupply;\\n        uint256 outSupply;\\n        uint256 lastUpdated;\\n    }\\n\\n    struct StreamTokens {\\n        address inSupplyToken;\\n        address outSupplyToken;\\n    }\\n\\n    struct VestingInfo {\\n        bool isVestingEnabled;\\n        uint64 vestingDuration;\\n    }\\n\\n    struct PoolInfo {\\n        uint256 poolOutSupplyAmount;\\n    }\\n\\n    struct PostStreamActions {\\n        PoolInfo poolInfo;\\n        VestingInfo creatorVesting;\\n        VestingInfo beneficiaryVesting;\\n    }\\n}\\n\",\"keccak256\":\"0x70f9eab04f35219042acaa9af39185d6e27ab2504bbfa2bf976b7d83669de4d4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a0346100a057601f62002b0738819003918201601f19168301916001600160401b038311848410176100a5578084926020946040528339810103126100a057516001600160a01b0381168082036100a0571561008e57608052604051612a4b9081620000bc823960805181818161013e015281816108e301528181610e0f01528181611453015261172f0152f35b6040516332dcc54560e11b8152600490fd5b600080fd5b634e487b7160e01b600052604160045260246000fdfe608080604052600436101561001357600080fd5b60003560e01c90816302d05d3f14611b14575080630390547414610cbb5780630b8313881461156f5780630bcc8eba146114245780630e5634df146113455780630f574ba71461118657806316c19739146111555780632ae4e931146110dc5780632e1a7d4d14610f0557806334793e0514610e3e57806360d388d814610df95780636b330b7914610d175780638a03764f14610ce5578063af5c3ac414610cbb578063bdf4a94714610c00578063c0ae398c14610b7e578063cbf06415146107d6578063d08452c2146107a3578063e427d08c1461077a578063e9a9e144146106c25763f69e8fba1461010657600080fd5b346103a15760003660031901126103a1576000546001600160a01b0390811633036106b157604051635e615a6b60e01b8082529091907f00000000000000000000000000000000000000000000000000000000000000008216600084600481845afa9384156103ad57600094610694575b50600e54936101926101876121a7565b429060ff88166121e5565b600781101561067e5760030361066c576101b26101ad6120bf565b612243565b604081015160a0820151825160e084015190969391831061061157508680985060c0859896979801511695620f424092610205846101fc60408901516101f785612171565b6126bf565b51048092612139565b976000936000956012549081610574575b5050906102336102809392600560ff19600e541617600e55612595565b600054604080518c8152602081018590529081018d9052908a169030907f16d1e1ee4b51bbfbf5d46884cac3a98f673074103d40dfae8a99e5b51457b7d290606090a388600b5416612200565b82610400575b5050505060ff601354166000146103e6576101200151600b5460405163095ea7b360e01b8152929091166001600160a01b038116600484015260248301849052602092918390839060449082906000908b165af19182156103ad5783926103b9575b5060008054601354600b5460405163c4b2da5960e01b8152928a166001600160a01b0390811660048501526001600160401b03428116602486015260089390931c909216604484015289161660648201526084810195909552849160a49183915af180156103ad57610374575b50505b80610360575b005b8161035e92600c5416906000541690612200565b81813d83116103a6575b6103888183611bd4565b810103126103a15761039990611db4565b503880610355565b600080fd5b503d61037e565b6040513d6000823e3d90fd5b6103d890833d85116103df575b6103d08183611bd4565b810190612146565b50386102e8565b503d6103c6565b50906103fb91600b5416846000541690612200565b610358565b90919294600b541690600089600c54169660046040518094819382525afa9081156103ad57899161014091600091610551575b50015116610442838284612200565b61044d848288612200565b6040519060808201908282106001600160401b0383111761053b576060958b95608495600094604052855260208501998a5260408501908152878501918252866040519a8b9889976302e2616d60e61b895251166004880152511660248601525160448501525160648401525af19182156103ad5785926104d1575b808080610286565b91506060823d606011610533575b816104ec60609383611bd4565b810103126103a1578491604061052a8180519361050885611b9d565b61051181611db4565b855261051f60208201611db4565b602086015201611db4565b910152386104c9565b3d91506104df565b634e487b7160e01b600052604160045260246000fd5b61056e91503d806000833e6105668183611bd4565b810190611de6565b38610433565b93929950610587919a9650809550612171565b97610593600954612171565b9860006040516105a281611b4b565b5251838102908082048514901517156105fb576105f2610280946105e88f9c610233946105d09151906123b5565b604051906105dd82611b4b565b81526101f78b612171565b5104809798612139565b9a919293610216565b634e487b7160e01b600052601160045260246000fd5b969550925050506106309150600461035e9560ff191617600e55612595565b806000541690816040518481527f3f3e233ce59fa3e5f0b479b323538988fd213fa8f3007a95ff330489bf5d40a660203092a3600c5416612200565b604051637a851da960e11b8152600490fd5b634e487b7160e01b600052602160045260246000fd5b6106aa9194503d806000833e6105668183611bd4565b9238610177565b6040516282b42960e81b8152600490fd5b346103a15760003660031901126103a1576000546001600160a01b03908116338190036106b157600e54906107036106f86121a7565b429060ff85166121e5565b600781101561067e5761066c5760095460ff199092166006908117600e55604080516001600160a01b0384168152602081018590529081019190915261035e939030907febb55ea32d517c9ec85f61357977ac73b84e65ebeaedb528ed791d7e25e30a2b9080606081015b0390a2600c5416612200565b346103a15760003660031901126103a1576001546040516001600160a01b039091168152602090f35b346103a15760003660031901126103a157600b54600c54604080516001600160a01b039384168152919092166020820152f35b346103a15760003660031901126103a1576107f033611f80565b6107fa33826125de565b6108056101ad6120bf565b9061082260209182840151606085015160c08601519142936123d5565b9061083c60ff600e541642906108366121a7565b906121e5565b82519060c08401519461086c60a0860151954260e082015261085d84611d9b565b61086683612595565b33612531565b60a0604082015191015111906007811015918261067e5760058214918215610b5e575b8361067e5760048114938415610b50575b8415610b2b575b505050600014610acd575080610aaf575b5060145460ff1615610a9057604051635e615a6b60e01b81526001600160a01b0391906000816004817f000000000000000000000000000000000000000000000000000000000000000087165afa9081156103ad57839161012091600091610a75575b500151600c5460405163095ea7b360e01b8152929091166001600160a01b03811660048401526024830187905291939083908590604490829060009086165af19182156103ad5786948493610a58575b50601454600c5460405163c4b2da5960e01b81523360048201526001600160401b03428116602483015260089390931c9092166044830152929092166001600160a01b0316606483015260848201949094529283908160008160a4810103925af180156103ad57610a24575b50505b7f42c690944bb098e84e7a84f157acef3324928623259330b1ba03ec0495407bb460405180610a1f339530954291846040919493926060820195825260208201520152565b0390a3005b81813d8311610a51575b610a388183611bd4565b810103126103a157610a4990611db4565b5082806109d7565b503d610a2e565b610a6e90843d86116103df576103d08183611bd4565b508761096b565b610a8a91503d806000833e6105668183611bd4565b8761091b565b50600c54610aaa90839033906001600160a01b0316612200565b6109da565b600b54610ac7919033906001600160a01b0316612200565b836108b8565b91935091901561066c57610ae091611f19565b90610af6823360018060a01b03600b5416612200565b604051918252429082015233907f974d269dfe471aa7c09788034bef284519056ae9769575104f22c0456456dd0960403092a3005b909192935061067e576003149081610b48575b50908680806108a7565b905086610b3e565b5060068114935060006108a0565b600093508392506003811480610b76575b925061088f565b508115610b6f565b346103a15760003660031901126103a157610120600254604051610ba181611b4b565b6003548152600454600554604051610bb881611b4b565b6006548152600754906008549260095494600a54966040519889525160208901526040880152606087015251608086015260a085015260c084015260e0830152610100820152f35b346103a15760003660031901126103a15760a0604051610c1f81611b4b565b6012548152610cb9604051610c3381611b82565b610c9c6013549160ff8316151581526001600160401b03809360081c16602082015260405192610c6284611b82565b60145460ff81161515855260081c1660208401526040519451855260208501906001600160401b0360208092805115158552015116910152565b805115156060840152602001516001600160401b03166080830152565bf35b346103a15760003660031901126103a157610ce160ff600e541660405191829182611b38565b0390f35b346103a15760003660031901126103a157600f5460105460115460408051938452602084019290925290820152606090f35b346103a15760203660031901126103a157610d30611bf5565b610d3981611f80565b610d4382826125de565b610d7c610d6c610d546101ad6120bf565b926020840151606085015160c08601519142936123d5565b91610d778385612531565b612595565b805160208083015160608085015160a08087015160c0808901516040998a0151518a51998a5297890196909652978701929092529185015260808401919091528201526001600160a01b039092169130917f776f4c645ad4c2525f2c0862f3c0e3841c03f4fc680c1ceb4ab41b9eadccc4d1919081908101610a1f565b346103a15760003660031901126103a1576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b346103a15760003660031901126103a157610e576120bf565b610e83610e6b610e656121a7565b92612243565b91610e7583612595565b60ff600e54169042916121e5565b610e8c81611d9b565b61010082015191600782101561067e57602081015151815160c08301519160ff60806040860151950151519560405197885216602087015260408601526060850152608084015260a083015260c08201527f9a6ce334816e7b4b0cea88e41f3c652ec2e8064e2663e98f6d94d5ed90bc569060e03092a2005b346103a15760203660031901126103a15760043580156110ca57610f2833611f80565b90610f3333836125de565b610f3e610e756121a7565b600781101561067e576002811415806110bf575b61066c57610f616101ad6120bf565b906020820151610f81606084019182519660c086019742928951926123d5565b92835185116110a657947fca17ddd98e8725ab2aa1c70d19c5d777d10bd61a64e2525cf7ead7fe7f1ec2079161101061035e978651881460001461108c576110066020880151965b610fff60208a0198610fdc818b51612139565b8a52610fe98c8c51612139565b8b52610ff68c8951612139565b88528651612139565b8552611d9b565b610d778733612531565b611076855194519560608101519260a082015194604060c0840151930151519051915192604051968796339b309b8994919260e0969399989794919961010087019a8752602087015260408601526060850152608084015260a083015260c08201520152565b0390a3600b5433906001600160a01b0316612200565b6110066110a0855160208a0151908b6124eb565b96610fc9565b6040516318928cbf60e31b815260048101869052602490fd5b506001811415610f52565b60405163162908e360e11b8152600490fd5b346103a15760003660031901126103a1576101206110f86120bf565b604051908051825260208101515160208301526040810151604083015260608101516060830152608081015151608083015260a081015160a083015260c081015160c083015260e081015160e08301526101008091015190820152f35b346103a15760203660031901126103a157610100611179611174611bf5565b611f80565b610cb96040518092611d4e565b346103a15760203660031901126103a15760043580156110ca576111b860ff600e54166111b16121a7565b42916121e5565b600781101561067e5760018114158061133a575b61066c576111db6101ad6120bf565b916111e533611f80565b6020840151611204606086019182519360c088019442928651926123d5565b936112138351835190866124c3565b600b546040516323b872dd60e01b602082015233602482015230604482015260648082018890528152919760a08301939092916001600160a01b03166001600160401b0385118386101761053b577fac20383bc611fb24ecfa942ed37ae8648074130276759a168535c23c5cf026c39761129a6112cc946112bf936112d698604052612767565b6112a5818b51611f19565b8a5260208a016112b68c8251611f19565b90528751611f19565b8652610fff898651611f19565b610d778633612531565b610a1f84519460608101519260a082015194604060c0840151930151519051915192604051968796339b309b8994919260e0969399989794919961010087019a8752602087015260408601526060850152608084015260a083015260c08201520152565b5060028114156111cc565b346103a15760003660031901126103a1576040516000600d5461136781611cc5565b808452906020906001908181169081156113fa57506001146113a0575b610ce18561139481870382611bd4565b60405191829182611d22565b600d600090815293507fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb55b8385106113e75750505050810160200161139482610ce1611384565b80548686018401529382019381016113cb565b869550610ce19693506020925061139494915060ff191682840152151560051b8201019293611384565b346103a15760003660031901126103a157604051635e615a6b60e01b81526001600160a01b03906000816004817f000000000000000000000000000000000000000000000000000000000000000086165afa9081156103ad57829160e091600091611554575b5001511633036106b157600e546114ad6114a26121a7565b429060ff84166121e5565b6007811015908161067e578015159182611545575b82611533575b505061066c5761035e9160066009549260ff191617600e558060005416906040517febb55ea32d517c9ec85f61357977ac73b84e65ebeaedb528ed791d7e25e30a2b30918061076e8787836040906006929493606082019560018060a01b0316825260208201520152565b90915061067e576002141583806114c8565b506001811415915060006114c2565b61156991503d806000833e6105668183611bd4565b8461148a565b346103a1576003196040368201126103a1576001600160401b03600435116103a1576101e081600435360301126103a157604051906101a082018281106001600160401b0382111761053b576040526115cc600435600401611c0b565b82526115dc602460043501611c0b565b60208301526115ef604460043501611c0b565b6040830152600435606481013560608401526084810135608084015260a481013560a084015260c481013560c084015260e481013560e084015261010401356001600160401b0381116103a157602090600435019182360301126103a1576040519061165a82611b4b565b6004810135906001600160401b0382116103a157600461167d9236920101611c3a565b81526101008201526116953661012460043501611c81565b6101208201526116ab3661016460043501611c81565b610140820152602060043536036101a31901126103a1576040516116ce81611b4b565b6101a4600435013581526101608201526101c460043501356001600160401b0381116103a157611705906004369181350101611c3a565b6101808201526024356001600160a01b03811681036103a1576001549060ff8260a01c166106b1577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031633036106b1576001600160a01b03811615611b0257610120830151805115159081611acf575b5050610140830151805115159081611a9c575b50506101608301515180611a70575b506001600160a01b03199182166001600160a01b039182161760015582516000805490931691161781556040516117d581611b4b565b526040516117e281611b4b565b6000815260608201519060006040516117fa81611b4b565b5260405161180781611b4b565b6000815260808401519160608501519360405161182381611b66565b81815282602082015260006040820152600060608201528360808201528460a0820152600060c08201528560e082015261010042910152600255516003556000600455600060055551600655600755600060085560095542600a5560018060a01b0360208201511660018060a01b03604083015116908160206040516118a881611b82565b83815201526bffffffffffffffffffffffff60a01b600b541617600b556bffffffffffffffffffffffff60a01b600c541617600c55610100810151519081516001600160401b03811161053b57611900600d54611cc5565b601f8111611a0b575b50602092601f8211600114611989579281929360009261197e575b50508160011b916000199060031b1c191617600d555b60ff19600e5416600e5560a08101519060e060c082015191015191611960604051611b9d565b600f556010556011556001805460ff60a01b1916600160a01b179055005b015190508380611924565b601f19821693600d6000527fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb59160005b8681106119f357508360019596106119da575b505050811b01600d5561193a565b015160001960f88460031b161c191690558380806119cc565b919260206001819286850151815501940192016119b9565b600d6000527fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb5601f830160051c81019160208410611a66575b601f0160051c01905b818110611a5a5750611909565b60008155600101611a4d565b9091508190611a44565b606084015110611a8a57610160830151516012558361179f565b60405163c9c0f41360e01b8152600490fd5b60ff68ffffffffffffffff00602060145493015160081b1692169068ffffffffffffffffff191617176014558380611790565b60ff68ffffffffffffffff00602060135493015160081b1692169068ffffffffffffffffff19161717601355838061177d565b60405163d2d441ff60e01b8152600490fd5b346103a15760003660031901126103a1576000546001600160a01b03168152602090f35b91906020830192600782101561067e5752565b602081019081106001600160401b0382111761053b57604052565b61012081019081106001600160401b0382111761053b57604052565b604081019081106001600160401b0382111761053b57604052565b606081019081106001600160401b0382111761053b57604052565b61010081019081106001600160401b0382111761053b57604052565b90601f801991011681019081106001600160401b0382111761053b57604052565b600435906001600160a01b03821682036103a157565b35906001600160a01b03821682036103a157565b6001600160401b03811161053b57601f01601f191660200190565b81601f820112156103a157803590611c5182611c1f565b92611c5f6040519485611bd4565b828452602083830101116103a157816000926020809301838601378301015290565b91908260409103126103a157604051611c9981611b82565b809280359081151582036103a15760209183520135906001600160401b03821682036103a15760200152565b90600182811c92168015611cf5575b6020831014611cdf57565b634e487b7160e01b600052602260045260246000fd5b91607f1691611cd4565b60005b838110611d125750506000910152565b8181015183820152602001611d02565b60409160208252611d428151809281602086015260208686019101611cff565b601f01601f1916010190565b60e080918051845260208101516020850152604081015151604085015260608101516060850152608081015151608085015260a081015160a085015260c081015160c08501520151910152565b600781101561067e5760ff8019600e5416911617600e55565b51906001600160a01b03821682036103a157565b91908260209103126103a157604051611de081611b4b565b91518252565b60209182828203126103a15781516001600160401b03928382116103a15701916101809384848403126103a1576040519485018581108382111761053b5760405283518552611e36818501611db4565b81860152611e478360408601611dc8565b6040860152606084015160608601526080840151608086015260a084015160a0860152611e7660c08501611db4565b60c0860152611e8760e08501611db4565b60e086015261010091828501519081116103a157840183601f820112156103a157805190611eb482611c1f565b94611ec26040519687611bd4565b8286528383830101116103a15782611edd9386019101611cff565b830152610120611eee818301611db4565b90830152610140611f00818301611db4565b90830152611f12610160809201611db4565b9082015290565b919082018092116105fb57565b60405190611f3382611bb8565b8160e0600091828152826020820152604051611f4e81611b4b565b8381526040820152826060820152604051611f6881611b4b565b83815260808201528260a08201528260c08201520152565b611f88611f26565b506001546040516316c1973960e01b81526001600160a01b0392831660048201529161010091829184916024918391165afa9182156103ad57600092611fcd57505090565b908092503d8311612057575b611fe38183611bd4565b810191818303126103a15760e0906120346040519361200185611bb8565b825185526020830151602086015261201c8160408501611dc8565b60408601526060830151606086015260808301611dc8565b608084015260a081015160a084015260c081015160c0840152015160e082015290565b503d611fd9565b6040519061206b82611b66565b8161010060009182815260405161208181611b4b565b83815260208201528260408201528260608201526040516120a181611b4b565b83815260808201528260a08201528260c08201528260e08201520152565b6120c761205e565b506040516120d481611b66565b60025481526040516120e581611b4b565b600354815260208201526004546040820152600554606082015260405161210b81611b4b565b6006548152608082015260075460a082015260085460c082015260095460e0820152600a5461010082015290565b919082039182116105fb57565b908160209103126103a1575180151581036103a15790565b818102929181159184041417156105fb57565b600060405161217f81611b4b565b52620f4240908181029181830414901517156105fb57604051906121a282611b4b565b815290565b6000604080516121b681611b9d565b82815282602082015201526040516121cd81611b9d565b600f5481526010546020820152601154604082015290565b906121fd9281519060406020840151930151936126ee565b90565b60405163a9059cbb60e01b60208201526001600160a01b039290921660248301526044808301939093529181526122419161223c606483611bd4565b612767565b565b61224b61205e565b506122546121a7565b612271604060208301519201519161010084019283519142612874565b8051156123ae5761228061205e565b50606083019081511515806123a4575b612310575b50504290526020810151517ff7f050a5e163dbe15fb695b5b2e83ef129fc3565263dc8fc74049d3739e62fde825160c08401519061230a604086015160808701515190604051948594309842879260a094919796959260c0850198855260208501526040840152606083015260808201520152565b0390a290565b620f42409081612324826101f78851612171565b51049161233960c08701926101f78451612171565b5104906040860161234b838251611f19565b9052612358828251612139565b905281612366575b50612295565b61238161239793612378848851612139565b87525183612952565b61239060208701918251612928565b9052612952565b6080830152388080612360565b5080511515612290565b5042905290565b81156123bf570490565b634e487b7160e01b600052601260045260246000fd5b93929190916123e2611f26565b506040850191612406835160006040516123fb81611b4b565b528551905190612139565b6040519061241382611b4b565b815260208701928351938885612433575b50505050505052606082015290565b612446612495946101f761249a98612171565b6124566080830191825190612928565b600060405161246481611b4b565b525161248b620f424060c06040519561247c87611b4b565b82850687520192048251611f19565b905252519061215e565b6123b5565b6124a5818651612139565b6124b460a08701918251611f19565b90528452388080808088612424565b91801580156124e3575b6124de576121fd926124959161215e565b505090565b5082156124cd565b909180158015612529575b6125235761250861250d92849261215e565b611f19565b6000198101919082116105fb576121fd916123b5565b50905090565b5081156124f6565b6001546001600160a01b03908116803b156103a157600092836101249261257360405197889687956360d6081360e11b87521660048601526024850190611d4e565b5af180156103ad576125825750565b6001600160401b03811161053b57604052565b80516002556020810151516003556040810151600455606081015160055560808101515160065560a081015160075560c081015160085560e08101516009556101000151600a55565b60208101908151801561265d575060e0015190816125fb57505050565b51604051631175404360e11b81526001600160a01b0390931660048401526024830152604482015260806064820152601b60848201527f506f736974696f6e2068617320616c726561647920657869746564000000000060a482015260c49150fd5b60e09190910151604051631175404360e11b81526001600160a01b038516600482015260248101929092526044820152608060648201526016608482015275506f736974696f6e20686173206e6f2073686172657360501b60a482015260c490fd5b620f4240916126e09160006040516126d681611b4b565b525190519061215e565b04604051906121a282611b4b565b9291909260078110158061067e576006821490811561275a575b811561274a575b50612742575082101561272457505050600090565b811015612732575050600190565b101561273d57600290565b600390565b935050505090565b905061067e57600581143861270f565b5050600481146000612708565b6040516127e4916001600160a01b031661278082611b82565b6000806020958685527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656487860152868151910182855af13d1561286c573d916127c883611c1f565b926127d66040519485611bd4565b83523d60008785013e612980565b805190828215928315612854575b505050156127fd5750565b6084906040519062461bcd60e51b82526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152fd5b6128649350820181019101612146565b3882816127f2565b606091612980565b92909192600060405161288681611b4b565b52828110801561291e575b61290c57826128ba938310612904575b50818482116128fc575b6128b491612139565b92612139565b801580156128f4575b6128d0576121fd91612952565b505060006040516128e081611b4b565b526040516128ed81611b4b565b6000815290565b5081156128c3565b8491506128ab565b9150386128a1565b5050505060006040516128e081611b4b565b5083821015612891565b9061294591600060405161293b81611b4b565b5251905190611f19565b604051906121a282611b4b565b90600060405161296181611b4b565b52620f4240918281029281840414901517156105fb57612945916123b5565b919290156129e25750815115612994575090565b3b1561299d5790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b8251909150156129f55750805190602001fd5b60405162461bcd60e51b8152908190612a119060048301611d22565b0390fdfea26469706673582212202da5e405ff8525fea47bd81a20d2b6439d26e1a318b1e555f0b390153aa45ace64736f6c63430008180033",
  "deployedBytecode": "0x608080604052600436101561001357600080fd5b60003560e01c90816302d05d3f14611b14575080630390547414610cbb5780630b8313881461156f5780630bcc8eba146114245780630e5634df146113455780630f574ba71461118657806316c19739146111555780632ae4e931146110dc5780632e1a7d4d14610f0557806334793e0514610e3e57806360d388d814610df95780636b330b7914610d175780638a03764f14610ce5578063af5c3ac414610cbb578063bdf4a94714610c00578063c0ae398c14610b7e578063cbf06415146107d6578063d08452c2146107a3578063e427d08c1461077a578063e9a9e144146106c25763f69e8fba1461010657600080fd5b346103a15760003660031901126103a1576000546001600160a01b0390811633036106b157604051635e615a6b60e01b8082529091907f00000000000000000000000000000000000000000000000000000000000000008216600084600481845afa9384156103ad57600094610694575b50600e54936101926101876121a7565b429060ff88166121e5565b600781101561067e5760030361066c576101b26101ad6120bf565b612243565b604081015160a0820151825160e084015190969391831061061157508680985060c0859896979801511695620f424092610205846101fc60408901516101f785612171565b6126bf565b51048092612139565b976000936000956012549081610574575b5050906102336102809392600560ff19600e541617600e55612595565b600054604080518c8152602081018590529081018d9052908a169030907f16d1e1ee4b51bbfbf5d46884cac3a98f673074103d40dfae8a99e5b51457b7d290606090a388600b5416612200565b82610400575b5050505060ff601354166000146103e6576101200151600b5460405163095ea7b360e01b8152929091166001600160a01b038116600484015260248301849052602092918390839060449082906000908b165af19182156103ad5783926103b9575b5060008054601354600b5460405163c4b2da5960e01b8152928a166001600160a01b0390811660048501526001600160401b03428116602486015260089390931c909216604484015289161660648201526084810195909552849160a49183915af180156103ad57610374575b50505b80610360575b005b8161035e92600c5416906000541690612200565b81813d83116103a6575b6103888183611bd4565b810103126103a15761039990611db4565b503880610355565b600080fd5b503d61037e565b6040513d6000823e3d90fd5b6103d890833d85116103df575b6103d08183611bd4565b810190612146565b50386102e8565b503d6103c6565b50906103fb91600b5416846000541690612200565b610358565b90919294600b541690600089600c54169660046040518094819382525afa9081156103ad57899161014091600091610551575b50015116610442838284612200565b61044d848288612200565b6040519060808201908282106001600160401b0383111761053b576060958b95608495600094604052855260208501998a5260408501908152878501918252866040519a8b9889976302e2616d60e61b895251166004880152511660248601525160448501525160648401525af19182156103ad5785926104d1575b808080610286565b91506060823d606011610533575b816104ec60609383611bd4565b810103126103a1578491604061052a8180519361050885611b9d565b61051181611db4565b855261051f60208201611db4565b602086015201611db4565b910152386104c9565b3d91506104df565b634e487b7160e01b600052604160045260246000fd5b61056e91503d806000833e6105668183611bd4565b810190611de6565b38610433565b93929950610587919a9650809550612171565b97610593600954612171565b9860006040516105a281611b4b565b5251838102908082048514901517156105fb576105f2610280946105e88f9c610233946105d09151906123b5565b604051906105dd82611b4b565b81526101f78b612171565b5104809798612139565b9a919293610216565b634e487b7160e01b600052601160045260246000fd5b969550925050506106309150600461035e9560ff191617600e55612595565b806000541690816040518481527f3f3e233ce59fa3e5f0b479b323538988fd213fa8f3007a95ff330489bf5d40a660203092a3600c5416612200565b604051637a851da960e11b8152600490fd5b634e487b7160e01b600052602160045260246000fd5b6106aa9194503d806000833e6105668183611bd4565b9238610177565b6040516282b42960e81b8152600490fd5b346103a15760003660031901126103a1576000546001600160a01b03908116338190036106b157600e54906107036106f86121a7565b429060ff85166121e5565b600781101561067e5761066c5760095460ff199092166006908117600e55604080516001600160a01b0384168152602081018590529081019190915261035e939030907febb55ea32d517c9ec85f61357977ac73b84e65ebeaedb528ed791d7e25e30a2b9080606081015b0390a2600c5416612200565b346103a15760003660031901126103a1576001546040516001600160a01b039091168152602090f35b346103a15760003660031901126103a157600b54600c54604080516001600160a01b039384168152919092166020820152f35b346103a15760003660031901126103a1576107f033611f80565b6107fa33826125de565b6108056101ad6120bf565b9061082260209182840151606085015160c08601519142936123d5565b9061083c60ff600e541642906108366121a7565b906121e5565b82519060c08401519461086c60a0860151954260e082015261085d84611d9b565b61086683612595565b33612531565b60a0604082015191015111906007811015918261067e5760058214918215610b5e575b8361067e5760048114938415610b50575b8415610b2b575b505050600014610acd575080610aaf575b5060145460ff1615610a9057604051635e615a6b60e01b81526001600160a01b0391906000816004817f000000000000000000000000000000000000000000000000000000000000000087165afa9081156103ad57839161012091600091610a75575b500151600c5460405163095ea7b360e01b8152929091166001600160a01b03811660048401526024830187905291939083908590604490829060009086165af19182156103ad5786948493610a58575b50601454600c5460405163c4b2da5960e01b81523360048201526001600160401b03428116602483015260089390931c9092166044830152929092166001600160a01b0316606483015260848201949094529283908160008160a4810103925af180156103ad57610a24575b50505b7f42c690944bb098e84e7a84f157acef3324928623259330b1ba03ec0495407bb460405180610a1f339530954291846040919493926060820195825260208201520152565b0390a3005b81813d8311610a51575b610a388183611bd4565b810103126103a157610a4990611db4565b5082806109d7565b503d610a2e565b610a6e90843d86116103df576103d08183611bd4565b508761096b565b610a8a91503d806000833e6105668183611bd4565b8761091b565b50600c54610aaa90839033906001600160a01b0316612200565b6109da565b600b54610ac7919033906001600160a01b0316612200565b836108b8565b91935091901561066c57610ae091611f19565b90610af6823360018060a01b03600b5416612200565b604051918252429082015233907f974d269dfe471aa7c09788034bef284519056ae9769575104f22c0456456dd0960403092a3005b909192935061067e576003149081610b48575b50908680806108a7565b905086610b3e565b5060068114935060006108a0565b600093508392506003811480610b76575b925061088f565b508115610b6f565b346103a15760003660031901126103a157610120600254604051610ba181611b4b565b6003548152600454600554604051610bb881611b4b565b6006548152600754906008549260095494600a54966040519889525160208901526040880152606087015251608086015260a085015260c084015260e0830152610100820152f35b346103a15760003660031901126103a15760a0604051610c1f81611b4b565b6012548152610cb9604051610c3381611b82565b610c9c6013549160ff8316151581526001600160401b03809360081c16602082015260405192610c6284611b82565b60145460ff81161515855260081c1660208401526040519451855260208501906001600160401b0360208092805115158552015116910152565b805115156060840152602001516001600160401b03166080830152565bf35b346103a15760003660031901126103a157610ce160ff600e541660405191829182611b38565b0390f35b346103a15760003660031901126103a157600f5460105460115460408051938452602084019290925290820152606090f35b346103a15760203660031901126103a157610d30611bf5565b610d3981611f80565b610d4382826125de565b610d7c610d6c610d546101ad6120bf565b926020840151606085015160c08601519142936123d5565b91610d778385612531565b612595565b805160208083015160608085015160a08087015160c0808901516040998a0151518a51998a5297890196909652978701929092529185015260808401919091528201526001600160a01b039092169130917f776f4c645ad4c2525f2c0862f3c0e3841c03f4fc680c1ceb4ab41b9eadccc4d1919081908101610a1f565b346103a15760003660031901126103a1576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b346103a15760003660031901126103a157610e576120bf565b610e83610e6b610e656121a7565b92612243565b91610e7583612595565b60ff600e54169042916121e5565b610e8c81611d9b565b61010082015191600782101561067e57602081015151815160c08301519160ff60806040860151950151519560405197885216602087015260408601526060850152608084015260a083015260c08201527f9a6ce334816e7b4b0cea88e41f3c652ec2e8064e2663e98f6d94d5ed90bc569060e03092a2005b346103a15760203660031901126103a15760043580156110ca57610f2833611f80565b90610f3333836125de565b610f3e610e756121a7565b600781101561067e576002811415806110bf575b61066c57610f616101ad6120bf565b906020820151610f81606084019182519660c086019742928951926123d5565b92835185116110a657947fca17ddd98e8725ab2aa1c70d19c5d777d10bd61a64e2525cf7ead7fe7f1ec2079161101061035e978651881460001461108c576110066020880151965b610fff60208a0198610fdc818b51612139565b8a52610fe98c8c51612139565b8b52610ff68c8951612139565b88528651612139565b8552611d9b565b610d778733612531565b611076855194519560608101519260a082015194604060c0840151930151519051915192604051968796339b309b8994919260e0969399989794919961010087019a8752602087015260408601526060850152608084015260a083015260c08201520152565b0390a3600b5433906001600160a01b0316612200565b6110066110a0855160208a0151908b6124eb565b96610fc9565b6040516318928cbf60e31b815260048101869052602490fd5b506001811415610f52565b60405163162908e360e11b8152600490fd5b346103a15760003660031901126103a1576101206110f86120bf565b604051908051825260208101515160208301526040810151604083015260608101516060830152608081015151608083015260a081015160a083015260c081015160c083015260e081015160e08301526101008091015190820152f35b346103a15760203660031901126103a157610100611179611174611bf5565b611f80565b610cb96040518092611d4e565b346103a15760203660031901126103a15760043580156110ca576111b860ff600e54166111b16121a7565b42916121e5565b600781101561067e5760018114158061133a575b61066c576111db6101ad6120bf565b916111e533611f80565b6020840151611204606086019182519360c088019442928651926123d5565b936112138351835190866124c3565b600b546040516323b872dd60e01b602082015233602482015230604482015260648082018890528152919760a08301939092916001600160a01b03166001600160401b0385118386101761053b577fac20383bc611fb24ecfa942ed37ae8648074130276759a168535c23c5cf026c39761129a6112cc946112bf936112d698604052612767565b6112a5818b51611f19565b8a5260208a016112b68c8251611f19565b90528751611f19565b8652610fff898651611f19565b610d778633612531565b610a1f84519460608101519260a082015194604060c0840151930151519051915192604051968796339b309b8994919260e0969399989794919961010087019a8752602087015260408601526060850152608084015260a083015260c08201520152565b5060028114156111cc565b346103a15760003660031901126103a1576040516000600d5461136781611cc5565b808452906020906001908181169081156113fa57506001146113a0575b610ce18561139481870382611bd4565b60405191829182611d22565b600d600090815293507fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb55b8385106113e75750505050810160200161139482610ce1611384565b80548686018401529382019381016113cb565b869550610ce19693506020925061139494915060ff191682840152151560051b8201019293611384565b346103a15760003660031901126103a157604051635e615a6b60e01b81526001600160a01b03906000816004817f000000000000000000000000000000000000000000000000000000000000000086165afa9081156103ad57829160e091600091611554575b5001511633036106b157600e546114ad6114a26121a7565b429060ff84166121e5565b6007811015908161067e578015159182611545575b82611533575b505061066c5761035e9160066009549260ff191617600e558060005416906040517febb55ea32d517c9ec85f61357977ac73b84e65ebeaedb528ed791d7e25e30a2b30918061076e8787836040906006929493606082019560018060a01b0316825260208201520152565b90915061067e576002141583806114c8565b506001811415915060006114c2565b61156991503d806000833e6105668183611bd4565b8461148a565b346103a1576003196040368201126103a1576001600160401b03600435116103a1576101e081600435360301126103a157604051906101a082018281106001600160401b0382111761053b576040526115cc600435600401611c0b565b82526115dc602460043501611c0b565b60208301526115ef604460043501611c0b565b6040830152600435606481013560608401526084810135608084015260a481013560a084015260c481013560c084015260e481013560e084015261010401356001600160401b0381116103a157602090600435019182360301126103a1576040519061165a82611b4b565b6004810135906001600160401b0382116103a157600461167d9236920101611c3a565b81526101008201526116953661012460043501611c81565b6101208201526116ab3661016460043501611c81565b610140820152602060043536036101a31901126103a1576040516116ce81611b4b565b6101a4600435013581526101608201526101c460043501356001600160401b0381116103a157611705906004369181350101611c3a565b6101808201526024356001600160a01b03811681036103a1576001549060ff8260a01c166106b1577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031633036106b1576001600160a01b03811615611b0257610120830151805115159081611acf575b5050610140830151805115159081611a9c575b50506101608301515180611a70575b506001600160a01b03199182166001600160a01b039182161760015582516000805490931691161781556040516117d581611b4b565b526040516117e281611b4b565b6000815260608201519060006040516117fa81611b4b565b5260405161180781611b4b565b6000815260808401519160608501519360405161182381611b66565b81815282602082015260006040820152600060608201528360808201528460a0820152600060c08201528560e082015261010042910152600255516003556000600455600060055551600655600755600060085560095542600a5560018060a01b0360208201511660018060a01b03604083015116908160206040516118a881611b82565b83815201526bffffffffffffffffffffffff60a01b600b541617600b556bffffffffffffffffffffffff60a01b600c541617600c55610100810151519081516001600160401b03811161053b57611900600d54611cc5565b601f8111611a0b575b50602092601f8211600114611989579281929360009261197e575b50508160011b916000199060031b1c191617600d555b60ff19600e5416600e5560a08101519060e060c082015191015191611960604051611b9d565b600f556010556011556001805460ff60a01b1916600160a01b179055005b015190508380611924565b601f19821693600d6000527fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb59160005b8681106119f357508360019596106119da575b505050811b01600d5561193a565b015160001960f88460031b161c191690558380806119cc565b919260206001819286850151815501940192016119b9565b600d6000527fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb5601f830160051c81019160208410611a66575b601f0160051c01905b818110611a5a5750611909565b60008155600101611a4d565b9091508190611a44565b606084015110611a8a57610160830151516012558361179f565b60405163c9c0f41360e01b8152600490fd5b60ff68ffffffffffffffff00602060145493015160081b1692169068ffffffffffffffffff191617176014558380611790565b60ff68ffffffffffffffff00602060135493015160081b1692169068ffffffffffffffffff19161717601355838061177d565b60405163d2d441ff60e01b8152600490fd5b346103a15760003660031901126103a1576000546001600160a01b03168152602090f35b91906020830192600782101561067e5752565b602081019081106001600160401b0382111761053b57604052565b61012081019081106001600160401b0382111761053b57604052565b604081019081106001600160401b0382111761053b57604052565b606081019081106001600160401b0382111761053b57604052565b61010081019081106001600160401b0382111761053b57604052565b90601f801991011681019081106001600160401b0382111761053b57604052565b600435906001600160a01b03821682036103a157565b35906001600160a01b03821682036103a157565b6001600160401b03811161053b57601f01601f191660200190565b81601f820112156103a157803590611c5182611c1f565b92611c5f6040519485611bd4565b828452602083830101116103a157816000926020809301838601378301015290565b91908260409103126103a157604051611c9981611b82565b809280359081151582036103a15760209183520135906001600160401b03821682036103a15760200152565b90600182811c92168015611cf5575b6020831014611cdf57565b634e487b7160e01b600052602260045260246000fd5b91607f1691611cd4565b60005b838110611d125750506000910152565b8181015183820152602001611d02565b60409160208252611d428151809281602086015260208686019101611cff565b601f01601f1916010190565b60e080918051845260208101516020850152604081015151604085015260608101516060850152608081015151608085015260a081015160a085015260c081015160c08501520151910152565b600781101561067e5760ff8019600e5416911617600e55565b51906001600160a01b03821682036103a157565b91908260209103126103a157604051611de081611b4b565b91518252565b60209182828203126103a15781516001600160401b03928382116103a15701916101809384848403126103a1576040519485018581108382111761053b5760405283518552611e36818501611db4565b81860152611e478360408601611dc8565b6040860152606084015160608601526080840151608086015260a084015160a0860152611e7660c08501611db4565b60c0860152611e8760e08501611db4565b60e086015261010091828501519081116103a157840183601f820112156103a157805190611eb482611c1f565b94611ec26040519687611bd4565b8286528383830101116103a15782611edd9386019101611cff565b830152610120611eee818301611db4565b90830152610140611f00818301611db4565b90830152611f12610160809201611db4565b9082015290565b919082018092116105fb57565b60405190611f3382611bb8565b8160e0600091828152826020820152604051611f4e81611b4b565b8381526040820152826060820152604051611f6881611b4b565b83815260808201528260a08201528260c08201520152565b611f88611f26565b506001546040516316c1973960e01b81526001600160a01b0392831660048201529161010091829184916024918391165afa9182156103ad57600092611fcd57505090565b908092503d8311612057575b611fe38183611bd4565b810191818303126103a15760e0906120346040519361200185611bb8565b825185526020830151602086015261201c8160408501611dc8565b60408601526060830151606086015260808301611dc8565b608084015260a081015160a084015260c081015160c0840152015160e082015290565b503d611fd9565b6040519061206b82611b66565b8161010060009182815260405161208181611b4b565b83815260208201528260408201528260608201526040516120a181611b4b565b83815260808201528260a08201528260c08201528260e08201520152565b6120c761205e565b506040516120d481611b66565b60025481526040516120e581611b4b565b600354815260208201526004546040820152600554606082015260405161210b81611b4b565b6006548152608082015260075460a082015260085460c082015260095460e0820152600a5461010082015290565b919082039182116105fb57565b908160209103126103a1575180151581036103a15790565b818102929181159184041417156105fb57565b600060405161217f81611b4b565b52620f4240908181029181830414901517156105fb57604051906121a282611b4b565b815290565b6000604080516121b681611b9d565b82815282602082015201526040516121cd81611b9d565b600f5481526010546020820152601154604082015290565b906121fd9281519060406020840151930151936126ee565b90565b60405163a9059cbb60e01b60208201526001600160a01b039290921660248301526044808301939093529181526122419161223c606483611bd4565b612767565b565b61224b61205e565b506122546121a7565b612271604060208301519201519161010084019283519142612874565b8051156123ae5761228061205e565b50606083019081511515806123a4575b612310575b50504290526020810151517ff7f050a5e163dbe15fb695b5b2e83ef129fc3565263dc8fc74049d3739e62fde825160c08401519061230a604086015160808701515190604051948594309842879260a094919796959260c0850198855260208501526040840152606083015260808201520152565b0390a290565b620f42409081612324826101f78851612171565b51049161233960c08701926101f78451612171565b5104906040860161234b838251611f19565b9052612358828251612139565b905281612366575b50612295565b61238161239793612378848851612139565b87525183612952565b61239060208701918251612928565b9052612952565b6080830152388080612360565b5080511515612290565b5042905290565b81156123bf570490565b634e487b7160e01b600052601260045260246000fd5b93929190916123e2611f26565b506040850191612406835160006040516123fb81611b4b565b528551905190612139565b6040519061241382611b4b565b815260208701928351938885612433575b50505050505052606082015290565b612446612495946101f761249a98612171565b6124566080830191825190612928565b600060405161246481611b4b565b525161248b620f424060c06040519561247c87611b4b565b82850687520192048251611f19565b905252519061215e565b6123b5565b6124a5818651612139565b6124b460a08701918251611f19565b90528452388080808088612424565b91801580156124e3575b6124de576121fd926124959161215e565b505090565b5082156124cd565b909180158015612529575b6125235761250861250d92849261215e565b611f19565b6000198101919082116105fb576121fd916123b5565b50905090565b5081156124f6565b6001546001600160a01b03908116803b156103a157600092836101249261257360405197889687956360d6081360e11b87521660048601526024850190611d4e565b5af180156103ad576125825750565b6001600160401b03811161053b57604052565b80516002556020810151516003556040810151600455606081015160055560808101515160065560a081015160075560c081015160085560e08101516009556101000151600a55565b60208101908151801561265d575060e0015190816125fb57505050565b51604051631175404360e11b81526001600160a01b0390931660048401526024830152604482015260806064820152601b60848201527f506f736974696f6e2068617320616c726561647920657869746564000000000060a482015260c49150fd5b60e09190910151604051631175404360e11b81526001600160a01b038516600482015260248101929092526044820152608060648201526016608482015275506f736974696f6e20686173206e6f2073686172657360501b60a482015260c490fd5b620f4240916126e09160006040516126d681611b4b565b525190519061215e565b04604051906121a282611b4b565b9291909260078110158061067e576006821490811561275a575b811561274a575b50612742575082101561272457505050600090565b811015612732575050600190565b101561273d57600290565b600390565b935050505090565b905061067e57600581143861270f565b5050600481146000612708565b6040516127e4916001600160a01b031661278082611b82565b6000806020958685527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656487860152868151910182855af13d1561286c573d916127c883611c1f565b926127d66040519485611bd4565b83523d60008785013e612980565b805190828215928315612854575b505050156127fd5750565b6084906040519062461bcd60e51b82526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152fd5b6128649350820181019101612146565b3882816127f2565b606091612980565b92909192600060405161288681611b4b565b52828110801561291e575b61290c57826128ba938310612904575b50818482116128fc575b6128b491612139565b92612139565b801580156128f4575b6128d0576121fd91612952565b505060006040516128e081611b4b565b526040516128ed81611b4b565b6000815290565b5081156128c3565b8491506128ab565b9150386128a1565b5050505060006040516128e081611b4b565b5083821015612891565b9061294591600060405161293b81611b4b565b5251905190611f19565b604051906121a282611b4b565b90600060405161296181611b4b565b52620f4240918281029281840414901517156105fb57612945916123b5565b919290156129e25750815115612994575090565b3b1561299d5790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b8251909150156129f55750805190602001fd5b60405162461bcd60e51b8152908190612a119060048301611d22565b0390fdfea26469706673582212202da5e405ff8525fea47bd81a20d2b6439d26e1a318b1e555f0b390153aa45ace64736f6c63430008180033",
  "devdoc": {
    "details": "Main contract for managing token streaming with vesting and pool creation capabilities",
    "kind": "dev",
    "methods": {
      "cancelStream()": {
        "details": "Allows the creator to cancel the stream during the Waiting phase"
      },
      "cancelWithAdmin()": {
        "details": "Allows the protocol admin to cancel the stream during Waiting, Bootstrapping, or Active phases"
      },
      "constructor": {
        "details": "Constructor to set the stream factory address",
        "params": {
          "factoryAddress": "Address of the stream factory"
        }
      },
      "exitStream()": {
        "details": "Allows users to exit the stream and receive their tokens based on stream outcome"
      },
      "finalizeStream()": {
        "details": "Allows the creator to finalize the stream after it has ended"
      },
      "getPosition(address)": {
        "details": "Get a user's position information",
        "params": {
          "user": "Address of the user"
        },
        "returns": {
          "_0": "The user's position"
        }
      },
      "getStreamState()": {
        "details": "Get the current stream state",
        "returns": {
          "_0": "The current stream state"
        }
      },
      "getStreamStatus()": {
        "details": "Get the current stream status",
        "returns": {
          "_0": "The current stream status"
        }
      },
      "initialize((address,address,address,uint256,uint256,uint256,uint256,uint256,(string),(bool,uint64),(bool,uint64),(uint256),string),address)": {
        "details": "Initializes the stream with the provided configuration",
        "params": {
          "createStreamMessage": "Stream creation parameters",
          "storageAddress": "Address of the position storage contract"
        }
      },
      "subscribe(uint256)": {
        "details": "Allows users to subscribe to the stream by providing input tokens",
        "params": {
          "amountIn": "Amount of input tokens to subscribe with"
        }
      },
      "syncPositionExternal(address)": {
        "details": "External function to sync a specific user's position",
        "params": {
          "user": "Address of the user whose position should be synced"
        }
      },
      "syncStreamExternal()": {
        "details": "External function to sync the stream state and status"
      },
      "withdraw(uint256)": {
        "details": "Allows users to withdraw their input tokens from the stream",
        "params": {
          "cap": "Amount of input tokens to withdraw"
        }
      }
    },
    "title": "Stream",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "STREAM_FACTORY_ADDRESS()": {
        "notice": "Immutable address of the stream factory that deployed this stream"
      },
      "cancelStream()": {
        "notice": "Only the creator can cancel during Waiting phase"
      },
      "cancelWithAdmin()": {
        "notice": "Only the protocol admin can call this function"
      },
      "creator()": {
        "notice": "Address of the stream creator"
      },
      "exitStream()": {
        "notice": "Users can exit after the stream has ended or been cancelled"
      },
      "finalizeStream()": {
        "notice": "Only the creator can call this function when stream status is Ended"
      },
      "initialize((address,address,address,uint256,uint256,uint256,uint256,uint256,(string),(bool,uint64),(bool,uint64),(uint256),string),address)": {
        "notice": "This function can only be called once by the stream factory"
      },
      "positionStorageAddress()": {
        "notice": "Address of the position storage contract"
      },
      "postStreamActions()": {
        "notice": "Post-stream actions like vesting and pool creation"
      },
      "streamMetadata()": {
        "notice": "Metadata associated with the stream"
      },
      "streamState()": {
        "notice": "Current state of the stream (distribution index, remaining tokens, etc.)"
      },
      "streamStatus()": {
        "notice": "Current status of the stream (Waiting, Bootstrapping, Active, etc.)"
      },
      "streamTimes()": {
        "notice": "Timing information for the stream phases"
      },
      "streamTokens()": {
        "notice": "Token addresses for input and output tokens"
      },
      "subscribe(uint256)": {
        "notice": "Users can subscribe during Bootstrapping or Active phases"
      },
      "syncPositionExternal(address)": {
        "notice": "Anyone can call this to update a user's position based on current stream state"
      },
      "syncStreamExternal()": {
        "notice": "Anyone can call this to update the stream state based on current time"
      },
      "withdraw(uint256)": {
        "notice": "Users can withdraw during Active or Bootstrapping phases"
      }
    },
    "notice": "This contract handles the core streaming logic including subscriptions, withdrawals, exits, and finalization",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2351,
        "contract": "src/Stream.sol:Stream",
        "label": "creator",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2357,
        "contract": "src/Stream.sol:Stream",
        "label": "positionStorageAddress",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 2360,
        "contract": "src/Stream.sol:Stream",
        "label": "initialized",
        "offset": 20,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 2364,
        "contract": "src/Stream.sol:Stream",
        "label": "streamState",
        "offset": 0,
        "slot": "2",
        "type": "t_struct(StreamState)8167_storage"
      },
      {
        "astId": 2368,
        "contract": "src/Stream.sol:Stream",
        "label": "streamTokens",
        "offset": 0,
        "slot": "11",
        "type": "t_struct(StreamTokens)8172_storage"
      },
      {
        "astId": 2372,
        "contract": "src/Stream.sol:Stream",
        "label": "streamMetadata",
        "offset": 0,
        "slot": "13",
        "type": "t_struct(StreamMetadata)8146_storage"
      },
      {
        "astId": 2376,
        "contract": "src/Stream.sol:Stream",
        "label": "streamStatus",
        "offset": 0,
        "slot": "14",
        "type": "t_enum(Status)8105"
      },
      {
        "astId": 2380,
        "contract": "src/Stream.sol:Stream",
        "label": "streamTimes",
        "offset": 0,
        "slot": "15",
        "type": "t_struct(StreamTimes)8143_storage"
      },
      {
        "astId": 2384,
        "contract": "src/Stream.sol:Stream",
        "label": "postStreamActions",
        "offset": 0,
        "slot": "18",
        "type": "t_struct(PostStreamActions)8190_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(Status)8105": {
        "encoding": "inplace",
        "label": "enum StreamTypes.Status",
        "numberOfBytes": "1"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Decimal)6473_storage": {
        "encoding": "inplace",
        "label": "struct Decimal",
        "members": [
          {
            "astId": 6472,
            "contract": "src/Stream.sol:Stream",
            "label": "value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(PoolInfo)8180_storage": {
        "encoding": "inplace",
        "label": "struct StreamTypes.PoolInfo",
        "members": [
          {
            "astId": 8179,
            "contract": "src/Stream.sol:Stream",
            "label": "poolOutSupplyAmount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(PostStreamActions)8190_storage": {
        "encoding": "inplace",
        "label": "struct StreamTypes.PostStreamActions",
        "members": [
          {
            "astId": 8183,
            "contract": "src/Stream.sol:Stream",
            "label": "poolInfo",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(PoolInfo)8180_storage"
          },
          {
            "astId": 8186,
            "contract": "src/Stream.sol:Stream",
            "label": "creatorVesting",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(VestingInfo)8177_storage"
          },
          {
            "astId": 8189,
            "contract": "src/Stream.sol:Stream",
            "label": "beneficiaryVesting",
            "offset": 0,
            "slot": "2",
            "type": "t_struct(VestingInfo)8177_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(StreamMetadata)8146_storage": {
        "encoding": "inplace",
        "label": "struct StreamTypes.StreamMetadata",
        "members": [
          {
            "astId": 8145,
            "contract": "src/Stream.sol:Stream",
            "label": "ipfsHash",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(StreamState)8167_storage": {
        "encoding": "inplace",
        "label": "struct StreamTypes.StreamState",
        "members": [
          {
            "astId": 8148,
            "contract": "src/Stream.sol:Stream",
            "label": "outRemaining",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 8151,
            "contract": "src/Stream.sol:Stream",
            "label": "distIndex",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(Decimal)6473_storage"
          },
          {
            "astId": 8153,
            "contract": "src/Stream.sol:Stream",
            "label": "spentIn",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 8155,
            "contract": "src/Stream.sol:Stream",
            "label": "shares",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 8158,
            "contract": "src/Stream.sol:Stream",
            "label": "currentStreamedPrice",
            "offset": 0,
            "slot": "4",
            "type": "t_struct(Decimal)6473_storage"
          },
          {
            "astId": 8160,
            "contract": "src/Stream.sol:Stream",
            "label": "threshold",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 8162,
            "contract": "src/Stream.sol:Stream",
            "label": "inSupply",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 8164,
            "contract": "src/Stream.sol:Stream",
            "label": "outSupply",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 8166,
            "contract": "src/Stream.sol:Stream",
            "label": "lastUpdated",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_struct(StreamTimes)8143_storage": {
        "encoding": "inplace",
        "label": "struct StreamTypes.StreamTimes",
        "members": [
          {
            "astId": 8138,
            "contract": "src/Stream.sol:Stream",
            "label": "bootstrappingStartTime",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 8140,
            "contract": "src/Stream.sol:Stream",
            "label": "streamStartTime",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 8142,
            "contract": "src/Stream.sol:Stream",
            "label": "streamEndTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(StreamTokens)8172_storage": {
        "encoding": "inplace",
        "label": "struct StreamTypes.StreamTokens",
        "members": [
          {
            "astId": 8169,
            "contract": "src/Stream.sol:Stream",
            "label": "inSupplyToken",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 8171,
            "contract": "src/Stream.sol:Stream",
            "label": "outSupplyToken",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(VestingInfo)8177_storage": {
        "encoding": "inplace",
        "label": "struct StreamTypes.VestingInfo",
        "members": [
          {
            "astId": 8174,
            "contract": "src/Stream.sol:Stream",
            "label": "isVestingEnabled",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 8176,
            "contract": "src/Stream.sol:Stream",
            "label": "vestingDuration",
            "offset": 1,
            "slot": "0",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}