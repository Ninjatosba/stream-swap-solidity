{
  "address": "0x0f58B15Ff3dEC2114cA361bdba6f1159109358Cb",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_streamFactoryAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InsufficientOutAmount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requiredTokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenBalance",
          "type": "uint256"
        }
      ],
      "name": "InsufficientTokenPayment",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidExitCondition",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidImplementationAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInSupplyToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidOutSupplyToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidPosition",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidStreamFactoryAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidVestingCliffDuration",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidVestingDuration",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidWithdrawAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OperationNotAllowed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PaymentFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StreamFactoryAddressAlreadySet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Unauthorized",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "cap",
          "type": "uint256"
        }
      ],
      "name": "WithdrawAmountExceedsBalance",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "tokensAdded",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "tokensRemoved",
          "type": "address[]"
        }
      ],
      "name": "AcceptedTokensUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "streamAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "subscriber",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "refundedAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "exitTimestamp",
          "type": "uint256"
        }
      ],
      "name": "ExitRefunded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "streamAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "subscriber",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "purchased",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "spentIn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "exitTimestamp",
          "type": "uint256"
        }
      ],
      "name": "ExitStreamed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newFeeCollector",
          "type": "address"
        }
      ],
      "name": "FeeCollectorUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "streamAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "refundedOutAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum StreamTypes.Status",
          "name": "status",
          "type": "uint8"
        }
      ],
      "name": "FinalizedRefunded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "streamAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "creatorRevenue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "exitFeeAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "refundedOutAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum StreamTypes.Status",
          "name": "status",
          "type": "uint8"
        }
      ],
      "name": "FinalizedStreamed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "frozen",
          "type": "bool"
        }
      ],
      "name": "FrozenStateUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "streamCreationFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "exitFeeRatio",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minWaitingDuration",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minBootstrappingDuration",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minStreamDuration",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "tosVersion",
          "type": "string"
        }
      ],
      "name": "ParamsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "factoryAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "poolWrapper",
          "type": "address"
        }
      ],
      "name": "PoolWrapperUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "streamAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "subscriber",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "inBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "PositionSynced",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newProtocolAdmin",
          "type": "address"
        }
      ],
      "name": "ProtocolAdminUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "streamAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "outSupply",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum StreamTypes.Status",
          "name": "status",
          "type": "uint8"
        }
      ],
      "name": "StreamCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "streamOutToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "streamInToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "streamFactoryAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "streamOutAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bootstrappingStartTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "streamStartTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "streamEndTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "threshold",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "streamName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "tosVersion",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "streamAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "streamId",
          "type": "uint16"
        }
      ],
      "name": "StreamCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "streamAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum StreamTypes.Status",
          "name": "mainStatus",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lastUpdated",
          "type": "uint256"
        }
      ],
      "name": "StreamSynced",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "streamAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lastUpdated",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "newStatus",
          "type": "uint8"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct Decimal",
          "name": "distIndex",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "outRemaining",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "inSupply",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "spentIn",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct Decimal",
          "name": "currentStreamedPrice",
          "type": "tuple"
        }
      ],
      "name": "StreamSynced",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "streamAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "subscriber",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newShares",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalSharesAfter",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalInSupplyAfter",
          "type": "uint256"
        }
      ],
      "name": "Subscribed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "factoryAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "vestingContract",
          "type": "address"
        }
      ],
      "name": "VestingContractDeployed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "streamAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "subscriber",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "remainingInBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "remainingShares",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalInSupply",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalShares",
          "type": "uint256"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "cancelStream",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cancelWithAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "creator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exitStream",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "finalizeStream",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getPosition",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "inBalance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "shares",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Decimal",
              "name": "index",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "lastUpdateTime",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Decimal",
              "name": "pendingReward",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "spentIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "purchased",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "exitDate",
              "type": "uint256"
            }
          ],
          "internalType": "struct PositionTypes.Position",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStreamState",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "outRemaining",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Decimal",
              "name": "distIndex",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "spentIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "shares",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Decimal",
              "name": "currentStreamedPrice",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "threshold",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "inSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "outSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastUpdated",
              "type": "uint256"
            }
          ],
          "internalType": "struct StreamTypes.StreamState",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStreamStatus",
      "outputs": [
        {
          "internalType": "enum StreamTypes.Status",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "streamOutAmount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "outSupplyToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "bootstrappingStartTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "streamStartTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "streamEndTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "threshold",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "inSupplyToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "creator",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "bool",
                  "name": "isVestingEnabled",
                  "type": "bool"
                },
                {
                  "internalType": "uint16",
                  "name": "vestingDuration",
                  "type": "uint16"
                },
                {
                  "internalType": "uint16",
                  "name": "cliffDuration",
                  "type": "uint16"
                }
              ],
              "internalType": "struct StreamTypes.VestingInfo",
              "name": "creatorVesting",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "bool",
                  "name": "isVestingEnabled",
                  "type": "bool"
                },
                {
                  "internalType": "uint16",
                  "name": "vestingDuration",
                  "type": "uint16"
                },
                {
                  "internalType": "uint16",
                  "name": "cliffDuration",
                  "type": "uint16"
                }
              ],
              "internalType": "struct StreamTypes.VestingInfo",
              "name": "beneficiaryVesting",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "poolOutSupplyAmount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct StreamTypes.PoolInfo",
              "name": "poolInfo",
              "type": "tuple"
            },
            {
              "internalType": "bytes32",
              "name": "salt",
              "type": "bytes32"
            },
            {
              "internalType": "string",
              "name": "tosVersion",
              "type": "string"
            }
          ],
          "internalType": "struct StreamTypes.createStreamMessage",
          "name": "createStreamMessage",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "_positionStorageAddress",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "positionStorageAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "postStreamActions",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "poolOutSupplyAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct StreamTypes.PoolInfo",
          "name": "poolInfo",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "isVestingEnabled",
              "type": "bool"
            },
            {
              "internalType": "uint16",
              "name": "vestingDuration",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "cliffDuration",
              "type": "uint16"
            }
          ],
          "internalType": "struct StreamTypes.VestingInfo",
          "name": "creatorVesting",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "isVestingEnabled",
              "type": "bool"
            },
            {
              "internalType": "uint16",
              "name": "vestingDuration",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "cliffDuration",
              "type": "uint16"
            }
          ],
          "internalType": "struct StreamTypes.VestingInfo",
          "name": "beneficiaryVesting",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "streamMetadata",
      "outputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "streamState",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "outRemaining",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal",
          "name": "distIndex",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "spentIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal",
          "name": "currentStreamedPrice",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "threshold",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "inSupply",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "outSupply",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastUpdated",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "streamStatus",
      "outputs": [
        {
          "internalType": "enum StreamTypes.Status",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "streamTimes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "bootstrappingStartTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "streamStartTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "streamEndTime",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "streamTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "inSupplyToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "outSupplyToken",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        }
      ],
      "name": "subscribe",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "syncPosition",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "syncStreamExternal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "cap",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x0041554f0a654da570fbc94aae506507731455043996c5dd342409c21643e918",
  "receipt": {
    "to": null,
    "from": "0xB4eE189569597EFDB3bB48DB5ede8394d1D48e7b",
    "contractAddress": "0x0f58B15Ff3dEC2114cA361bdba6f1159109358Cb",
    "transactionIndex": 13,
    "gasUsed": "2548928",
    "logsBloom": "0x
    "blockHash": "0x3b2a13f63fa9c274b7603b244c864493f853c55300d806739ef1b61df0527ae0",
    "transactionHash": "0x0041554f0a654da570fbc94aae506507731455043996c5dd342409c21643e918",
    "logs": [],
    "blockNumber": 15588160,
    "cumulativeGasUsed": "6022317",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x1aA4cbF9d83726540B7F00c1e78eDDA90908eBD2"
  ],
  "numDeployments": 1,
  "solcInputHash": "6786ec1a4aefe49027e8e521d102f618",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_streamFactoryAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InsufficientOutAmount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requiredTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenBalance\",\"type\":\"uint256\"}],\"name\":\"InsufficientTokenPayment\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidExitCondition\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidImplementationAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInSupplyToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidOutSupplyToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPosition\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidStreamFactoryAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidVestingCliffDuration\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidVestingDuration\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidWithdrawAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OperationNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PaymentFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StreamFactoryAddressAlreadySet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cap\",\"type\":\"uint256\"}],\"name\":\"WithdrawAmountExceedsBalance\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokensAdded\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokensRemoved\",\"type\":\"address[]\"}],\"name\":\"AcceptedTokensUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"streamAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"subscriber\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"refundedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"exitTimestamp\",\"type\":\"uint256\"}],\"name\":\"ExitRefunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"streamAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"subscriber\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"purchased\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"spentIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"exitTimestamp\",\"type\":\"uint256\"}],\"name\":\"ExitStreamed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newFeeCollector\",\"type\":\"address\"}],\"name\":\"FeeCollectorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"streamAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"refundedOutAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum StreamTypes.Status\",\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"FinalizedRefunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"streamAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"creatorRevenue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"exitFeeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"refundedOutAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum StreamTypes.Status\",\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"FinalizedStreamed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenStateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"streamCreationFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"exitFeeRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minWaitingDuration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minBootstrappingDuration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minStreamDuration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"tosVersion\",\"type\":\"string\"}],\"name\":\"ParamsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"factoryAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"poolWrapper\",\"type\":\"address\"}],\"name\":\"PoolWrapperUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"streamAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"subscriber\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"PositionSynced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newProtocolAdmin\",\"type\":\"address\"}],\"name\":\"ProtocolAdminUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"streamAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"outSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum StreamTypes.Status\",\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"StreamCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"streamOutToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"streamInToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"streamFactoryAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"streamOutAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bootstrappingStartTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"streamStartTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"streamEndTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"streamName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"tosVersion\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"streamAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"streamId\",\"type\":\"uint16\"}],\"name\":\"StreamCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"streamAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum StreamTypes.Status\",\"name\":\"mainStatus\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastUpdated\",\"type\":\"uint256\"}],\"name\":\"StreamSynced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"streamAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastUpdated\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"newStatus\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct Decimal\",\"name\":\"distIndex\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"outRemaining\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"spentIn\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct Decimal\",\"name\":\"currentStreamedPrice\",\"type\":\"tuple\"}],\"name\":\"StreamSynced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"streamAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"subscriber\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newShares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalSharesAfter\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalInSupplyAfter\",\"type\":\"uint256\"}],\"name\":\"Subscribed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"factoryAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vestingContract\",\"type\":\"address\"}],\"name\":\"VestingContractDeployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"streamAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"subscriber\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remainingInBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remainingShares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalInSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalShares\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"cancelStream\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelWithAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exitStream\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalizeStream\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getPosition\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"inBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal\",\"name\":\"index\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateTime\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal\",\"name\":\"pendingReward\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"spentIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"purchased\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"exitDate\",\"type\":\"uint256\"}],\"internalType\":\"struct PositionTypes.Position\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStreamState\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"outRemaining\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal\",\"name\":\"distIndex\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"spentIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal\",\"name\":\"currentStreamedPrice\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdated\",\"type\":\"uint256\"}],\"internalType\":\"struct StreamTypes.StreamState\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStreamStatus\",\"outputs\":[{\"internalType\":\"enum StreamTypes.Status\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"streamOutAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"outSupplyToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bootstrappingStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"streamStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"streamEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"inSupplyToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isVestingEnabled\",\"type\":\"bool\"},{\"internalType\":\"uint16\",\"name\":\"vestingDuration\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"cliffDuration\",\"type\":\"uint16\"}],\"internalType\":\"struct StreamTypes.VestingInfo\",\"name\":\"creatorVesting\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isVestingEnabled\",\"type\":\"bool\"},{\"internalType\":\"uint16\",\"name\":\"vestingDuration\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"cliffDuration\",\"type\":\"uint16\"}],\"internalType\":\"struct StreamTypes.VestingInfo\",\"name\":\"beneficiaryVesting\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"poolOutSupplyAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct StreamTypes.PoolInfo\",\"name\":\"poolInfo\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"tosVersion\",\"type\":\"string\"}],\"internalType\":\"struct StreamTypes.createStreamMessage\",\"name\":\"createStreamMessage\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_positionStorageAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"positionStorageAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"postStreamActions\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"poolOutSupplyAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct StreamTypes.PoolInfo\",\"name\":\"poolInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isVestingEnabled\",\"type\":\"bool\"},{\"internalType\":\"uint16\",\"name\":\"vestingDuration\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"cliffDuration\",\"type\":\"uint16\"}],\"internalType\":\"struct StreamTypes.VestingInfo\",\"name\":\"creatorVesting\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isVestingEnabled\",\"type\":\"bool\"},{\"internalType\":\"uint16\",\"name\":\"vestingDuration\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"cliffDuration\",\"type\":\"uint16\"}],\"internalType\":\"struct StreamTypes.VestingInfo\",\"name\":\"beneficiaryVesting\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"streamMetadata\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"streamState\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"outRemaining\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal\",\"name\":\"distIndex\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"spentIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal\",\"name\":\"currentStreamedPrice\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdated\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"streamStatus\",\"outputs\":[{\"internalType\":\"enum StreamTypes.Status\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"streamTimes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bootstrappingStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"streamStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"streamEndTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"streamTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"inSupplyToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"outSupplyToken\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"subscribe\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"syncPosition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"syncStreamExternal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cap\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getStreamState()\":{\"details\":\"Get the current stream state\",\"returns\":{\"_0\":\"The current stream state\"}},\"getStreamStatus()\":{\"details\":\"Get the current stream status\",\"returns\":{\"_0\":\"The current stream status\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Stream.sol\":\"Stream\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/Clones.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n */\\nlibrary Clones {\\n    /**\\n     * @dev A clone instance deployment failed.\\n     */\\n    error ERC1167FailedCreateClone();\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create(0, 0x09, 0x37)\\n        }\\n        if (instance == address(0)) {\\n            revert ERC1167FailedCreateClone();\\n        }\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create2(0, 0x09, 0x37, salt)\\n        }\\n        if (instance == address(0)) {\\n            revert ERC1167FailedCreateClone();\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(add(ptr, 0x38), deployer)\\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\\n            mstore(add(ptr, 0x14), implementation)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\\n            mstore(add(ptr, 0x58), salt)\\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\\n            predicted := keccak256(add(ptr, 0x43), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt\\n    ) internal view returns (address predicted) {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xd18408af8a91bedb3d56343eeb9b30eb852e6dea93a5e2d5c6db9ca4cb905155\",\"license\":\"MIT\"},\"contracts/Stream.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"./interfaces/IPositionStorage.sol\\\";\\nimport \\\"./types/PositionTypes.sol\\\";\\nimport \\\"./interfaces/IStreamEvents.sol\\\";\\nimport \\\"./interfaces/IStreamErrors.sol\\\";\\nimport \\\"./types/StreamTypes.sol\\\";\\nimport \\\"./StreamFactory.sol\\\";\\nimport \\\"./types/StreamFactoryTypes.sol\\\";\\nimport \\\"./lib/math/DecimalMath.sol\\\";\\nimport \\\"./lib/math/StreamMathLib.sol\\\";\\nimport \\\"./interfaces/IERC20.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\nimport \\\"./lib/helpers/TokenHelpers.sol\\\";\\nimport \\\"./interfaces/IPoolWrapper.sol\\\";\\nimport \\\"./interfaces/IVesting.sol\\\";\\nimport \\\"./types/PoolWrapperTypes.sol\\\";\\n\\ncontract Stream is IStreamErrors, IStreamEvents {\\n    address public creator;\\n    address immutable streamFactoryAddress;\\n    address public positionStorageAddress;\\n    bool private initialized;\\n\\n    StreamTypes.StreamState public streamState;\\n    StreamTypes.StreamTokens public streamTokens;\\n    StreamTypes.StreamMetadata public streamMetadata;\\n    StreamTypes.Status public streamStatus;\\n    StreamTypes.StreamTimes public streamTimes;\\n    StreamTypes.PostStreamActions public postStreamActions;\\n\\n    modifier onlyOnce() {\\n        if (initialized) revert Unauthorized();\\n        _;\\n        initialized = true;\\n    }\\n\\n    modifier onlyAdmin() {\\n        if (msg.sender != streamFactoryAddress) revert Unauthorized();\\n        _;\\n    }\\n\\n    constructor(address _streamFactoryAddress) {\\n        streamFactoryAddress = _streamFactoryAddress;\\n    }\\n\\n    function initialize(\\n        StreamTypes.createStreamMessage memory createStreamMessage,\\n        address _positionStorageAddress\\n    ) external onlyOnce onlyAdmin {\\n        // Validate that output token is a valid ERC20\\n        if (!TokenHelpers.isValidERC20(createStreamMessage.outSupplyToken, msg.sender)) {\\n            revert InvalidOutSupplyToken();\\n        }\\n        // Check if the contract has enough balance of output token\\n        uint256 totalRequiredAmount = createStreamMessage.streamOutAmount +\\n            createStreamMessage.poolInfo.poolOutSupplyAmount;\\n        if (!TokenHelpers.hasEnoughBalance(createStreamMessage.outSupplyToken, address(this), totalRequiredAmount)) {\\n            revert InsufficientOutAmount();\\n        }\\n        // Validate that in token is a valid ERC20\\n        if (!TokenHelpers.isValidERC20(createStreamMessage.inSupplyToken, msg.sender)) {\\n            revert InvalidInSupplyToken();\\n        }\\n        // Validate and set creator vesting info\\n        if (createStreamMessage.creatorVesting.isVestingEnabled) {\\n            // Validate vesting duration\\n            if (createStreamMessage.creatorVesting.vestingDuration == 0) {\\n                revert InvalidVestingDuration();\\n            }\\n            if (createStreamMessage.creatorVesting.cliffDuration == 0) {\\n                revert InvalidVestingCliffDuration();\\n            }\\n            if (\\n                createStreamMessage.creatorVesting.cliffDuration >= createStreamMessage.creatorVesting.vestingDuration\\n            ) {\\n                revert InvalidVestingCliffDuration();\\n            }\\n            // set vesting info\\n            postStreamActions.creatorVesting = createStreamMessage.creatorVesting;\\n        }\\n        // Validate and set beneficiary vesting info\\n        if (createStreamMessage.beneficiaryVesting.isVestingEnabled) {\\n            // Validate vesting duration\\n            if (createStreamMessage.beneficiaryVesting.vestingDuration == 0) {\\n                revert InvalidVestingDuration();\\n            }\\n            if (createStreamMessage.beneficiaryVesting.cliffDuration == 0) {\\n                revert InvalidVestingCliffDuration();\\n            }\\n            if (\\n                createStreamMessage.beneficiaryVesting.cliffDuration >=\\n                createStreamMessage.beneficiaryVesting.vestingDuration\\n            ) {\\n                revert InvalidVestingCliffDuration();\\n            }\\n            // set vesting info\\n            postStreamActions.beneficiaryVesting = createStreamMessage.beneficiaryVesting;\\n        }\\n        // Validate pool config\\n        if (createStreamMessage.poolInfo.poolOutSupplyAmount > 0) {\\n            // Validate pool amount is less than or equal to out amount\\n            if (createStreamMessage.poolInfo.poolOutSupplyAmount > createStreamMessage.streamOutAmount) {\\n                revert InvalidAmount();\\n            }\\n            postStreamActions.poolInfo = createStreamMessage.poolInfo;\\n        }\\n        // Save position storage address\\n        positionStorageAddress = _positionStorageAddress;\\n        // Set creator\\n        creator = createStreamMessage.creator;\\n        // Initialize stream state\\n        streamState = StreamTypes.StreamState({\\n            distIndex: DecimalMath.fromNumber(0),\\n            outRemaining: createStreamMessage.streamOutAmount,\\n            inSupply: 0,\\n            spentIn: 0,\\n            shares: 0,\\n            currentStreamedPrice: DecimalMath.fromNumber(0),\\n            threshold: createStreamMessage.threshold,\\n            outSupply: createStreamMessage.streamOutAmount,\\n            lastUpdated: block.timestamp\\n        });\\n        // Initialize stream tokens\\n        streamTokens = StreamTypes.StreamTokens({\\n            inSupplyToken: createStreamMessage.inSupplyToken,\\n            outSupplyToken: createStreamMessage.outSupplyToken\\n        });\\n        // Initialize stream metadata\\n        streamMetadata = StreamTypes.StreamMetadata({ name: createStreamMessage.name });\\n        // Initialize stream status\\n        streamStatus = StreamTypes.Status.Waiting;\\n        // Initialize stream times\\n        streamTimes = StreamTypes.StreamTimes({\\n            bootstrappingStartTime: createStreamMessage.bootstrappingStartTime,\\n            streamStartTime: createStreamMessage.streamStartTime,\\n            streamEndTime: createStreamMessage.streamEndTime\\n        });\\n    }\\n\\n    function syncStream(\\n        StreamTypes.StreamState memory state,\\n        StreamTypes.StreamTimes memory times,\\n        uint256 nowTime\\n    ) internal pure returns (StreamTypes.StreamState memory) {\\n        Decimal memory diff = StreamMathLib.calculateDiff(\\n            nowTime,\\n            times.streamStartTime,\\n            times.streamEndTime,\\n            state.lastUpdated\\n        );\\n        state.lastUpdated = nowTime;\\n\\n        if (diff.value == 0) {\\n            return state;\\n        }\\n\\n        StreamTypes.StreamState memory updatedState = StreamMathLib.calculateUpdatedState(state, diff);\\n        return updatedState;\\n    }\\n\\n    function saveStreamState(StreamTypes.StreamState memory state) internal {\\n        streamState = state;\\n    }\\n\\n    function loadStreamState() internal view returns (StreamTypes.StreamState memory) {\\n        return streamState;\\n    }\\n\\n    /**\\n     * @dev Validates if an operation is allowed based on the current stream status\\n     * @param allowedStatuses Array of allowed statuses for the operation\\n     */\\n    function isOperationAllowed(\\n        StreamTypes.Status currentStatus,\\n        StreamTypes.Status[] memory allowedStatuses\\n    ) internal pure {\\n        for (uint256 i = 0; i < allowedStatuses.length; i++) {\\n            if (currentStatus == allowedStatuses[i]) {\\n                return;\\n            }\\n        }\\n        revert OperationNotAllowed();\\n    }\\n\\n    /**\\n     * @dev Checks if the threshold has been reached for stream finalization\\n     * @return bool True if the threshold has been reached, false otherwise\\n     */\\n    function isThresholdReached(StreamTypes.StreamState memory state) internal pure returns (bool) {\\n        return state.spentIn >= state.threshold;\\n    }\\n\\n    /**\\n     * @dev Validates a position exists and is active\\n     * @param position The position to validate\\n     * @return bool True if the position is valid and active\\n     */\\n    function isValidActivePosition(PositionTypes.Position memory position) internal pure returns (bool) {\\n        return position.shares > 0 && position.exitDate == 0;\\n    }\\n\\n    function withdraw(uint256 cap) external {\\n        assertAmountNotZero(cap);\\n        // Load position once\\n        PositionTypes.Position memory position = loadPosition(msg.sender);\\n\\n        // Check if position is valid and active\\n        if (!isValidActivePosition(position)) {\\n            revert InvalidPosition();\\n        }\\n\\n        // load stream times\\n        StreamTypes.StreamTimes memory times = loadStreamTimes();\\n\\n        // Load and update status\\n        StreamTypes.Status status = loadStreamStatus();\\n        status = syncStreamStatus(status, times, block.timestamp);\\n\\n        // Check if operation is allowed\\n        StreamTypes.Status[] memory allowedStatuses = new StreamTypes.Status[](2);\\n        allowedStatuses[0] = StreamTypes.Status.Active;\\n        allowedStatuses[1] = StreamTypes.Status.Bootstrapping;\\n        isOperationAllowed(status, allowedStatuses);\\n\\n        // Save the updated status\\n        saveStreamStatus(status);\\n\\n        // Load and update stream state\\n        StreamTypes.StreamState memory state = loadStream();\\n        state = syncStream(state, times, block.timestamp);\\n\\n        // Sync position with the updated state\\n        position = StreamMathLib.syncPosition(position, state.distIndex, state.shares, state.inSupply, block.timestamp);\\n\\n        // Check if withdrawal amount exceeds position balance\\n        if (cap > position.inBalance) {\\n            revert WithdrawAmountExceedsBalance(cap);\\n        }\\n\\n        uint256 shareDeduction = 0;\\n\\n        if (cap == position.inBalance) {\\n            shareDeduction = position.shares;\\n        } else {\\n            shareDeduction = StreamMathLib.computeSharesAmount(cap, true, state.inSupply, position.shares);\\n        }\\n\\n        // Update position\\n        position.shares = position.shares - shareDeduction;\\n        position.inBalance = position.inBalance - cap;\\n\\n        // Update stream state\\n        state.inSupply = state.inSupply - cap;\\n        state.shares = state.shares - shareDeduction;\\n\\n        // Save everything at the end\\n        savePosition(msg.sender, position);\\n        saveStream(state);\\n\\n        // Token transfer\\n        TokenHelpers.safeTokenTransfer(streamTokens.inSupplyToken, msg.sender, cap);\\n        emit Withdrawn(address(this), msg.sender, position.inBalance, position.shares, state.inSupply, state.shares);\\n    }\\n\\n    function subscribe(uint256 amountIn) external payable {\\n        assertAmountNotZero(amountIn);\\n        // Load status once\\n        StreamTypes.Status status = loadStreamStatus();\\n        StreamTypes.StreamTimes memory times = loadStreamTimes();\\n        // Update the loaded status\\n        status = syncStreamStatus(status, times, block.timestamp);\\n        // Check if operation is allowed with the updated status\\n        StreamTypes.Status[] memory allowedStatuses = new StreamTypes.Status[](2);\\n        allowedStatuses[0] = StreamTypes.Status.Bootstrapping;\\n        allowedStatuses[1] = StreamTypes.Status.Active;\\n        isOperationAllowed(status, allowedStatuses);\\n        // Save the updated status\\n        saveStreamStatus(status);\\n\\n        // Validate if sender has enough tokens\\n        IERC20 streamInToken = IERC20(streamTokens.inSupplyToken);\\n        uint256 streamInTokenBalance = streamInToken.balanceOf(msg.sender);\\n        if (streamInTokenBalance < amountIn) {\\n            revert InsufficientTokenPayment(amountIn, streamInTokenBalance);\\n        }\\n\\n        // Transfer tokens from sender to this contract\\n        bool success = streamInToken.transferFrom(msg.sender, address(this), amountIn);\\n        if (!success) {\\n            revert PaymentFailed();\\n        }\\n        // Load position once\\n        PositionTypes.Position memory position = loadPosition(msg.sender);\\n\\n        // Load stream state once\\n        StreamTypes.StreamState memory state = loadStream();\\n\\n        // Update the stream state\\n        state = syncStream(state);\\n\\n        uint256 newShares = 0;\\n\\n        if (position.shares == 0) {\\n            // New position case\\n            newShares = StreamMathLib.computeSharesAmount(amountIn, false, state.inSupply, state.shares);\\n            position = PositionTypes.Position({\\n                inBalance: amountIn,\\n                shares: newShares,\\n                index: state.distIndex,\\n                lastUpdateTime: block.timestamp,\\n                pendingReward: DecimalMath.fromNumber(0),\\n                spentIn: 0,\\n                purchased: 0,\\n                exitDate: 0\\n            });\\n        } else {\\n            // Update existing position\\n            newShares = StreamMathLib.computeSharesAmount(amountIn, false, state.inSupply, state.shares);\\n            position = StreamMathLib.syncPosition(\\n                position,\\n                state.distIndex,\\n                state.shares,\\n                state.inSupply,\\n                block.timestamp\\n            );\\n            position.inBalance += amountIn;\\n            position.shares += newShares;\\n        }\\n\\n        // Update StreamState\\n        state.inSupply += amountIn;\\n        state.shares += newShares;\\n\\n        // Save everything once we're done modifying\\n        savePosition(msg.sender, position);\\n        saveStream(state);\\n\\n        // Emit event\\n        emit Subscribed(address(this), msg.sender, amountIn, newShares, state.inSupply, state.shares);\\n    }\\n\\n    function exitStream() external {\\n        // Load position\\n        PositionTypes.Position memory position = loadPosition(msg.sender);\\n\\n        // Check if position is valid and active\\n        if (!isValidActivePosition(position)) {\\n            revert InvalidPosition();\\n        }\\n\\n        // Load and update stream state\\n        StreamTypes.StreamState memory state = loadStream();\\n        state = syncStream(state);\\n\\n        // Sync position with updated state\\n        position = StreamMathLib.syncPosition(position, state.distIndex, state.shares, state.inSupply, block.timestamp);\\n\\n        // Load and update status\\n        StreamTypes.Status status = loadStreamStatus();\\n        StreamTypes.StreamTimes memory times = loadStreamTimes();\\n        status = syncStreamStatus(status, times, block.timestamp);\\n\\n        bool thresholdReached = isThresholdReached(state);\\n\\n        // Handle token distributions based on exit scenario\\n        handleExitDistribution(status, thresholdReached, position, postStreamActions.beneficiaryVesting);\\n\\n        // Set exit date\\n        position.exitDate = block.timestamp;\\n\\n        // Save everything\\n        saveStreamStatus(status);\\n        saveStream(state);\\n        savePosition(msg.sender, position);\\n    }\\n\\n    function handleExitDistribution(\\n        StreamTypes.Status status,\\n        bool thresholdReached,\\n        PositionTypes.Position memory position,\\n        StreamTypes.VestingInfo memory vestingInfo\\n    ) internal {\\n        // Case 1: Successful stream completion\\n        if (isSuccessfulExit(status, thresholdReached)) {\\n            // Return any unused input tokens\\n            if (position.inBalance > 0) {\\n                TokenHelpers.safeTokenTransfer(streamTokens.inSupplyToken, msg.sender, position.inBalance);\\n            }\\n            if (vestingInfo.isVestingEnabled) {\\n                // Distribute earned output tokens\\n                uint256 amountToDistribute = position.purchased;\\n                // Load factory params\\n                StreamFactory factoryContract = StreamFactory(streamFactoryAddress);\\n                StreamFactoryTypes.Params memory params = factoryContract.getParams();\\n                address vestingContractAddress = params.vestingAddress;\\n                IVesting vestingContract = IVesting(vestingContractAddress);\\n                // Create vesting schedule\\n                (uint256 cliffTime, uint256 endTime) = StreamMathLib.calculateVestingSchedule(\\n                    block.timestamp,\\n                    vestingInfo.cliffDuration,\\n                    vestingInfo.vestingDuration\\n                );\\n                // Transfer tokens to vesting contract\\n                TokenHelpers.safeTokenTransfer(streamTokens.outSupplyToken, vestingContractAddress, amountToDistribute);\\n                // Create vesting schedule\\n                vestingContract.stakeFunds(\\n                    msg.sender,\\n                    streamTokens.outSupplyToken,\\n                    cliffTime,\\n                    endTime,\\n                    amountToDistribute\\n                );\\n            } else {\\n                // Direct transfer if vesting is not enabled\\n                TokenHelpers.safeTokenTransfer(streamTokens.outSupplyToken, msg.sender, position.purchased);\\n            }\\n            emit ExitStreamed(address(this), msg.sender, position.purchased, position.spentIn, block.timestamp);\\n            return;\\n        }\\n\\n        // Case 2: Refund scenario\\n        if (isRefundExit(status, thresholdReached)) {\\n            // Full refund of all input tokens (both spent and unspent)\\n            uint256 totalRefund = position.inBalance + position.spentIn;\\n            TokenHelpers.safeTokenTransfer(streamTokens.inSupplyToken, msg.sender, totalRefund);\\n            emit ExitRefunded(address(this), msg.sender, totalRefund, block.timestamp);\\n            return;\\n        }\\n\\n        // If neither condition is met, the exit is not allowed\\n        revert InvalidExitCondition();\\n    }\\n\\n    function isSuccessfulExit(StreamTypes.Status status, bool thresholdReached) internal pure returns (bool) {\\n        return\\n            (status == StreamTypes.Status.Ended && thresholdReached) ||\\n            (status == StreamTypes.Status.FinalizedStreamed);\\n    }\\n\\n    function isRefundExit(StreamTypes.Status status, bool thresholdReached) internal pure returns (bool) {\\n        return\\n            status == StreamTypes.Status.Cancelled ||\\n            status == StreamTypes.Status.FinalizedRefunded ||\\n            (status == StreamTypes.Status.Ended && !thresholdReached);\\n    }\\n\\n    function deductExitFee(\\n        Decimal memory exitFeeRatio,\\n        address tokenAddress,\\n        address feeCollector,\\n        uint256 spentIn\\n    ) internal returns (uint256, uint256) {\\n        // Calculate exit fee\\n        (uint256 feeAmount, uint256 creatorRevenue) = StreamMathLib.calculateExitFee(spentIn, exitFeeRatio);\\n\\n        // Transfer fee to fee collector if needed\\n        if (feeAmount > 0) {\\n            TokenHelpers.safeTokenTransfer(tokenAddress, feeCollector, feeAmount);\\n        }\\n        return (creatorRevenue, feeAmount);\\n    }\\n\\n    function finalizeStream() external {\\n        assertIsCreator();\\n\\n        // Get factory params\\n        StreamFactory factoryContract = StreamFactory(streamFactoryAddress);\\n        StreamFactoryTypes.Params memory params = factoryContract.getParams();\\n\\n        // Load and update status\\n        StreamTypes.Status status = loadStreamStatus();\\n        StreamTypes.StreamTimes memory times = loadStreamTimes();\\n        status = syncStreamStatus(status, times, block.timestamp);\\n\\n        // Check if operation is allowed\\n        StreamTypes.Status[] memory allowedStatuses = new StreamTypes.Status[](1);\\n        allowedStatuses[0] = StreamTypes.Status.Ended;\\n        isOperationAllowed(status, allowedStatuses);\\n\\n        // Load and update stream state\\n        StreamTypes.StreamState memory state = loadStream();\\n        state = syncStream(state, times, block.timestamp);\\n\\n        bool thresholdReached = isThresholdReached(state);\\n\\n        if (thresholdReached) {\\n            address feeCollector = params.feeCollector;\\n            Decimal memory exitFeeRatio = params.exitFeeRatio;\\n\\n            // Calculate exit fee\\n            (uint256 creatorRevenue, uint256 feeAmount) = deductExitFee(\\n                exitFeeRatio,\\n                streamTokens.inSupplyToken,\\n                feeCollector,\\n                state.spentIn\\n            );\\n\\n            // Handle pool creation if configured\\n            if (postStreamActions.poolInfo.poolOutSupplyAmount > 0) {\\n                // Calculate pool ratio\\n                Decimal memory poolRatio = DecimalMath.div(\\n                    DecimalMath.fromNumber(postStreamActions.poolInfo.poolOutSupplyAmount),\\n                    DecimalMath.fromNumber(streamState.outSupply)\\n                );\\n\\n                uint256 poolInSupplyAmount = StreamMathLib.calculatePoolAmount(creatorRevenue, poolRatio);\\n                uint256 poolOutSupplyAmount = postStreamActions.poolInfo.poolOutSupplyAmount;\\n                // Calculate remaining revenue\\n                creatorRevenue = creatorRevenue - poolInSupplyAmount;\\n\\n                // Create pool and add liquidity\\n                createPoolAndAddLiquidity(\\n                    streamTokens.inSupplyToken,\\n                    streamTokens.outSupplyToken,\\n                    poolInSupplyAmount,\\n                    poolOutSupplyAmount\\n                );\\n            }\\n\\n            // Handle vesting if enabled\\n            if (postStreamActions.creatorVesting.isVestingEnabled) {\\n                // Create vesting schedule\\n                (uint256 cliffTime, uint256 endTime) = StreamMathLib.calculateVestingSchedule(\\n                    block.timestamp,\\n                    postStreamActions.creatorVesting.cliffDuration,\\n                    postStreamActions.creatorVesting.vestingDuration\\n                );\\n                createVesting(\\n                    streamTokens.inSupplyToken,\\n                    creator,\\n                    params.vestingAddress,\\n                    creatorRevenue,\\n                    cliffTime,\\n                    endTime\\n                );\\n            } else {\\n                // Transfer creator revenue to creator\\n                TokenHelpers.safeTokenTransfer(streamTokens.inSupplyToken, creator, creatorRevenue);\\n            }\\n\\n            // Update status\\n            status = StreamTypes.Status.FinalizedStreamed;\\n\\n            // Refund out tokens to creator if left any\\n            if (state.outRemaining > 0) {\\n                TokenHelpers.safeTokenTransfer(streamTokens.outSupplyToken, creator, state.outRemaining);\\n            }\\n\\n            emit FinalizedStreamed(address(this), creator, creatorRevenue, feeAmount, state.outRemaining, status);\\n        } else {\\n            // Update status\\n            status = StreamTypes.Status.FinalizedRefunded;\\n\\n            // Refund out tokens to creator\\n            TokenHelpers.safeTokenTransfer(streamTokens.outSupplyToken, creator, state.outSupply);\\n\\n            emit FinalizedRefunded(address(this), creator, state.outSupply, status);\\n        }\\n\\n        // Save everything\\n        saveStreamStatus(status);\\n        saveStream(state);\\n    }\\n\\n    function syncStreamExternal() external {\\n        // Load, update and save stream state\\n        StreamTypes.StreamState memory state = loadStream();\\n        StreamTypes.StreamTimes memory times = loadStreamTimes();\\n        state = syncStream(state, times, block.timestamp);\\n        saveStream(state);\\n\\n        // Load, update and save status\\n        StreamTypes.Status status = loadStreamStatus();\\n        status = syncStreamStatus(status, times, block.timestamp);\\n        saveStreamStatus(status);\\n\\n        emit StreamSynced(\\n            address(this),\\n            state.lastUpdated,\\n            uint8(status),\\n            state.distIndex,\\n            state.outRemaining,\\n            state.inSupply,\\n            state.spentIn,\\n            state.currentStreamedPrice\\n        );\\n    }\\n\\n    function syncPosition(address user) external {\\n        PositionTypes.Position memory position = loadPosition(user);\\n        StreamTypes.StreamState memory state = loadStream();\\n        StreamTypes.StreamTimes memory times = loadStreamTimes();\\n        state = syncStream(state, times, block.timestamp);\\n        position = StreamMathLib.syncPosition(position, state.distIndex, state.shares, state.inSupply, block.timestamp);\\n        savePosition(user, position);\\n        saveStream(state);\\n        emit PositionSynced(address(this), user, position.inBalance, position.shares);\\n    }\\n\\n    function cancelStream() external {\\n        assertIsCreator();\\n\\n        // Load and update status\\n        StreamTypes.Status status = loadStreamStatus();\\n        StreamTypes.StreamTimes memory times = loadStreamTimes();\\n        status = syncStreamStatus(status, times, block.timestamp);\\n\\n        // Check if operation is allowed\\n        StreamTypes.Status[] memory allowedStatuses = new StreamTypes.Status[](1);\\n        allowedStatuses[0] = StreamTypes.Status.Waiting;\\n        isOperationAllowed(status, allowedStatuses);\\n\\n        // Refund out tokens to creator\\n        TokenHelpers.safeTokenTransfer(streamTokens.outSupplyToken, creator, streamState.outSupply);\\n\\n        // Update status\\n        status = StreamTypes.Status.Cancelled;\\n        saveStreamStatus(status);\\n\\n        emit StreamCancelled(address(this), creator, streamState.outSupply, status);\\n    }\\n\\n    function cancelWithAdmin() external {\\n        assertIsProtocolAdmin();\\n\\n        // Load and update status\\n        StreamTypes.Status status = loadStreamStatus();\\n        StreamTypes.StreamTimes memory times = loadStreamTimes();\\n        status = syncStreamStatus(status, times, block.timestamp);\\n\\n        // Check if operation is allowed\\n        StreamTypes.Status[] memory allowedStatuses = new StreamTypes.Status[](3);\\n        allowedStatuses[0] = StreamTypes.Status.Waiting;\\n        allowedStatuses[1] = StreamTypes.Status.Bootstrapping;\\n        allowedStatuses[2] = StreamTypes.Status.Active;\\n        isOperationAllowed(status, allowedStatuses);\\n\\n        // Refund out tokens to creator\\n        TokenHelpers.safeTokenTransfer(streamTokens.outSupplyToken, creator, streamState.outSupply);\\n\\n        // Update status\\n        status = StreamTypes.Status.Cancelled;\\n        saveStreamStatus(status);\\n\\n        emit StreamCancelled(address(this), creator, streamState.outSupply, status);\\n    }\\n\\n    // Load helpers\\n    function loadStream() internal view returns (StreamTypes.StreamState memory) {\\n        return streamState;\\n    }\\n\\n    function loadStreamStatus() internal view returns (StreamTypes.Status) {\\n        return streamStatus;\\n    }\\n\\n    function loadPosition(address user) internal view returns (PositionTypes.Position memory) {\\n        PositionStorage positionStorage = PositionStorage(positionStorageAddress);\\n        return positionStorage.getPosition(user);\\n    }\\n\\n    function loadStreamTimes() internal view returns (StreamTypes.StreamTimes memory) {\\n        return streamTimes;\\n    }\\n\\n    // Save helpers\\n    function saveStream(StreamTypes.StreamState memory state) internal {\\n        streamState = state;\\n    }\\n\\n    function saveStreamStatus(StreamTypes.Status status) internal {\\n        streamStatus = status;\\n    }\\n\\n    function savePosition(address user, PositionTypes.Position memory position) internal {\\n        PositionStorage positionStorage = PositionStorage(positionStorageAddress);\\n        positionStorage.updatePosition(user, position);\\n    }\\n\\n    // Refactored syncStream to work directly with a provided memory object\\n    function syncStream(StreamTypes.StreamState memory state) internal view returns (StreamTypes.StreamState memory) {\\n        StreamTypes.StreamTimes memory times = loadStreamTimes();\\n\\n        Decimal memory diff = StreamMathLib.calculateDiff(\\n            block.timestamp,\\n            times.streamStartTime,\\n            times.streamEndTime,\\n            state.lastUpdated\\n        );\\n\\n        if (diff.value > 0) {\\n            state = StreamMathLib.calculateUpdatedState(state, diff);\\n            state.lastUpdated = block.timestamp;\\n        }\\n\\n        return state;\\n    }\\n\\n    function createPoolAndAddLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired\\n    ) internal {\\n        StreamFactory factoryContract = StreamFactory(streamFactoryAddress);\\n        StreamFactoryTypes.Params memory params = factoryContract.getParams();\\n\\n        address poolWrapperAddress = params.poolWrapperAddress;\\n        IPoolWrapper poolWrapper = IPoolWrapper(poolWrapperAddress);\\n\\n        PoolWrapperTypes.CreatePoolMsg memory createPoolMsg = PoolWrapperTypes.CreatePoolMsg({\\n            token0: tokenA,\\n            token1: tokenB,\\n            amount0: amountADesired,\\n            amount1: amountBDesired\\n        });\\n        poolWrapper.createPool(createPoolMsg);\\n\\n        // Transfer pool tokens to stream\\n        TokenHelpers.safeTokenTransfer(tokenA, poolWrapperAddress, amountADesired);\\n        TokenHelpers.safeTokenTransfer(tokenB, poolWrapperAddress, amountBDesired);\\n    }\\n\\n    function createVesting(\\n        address token,\\n        address beneficiary,\\n        address vestingAddress,\\n        uint256 amount,\\n        uint256 cliffDuration,\\n        uint256 vestingDuration\\n    ) internal {\\n        IVesting vesting = IVesting(vestingAddress);\\n        vesting.stakeFunds(token, beneficiary, cliffDuration, vestingDuration, amount);\\n    }\\n\\n    // Refactored syncStreamStatus to work directly with a provided memory object\\n    function syncStreamStatus(\\n        StreamTypes.Status status,\\n        StreamTypes.StreamTimes memory times,\\n        uint256 nowTime\\n    ) internal pure returns (StreamTypes.Status) {\\n        status = StreamMathLib.calculateStreamStatus(\\n            status,\\n            nowTime,\\n            times.bootstrappingStartTime,\\n            times.streamStartTime,\\n            times.streamEndTime\\n        );\\n\\n        return status;\\n    }\\n\\n    /**\\n     * @dev Ensure value is non-zero\\n     * @param value The value to check\\n     * @param errorMessage The error message to revert with\\n     */\\n    function assertNonZero(uint256 value, string memory errorMessage) internal pure {\\n        if (value == 0) revert(errorMessage);\\n    }\\n\\n    /**\\n     * @dev Ensure sender is the creator\\n     */\\n    function assertIsCreator() internal view {\\n        if (msg.sender != creator) revert Unauthorized();\\n    }\\n\\n    /**\\n     * @dev Ensure sender is the protocol admin\\n     */\\n    function assertIsProtocolAdmin() internal view {\\n        StreamFactory factoryContract = StreamFactory(streamFactoryAddress);\\n        address protocolAdmin = factoryContract.getParams().protocolAdmin;\\n        if (msg.sender != protocolAdmin) revert Unauthorized();\\n    }\\n\\n    /**\\n     * @dev Ensure status matches expected value\\n     * @param status Current status to check\\n     * @param expectedStatus Status that is expected\\n     */\\n    function assertStatus(StreamTypes.Status status, StreamTypes.Status expectedStatus) internal pure {\\n        if (status != expectedStatus) revert OperationNotAllowed();\\n    }\\n\\n    /**\\n     * @dev Ensure amount is not zero\\n     * @param amount Amount to check\\n     */\\n    function assertAmountNotZero(uint256 amount) internal pure {\\n        if (amount == 0) revert InvalidAmount();\\n    }\\n\\n    /**\\n     * @dev Assert that the cap does not exceed balance\\n     * @param cap Amount to withdraw\\n     * @param balance Available balance\\n     */\\n    function assertWithinBalance(uint256 cap, uint256 balance) internal pure {\\n        if (cap > balance) revert WithdrawAmountExceedsBalance(cap);\\n    }\\n\\n    /**\\n     * @dev Get the current stream status\\n     * @return The current stream status\\n     */\\n    function getStreamStatus() external view returns (StreamTypes.Status) {\\n        return streamStatus;\\n    }\\n\\n    /**\\n     * @dev Get the current stream state\\n     * @return The current stream state\\n     */\\n    function getStreamState() external view returns (StreamTypes.StreamState memory) {\\n        return streamState;\\n    }\\n\\n    function getPosition(address user) external view returns (PositionTypes.Position memory) {\\n        PositionStorage positionStorage = PositionStorage(positionStorageAddress);\\n        return positionStorage.getPosition(user);\\n    }\\n}\\n\",\"keccak256\":\"0x74de2dc24f5255217efb4384e90a427ce6a7180999346f1c8ca5d66fd0feaea0\",\"license\":\"MIT\"},\"contracts/StreamFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\nimport \\\"./interfaces/IStreamEvents.sol\\\";\\nimport \\\"./interfaces/IStreamFactoryErrors.sol\\\";\\nimport \\\"./Vesting.sol\\\";\\nimport \\\"./types/StreamTypes.sol\\\";\\nimport \\\"./interfaces/IStream.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\nimport \\\"./types/StreamFactoryTypes.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\nimport \\\"./storage/PositionStorage.sol\\\";\\n\\ncontract StreamFactory is IStreamEvents, IStreamFactoryErrors {\\n    mapping(address => bool) public acceptedInSupplyTokens;\\n\\n    address public constant NATIVE_TOKEN = address(0);\\n\\n    uint16 public currentStreamId;\\n\\n    StreamFactoryTypes.Params public params;\\n    mapping(uint16 => address) public streamAddresses;\\n\\n    bool public frozen;\\n    bool public initialized;\\n\\n    constructor(address _protocolAdmin) {\\n        if (_protocolAdmin == address(0)) revert InvalidProtocolAdmin();\\n        params.protocolAdmin = _protocolAdmin;\\n    }\\n\\n    // Only once\\n    modifier onlyOnce() {\\n        require(!initialized, \\\"Already initialized\\\");\\n        _;\\n        initialized = true;\\n    }\\n\\n    function initialize(\\n        StreamFactoryTypes.initializeStreamMessage memory initializeStreamMessage\\n    ) external onlyAdmin onlyOnce {\\n        if (DecimalMath.gt(initializeStreamMessage.exitFeeRatio, DecimalMath.fromNumber(1)))\\n            revert InvalidExitFeeRatio();\\n\\n        // Deploy vesting contract\\n        Vesting vesting = new Vesting();\\n        emit VestingContractDeployed(address(this), address(vesting));\\n\\n        params.streamCreationFee = initializeStreamMessage.streamCreationFee;\\n        params.streamCreationFeeToken = initializeStreamMessage.streamCreationFeeToken;\\n        params.exitFeeRatio = initializeStreamMessage.exitFeeRatio;\\n        params.minWaitingDuration = initializeStreamMessage.minWaitingDuration;\\n        params.minBootstrappingDuration = initializeStreamMessage.minBootstrappingDuration;\\n        params.minStreamDuration = initializeStreamMessage.minStreamDuration;\\n        params.feeCollector = initializeStreamMessage.feeCollector;\\n        params.tosVersion = initializeStreamMessage.tosVersion;\\n        params.vestingAddress = address(vesting);\\n        params.poolWrapperAddress = initializeStreamMessage.poolWrapperAddress;\\n        params.streamImplementationAddress = initializeStreamMessage.streamImplementationAddress;\\n        // Set accepted tokens\\n        for (uint i = 0; i < initializeStreamMessage.acceptedInSupplyTokens.length; i++) {\\n            acceptedInSupplyTokens[initializeStreamMessage.acceptedInSupplyTokens[i]] = true;\\n        }\\n    }\\n\\n    modifier onlyAdmin() {\\n        if (msg.sender != params.protocolAdmin) revert NotAdmin();\\n        _;\\n    }\\n\\n    function updateParams(\\n        uint256 _streamCreationFee,\\n        Decimal memory _exitFeeRatio,\\n        uint256 _minWaitingDuration,\\n        uint256 _minBootstrappingDuration,\\n        uint256 _minStreamDuration,\\n        string memory _tosVersion\\n    ) external onlyAdmin {\\n        params.streamCreationFee = _streamCreationFee;\\n        params.exitFeeRatio = _exitFeeRatio;\\n        params.minWaitingDuration = _minWaitingDuration;\\n        params.minBootstrappingDuration = _minBootstrappingDuration;\\n        params.minStreamDuration = _minStreamDuration;\\n        params.tosVersion = _tosVersion;\\n\\n        emit ParamsUpdated(\\n            address(this),\\n            _streamCreationFee,\\n            _exitFeeRatio.value,\\n            _minWaitingDuration,\\n            _minBootstrappingDuration,\\n            _minStreamDuration,\\n            _tosVersion\\n        );\\n    }\\n\\n    function updateFeeCollector(address _feeCollector) external onlyAdmin {\\n        if (_feeCollector == address(0)) revert InvalidFeeCollector();\\n        params.feeCollector = _feeCollector;\\n        emit FeeCollectorUpdated(address(this), _feeCollector);\\n    }\\n\\n    function updateProtocolAdmin(address _protocolAdmin) external onlyAdmin {\\n        if (_protocolAdmin == address(0)) revert InvalidProtocolAdmin();\\n        params.protocolAdmin = _protocolAdmin;\\n        emit ProtocolAdminUpdated(address(this), _protocolAdmin);\\n    }\\n\\n    function updateAcceptedTokens(\\n        address[] calldata tokens_to_add,\\n        address[] calldata tokens_to_remove\\n    ) external onlyAdmin {\\n        for (uint i = 0; i < tokens_to_add.length; i++) {\\n            acceptedInSupplyTokens[tokens_to_add[i]] = true;\\n        }\\n        for (uint i = 0; i < tokens_to_remove.length; i++) {\\n            acceptedInSupplyTokens[tokens_to_remove[i]] = false;\\n        }\\n        emit AcceptedTokensUpdated(address(this), tokens_to_add, tokens_to_remove);\\n    }\\n\\n    function updatePoolWrapper(address _poolWrapper) external onlyAdmin {\\n        if (_poolWrapper == address(0)) revert InvalidPoolWrapper();\\n        params.poolWrapperAddress = _poolWrapper;\\n        emit PoolWrapperUpdated(address(this), _poolWrapper);\\n    }\\n\\n    function createStream(StreamTypes.createStreamMessage memory createStreamMessage) external payable {\\n        // Check if contract is accepting new streams (not frozen)\\n        if (frozen) revert ContractFrozen();\\n        // Validate input parameters\\n        if (createStreamMessage.streamOutAmount == 0) revert ZeroOutSupplyNotAllowed();\\n        if (!acceptedInSupplyTokens[createStreamMessage.inSupplyToken]) revert StreamInputTokenNotAccepted();\\n\\n        // Validate time parameters using validateStreamTimes\\n        validateStreamTimes(\\n            block.timestamp,\\n            createStreamMessage.bootstrappingStartTime,\\n            createStreamMessage.streamStartTime,\\n            createStreamMessage.streamEndTime\\n        );\\n\\n        // Validate TOS version\\n        if (\\n            keccak256(abi.encodePacked(createStreamMessage.tosVersion)) !=\\n            keccak256(abi.encodePacked(params.tosVersion))\\n        ) revert InvalidToSVersion();\\n\\n        // Load creation fee\\n        uint256 creationFee = params.streamCreationFee;\\n        if (creationFee > 0) {\\n            if (params.streamCreationFeeToken == address(0)) {\\n                // Native token\\n                if (msg.value < creationFee) revert InsufficientNativeToken();\\n                // Transfer fee to fee collector\\n                if (!payable(params.feeCollector).send(creationFee)) revert FeeTransferFailed();\\n            } else {\\n                // ERC20 token\\n                if (\\n                    !IERC20(params.streamCreationFeeToken).transferFrom(\\n                        msg.sender,\\n                        address(params.feeCollector),\\n                        creationFee\\n                    )\\n                ) revert TokenTransferFailed();\\n            }\\n        }\\n\\n        // Clone stream contract\\n        address clone = Clones.clone(params.streamImplementationAddress);\\n        IStream stream = IStream(clone);\\n\\n        // Deploy PositionStorage\\n        PositionStorage positionStorage = new PositionStorage(address(stream));\\n\\n        // Transfer tokens before initialization\\n        if (\\n            !IERC20(createStreamMessage.outSupplyToken).transferFrom(\\n                msg.sender,\\n                address(stream),\\n                createStreamMessage.streamOutAmount + createStreamMessage.poolInfo.poolOutSupplyAmount\\n            )\\n        ) revert TokenTransferFailed();\\n\\n        // Initialize the cloned stream\\n        stream.initialize(createStreamMessage, address(positionStorage));\\n\\n        // Store stream address\\n        streamAddresses[currentStreamId] = address(stream);\\n\\n        emit StreamCreated(\\n            createStreamMessage.outSupplyToken,\\n            createStreamMessage.inSupplyToken,\\n            address(this),\\n            createStreamMessage.streamOutAmount,\\n            createStreamMessage.bootstrappingStartTime,\\n            createStreamMessage.streamStartTime,\\n            createStreamMessage.streamEndTime,\\n            createStreamMessage.threshold,\\n            createStreamMessage.name,\\n            params.tosVersion,\\n            address(stream),\\n            currentStreamId\\n        );\\n        currentStreamId++;\\n    }\\n\\n    function getStreams() external view returns (address[] memory) {\\n        address[] memory streams = new address[](currentStreamId);\\n        for (uint16 i = 0; i < currentStreamId; i++) {\\n            streams[i] = streamAddresses[i];\\n        }\\n        return streams;\\n    }\\n\\n    function getStream(uint16 _streamId) external view returns (address) {\\n        return streamAddresses[_streamId];\\n    }\\n\\n    function isStream(address _streamAddress) external view returns (bool) {\\n        for (uint16 i = 0; i < currentStreamId; i++) {\\n            if (streamAddresses[i] == _streamAddress) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function getParams() external view returns (StreamFactoryTypes.Params memory) {\\n        return params;\\n    }\\n\\n    function isAcceptedInSupplyToken(address token) public view returns (bool) {\\n        return acceptedInSupplyTokens[token];\\n    }\\n\\n    function getAcceptedInSupplyTokens() external view returns (address[] memory) {\\n        address[] memory tokens = new address[](currentStreamId);\\n        for (uint16 i = 0; i < currentStreamId; i++) {\\n            if (acceptedInSupplyTokens[streamAddresses[i]]) {\\n                tokens[i] = streamAddresses[i];\\n            }\\n        }\\n        return tokens;\\n    }\\n\\n    function setFrozen(bool _frozen) external onlyAdmin {\\n        frozen = _frozen;\\n        emit FrozenStateUpdated(address(this), _frozen);\\n    }\\n\\n    function validateStreamTimes(\\n        uint256 nowTime,\\n        uint256 _bootstrappingStartTime,\\n        uint256 _startTime,\\n        uint256 _endTime\\n    ) internal view {\\n        if (nowTime > _bootstrappingStartTime) revert InvalidBootstrappingStartTime();\\n        if (_bootstrappingStartTime > _startTime) revert InvalidStreamStartTime();\\n        if (_startTime > _endTime) revert InvalidStreamEndTime();\\n        if (_endTime - _startTime < params.minStreamDuration) revert StreamDurationTooShort();\\n        if (_startTime - _bootstrappingStartTime < params.minBootstrappingDuration)\\n            revert BootstrappingDurationTooShort();\\n        if (_bootstrappingStartTime - nowTime < params.minWaitingDuration) revert WaitingDurationTooShort();\\n    }\\n\\n    function setImplementation(address _implementation) external onlyAdmin {\\n        if (_implementation == address(0)) revert InvalidImplementationAddress();\\n\\n        params.streamImplementationAddress = _implementation;\\n    }\\n\\n    function setStreamCreationFee(uint256 _fee) external onlyAdmin {\\n        params.streamCreationFee = _fee;\\n    }\\n\\n    function setStreamCreationFeeToken(address _token) external onlyAdmin {\\n        params.streamCreationFeeToken = _token;\\n    }\\n\\n    function setExitFeeRatio(Decimal memory _ratio) external onlyAdmin {\\n        if (DecimalMath.gt(_ratio, DecimalMath.fromNumber(1))) revert InvalidExitFeeRatio();\\n        params.exitFeeRatio = _ratio;\\n    }\\n}\\n\",\"keccak256\":\"0xdead07067b2e47559370dbcfc7ed6cc1cdc7335e9e2f29421ddcc38f93b61a9e\",\"license\":\"MIT\"},\"contracts/Vesting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"./interfaces/IERC20.sol\\\";\\n\\ncontract Vesting {\\n    struct VestingSchedule {\\n        uint256 cliffTime;\\n        uint256 endTime;\\n        uint256 totalAmount;\\n        uint256 releasedAmount;\\n    }\\n\\n    mapping(address => mapping(address => VestingSchedule[])) private tokenVestings;\\n\\n    event FundsStaked(\\n        address indexed beneficiary,\\n        address indexed token,\\n        uint256 totalAmount,\\n        uint256 cliffTime,\\n        uint256 endTime\\n    );\\n\\n    event FundsWithdrawn(address indexed beneficiary, address indexed token, uint256 scheduleIndex, uint256 amount);\\n\\n    function stakeFunds(\\n        address beneficiary,\\n        address tokenAddress,\\n        uint256 cliffTime,\\n        uint256 endTime,\\n        uint256 totalAmount\\n    ) external {\\n        require(cliffTime >= block.timestamp, \\\"Cliff time must be in the future\\\");\\n        require(endTime > cliffTime, \\\"End time must be after cliff time\\\");\\n        require(totalAmount > 0, \\\"Total amount must be greater than zero\\\");\\n\\n        require(IERC20(tokenAddress).transferFrom(msg.sender, address(this), totalAmount), \\\"Token transfer failed\\\");\\n\\n        VestingSchedule[] storage vestingSchedules = tokenVestings[beneficiary][tokenAddress];\\n        vestingSchedules.push(VestingSchedule(cliffTime, endTime, totalAmount, 0));\\n\\n        emit FundsStaked(beneficiary, tokenAddress, totalAmount, cliffTime, endTime);\\n    }\\n\\n    function withdrawFunds(address tokenAddress, uint256 scheduleIndex) external {\\n        VestingSchedule[] storage vestingSchedules = tokenVestings[msg.sender][tokenAddress];\\n        require(scheduleIndex < vestingSchedules.length, \\\"Invalid schedule index\\\");\\n\\n        VestingSchedule storage vestingSchedule = vestingSchedules[scheduleIndex];\\n        require(vestingSchedule.cliffTime <= block.timestamp, \\\"Funds are still in the cliff period\\\");\\n\\n        uint256 withdrawableAmount = calculateWithdrawableAmount(vestingSchedule);\\n        require(withdrawableAmount > 0, \\\"No funds available for withdrawal\\\");\\n\\n        vestingSchedule.releasedAmount += withdrawableAmount;\\n\\n        require(IERC20(tokenAddress).transfer(msg.sender, withdrawableAmount), \\\"Token transfer failed\\\");\\n\\n        emit FundsWithdrawn(msg.sender, tokenAddress, scheduleIndex, withdrawableAmount);\\n\\n        if (vestingSchedule.releasedAmount == vestingSchedule.totalAmount) {\\n            delete vestingSchedules[scheduleIndex];\\n        }\\n    }\\n\\n    function getStakesForBeneficiary(\\n        address beneficiary,\\n        address tokenAddress\\n    ) external view returns (VestingSchedule[] memory) {\\n        return tokenVestings[beneficiary][tokenAddress];\\n    }\\n\\n    function calculateWithdrawableAmount(VestingSchedule storage vestingSchedule) private view returns (uint256) {\\n        uint256 elapsedTime = block.timestamp - vestingSchedule.cliffTime;\\n\\n        if (elapsedTime >= vestingSchedule.endTime - vestingSchedule.cliffTime) {\\n            // Can now access all of the funds minus any that have already been claimed\\n            return vestingSchedule.totalAmount - vestingSchedule.releasedAmount;\\n        } else {\\n            // Calculate what proportion of funds is now available and only return that amount\\n\\n            // How long is the unlock period\\n            uint256 totalUnlockPeriod = vestingSchedule.endTime - vestingSchedule.cliffTime;\\n\\n            // How much should have been unlocked so far\\n            uint256 totalAmountAccessible = (vestingSchedule.totalAmount / totalUnlockPeriod) * elapsedTime;\\n\\n            // Amount available to withdraw is the currently unlocked amount minus anything\\n            // that has already been claimed to prevent repeat counting funds\\n            uint256 actualAccessible = totalAmountAccessible - vestingSchedule.releasedAmount;\\n\\n            return actualAccessible;\\n        }\\n    }\\n\\n    function getBlockTime() external view returns (uint256) {\\n        return block.timestamp;\\n    }\\n}\\n\",\"keccak256\":\"0x87bedfc5ad73e53cd4fe9877e7a7e5e9bf7fa8305ab9e01035f946cd93485f21\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\ninterface IERC20 {\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x5bc9a2a424370ebcf139f2ec42a84672249d81d0d0f20b6d6ce13f58ec5b4138\",\"license\":\"MIT\"},\"contracts/interfaces/IPoolWrapper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"../types/PoolWrapperTypes.sol\\\";\\n\\ninterface IPoolWrapper {\\n    function createPool(\\n        PoolWrapperTypes.CreatePoolMsg calldata createPoolMsg\\n    ) external returns (PoolWrapperTypes.CreatedPoolInfo memory);\\n\\n    function getPoolInfo(address stream) external view returns (PoolWrapperTypes.CreatedPoolInfo memory);\\n}\\n\",\"keccak256\":\"0x2bffc730755204dbc9ae3a4fd97d90aef09c200c2f40d23b510b598089a3d2c5\",\"license\":\"MIT\"},\"contracts/interfaces/IPositionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"../types/PositionTypes.sol\\\";\\nimport \\\"../lib/math/DecimalMath.sol\\\";\\n\\ninterface IPositionStorage {\\n    function getPosition(address _owner) external view returns (PositionTypes.Position memory);\\n\\n    function createPosition(address owner, uint256 inBalance, uint256 shares, Decimal memory index) external;\\n\\n    function updatePosition(address owner, PositionTypes.Position memory position) external;\\n\\n    function setExitDate(address owner, uint256 exitDate) external;\\n}\\n\",\"keccak256\":\"0x386ad6591db4d63b07f86e6701f0c3d579992fe0a51d60729312b35347212315\",\"license\":\"MIT\"},\"contracts/interfaces/IStream.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"../types/StreamTypes.sol\\\";\\nimport \\\"../types/PositionTypes.sol\\\";\\n\\ninterface IStream {\\n    function initialize(\\n        StreamTypes.createStreamMessage memory createStreamMessage,\\n        address positionStorageAddress\\n    ) external;\\n\\n    function withdraw(uint256 cap) external;\\n\\n    function subscribe(uint256 amountIn) external payable;\\n\\n    function exitStream() external;\\n\\n    function finalizeStream() external;\\n\\n    function syncStreamExternal() external;\\n\\n    function syncPosition(address user) external;\\n\\n    function cancelStream() external;\\n\\n    function cancelWithAdmin() external;\\n\\n    // View functions\\n    function getStreamStatus() external view returns (StreamTypes.Status);\\n\\n    function getStreamState() external view returns (StreamTypes.StreamState memory);\\n\\n    function getPosition(address user) external view returns (PositionTypes.Position memory);\\n\\n    // State variables getters (since they're public)\\n    function creator() external view returns (address);\\n\\n    function positionStorageAddress() external view returns (address);\\n\\n    function streamFactoryAddress() external view returns (address);\\n}\\n\",\"keccak256\":\"0x3fed2e45c7b7f34ad2f65e156416c7c0b2ad8cc71a9caa90d9b27b45d7a1ae03\",\"license\":\"MIT\"},\"contracts/interfaces/IStreamErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\ninterface IStreamErrors {\\n    // Stream errors\\n    error InsufficientTokenPayment(uint256 requiredTokenAmount, uint256 tokenBalance);\\n    error InvalidOutSupplyToken();\\n    error InvalidInSupplyToken();\\n    error PaymentFailed();\\n    error OperationNotAllowed();\\n    error Unauthorized();\\n    error InvalidWithdrawAmount();\\n    error WithdrawAmountExceedsBalance(uint256 cap);\\n    error InsufficientOutAmount();\\n    error InvalidPosition();\\n    error InvalidExitCondition();\\n    error InvalidVestingDuration();\\n    error InvalidVestingCliffDuration();\\n    error InvalidAmount();\\n    error StreamFactoryAddressAlreadySet();\\n    error InvalidStreamFactoryAddress();\\n    error InvalidImplementationAddress();\\n}\\n\",\"keccak256\":\"0x9ae6b44e31121ddebeee0a9e4119e34d7d21c7b0da611077734a1decba1705b3\",\"license\":\"MIT\"},\"contracts/interfaces/IStreamEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"../types/StreamTypes.sol\\\";\\nimport \\\"../lib/math/DecimalMath.sol\\\";\\n\\ninterface IStreamEvents {\\n    event StreamCreated(\\n        address indexed streamOutToken,\\n        address indexed streamInToken,\\n        address indexed streamFactoryAddress,\\n        uint256 streamOutAmount,\\n        uint256 bootstrappingStartTime,\\n        uint256 streamStartTime,\\n        uint256 streamEndTime,\\n        uint256 threshold,\\n        string streamName,\\n        string tosVersion,\\n        address streamAddress,\\n        uint16 streamId\\n    );\\n\\n    event StreamSynced(address indexed streamAddress, StreamTypes.Status mainStatus, uint256 lastUpdated);\\n\\n    event Subscribed(\\n        address indexed streamAddress,\\n        address indexed subscriber,\\n        uint256 amountIn,\\n        uint256 newShares,\\n        uint256 totalSharesAfter,\\n        uint256 totalInSupplyAfter\\n    );\\n\\n    event StreamSynced(\\n        address indexed streamAddress,\\n        uint256 lastUpdated,\\n        uint8 newStatus,\\n        Decimal distIndex,\\n        uint256 outRemaining,\\n        uint256 inSupply,\\n        uint256 spentIn,\\n        Decimal currentStreamedPrice\\n    );\\n\\n    event PositionSynced(address indexed streamAddress, address indexed subscriber, uint256 inBalance, uint256 shares);\\n\\n    event Withdrawn(\\n        address indexed streamAddress,\\n        address indexed subscriber,\\n        uint256 remainingInBalance,\\n        uint256 remainingShares,\\n        uint256 totalInSupply,\\n        uint256 totalShares\\n    );\\n\\n    event ExitRefunded(\\n        address indexed streamAddress,\\n        address indexed subscriber,\\n        uint256 refundedAmount,\\n        uint256 exitTimestamp\\n    );\\n    event ExitStreamed(\\n        address indexed streamAddress,\\n        address indexed subscriber,\\n        uint256 purchased,\\n        uint256 spentIn,\\n        uint256 exitTimestamp\\n    );\\n\\n    event FinalizedStreamed(\\n        address indexed streamAddress,\\n        address indexed creator,\\n        uint256 creatorRevenue,\\n        uint256 exitFeeAmount,\\n        uint256 refundedOutAmount,\\n        StreamTypes.Status status\\n    );\\n\\n    event FinalizedRefunded(\\n        address indexed streamAddress,\\n        address indexed creator,\\n        uint256 refundedOutAmount,\\n        StreamTypes.Status status\\n    );\\n\\n    event ParamsUpdated(\\n        address indexed factory,\\n        uint256 streamCreationFee,\\n        uint256 exitFeeRatio,\\n        uint256 minWaitingDuration,\\n        uint256 minBootstrappingDuration,\\n        uint256 minStreamDuration,\\n        string tosVersion\\n    );\\n\\n    event FeeCollectorUpdated(address indexed factory, address newFeeCollector);\\n\\n    event ProtocolAdminUpdated(address indexed factory, address newProtocolAdmin);\\n\\n    event FrozenStateUpdated(address indexed factory, bool frozen);\\n\\n    event AcceptedTokensUpdated(address indexed factory, address[] tokensAdded, address[] tokensRemoved);\\n\\n    event StreamCancelled(address indexed streamAddress, address creator, uint256 outSupply, StreamTypes.Status status);\\n\\n    event VestingContractDeployed(address indexed factoryAddress, address vestingContract);\\n\\n    event PoolWrapperUpdated(address indexed factoryAddress, address poolWrapper);\\n}\\n\",\"keccak256\":\"0xb680489a13467977417048e9b7ba0807c037f21c184d36ac5bd8b050900e7e82\",\"license\":\"MIT\"},\"contracts/interfaces/IStreamFactoryErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\n// StreamFactory errors\\ninterface IStreamFactoryErrors {\\n    // StreamFactory errors\\n    error InvalidBootstrappingStartTime();\\n    error InvalidStreamStartTime();\\n    error InvalidStreamEndTime();\\n    error StreamDurationTooShort();\\n    error BootstrappingDurationTooShort();\\n    error WaitingDurationTooShort();\\n    error ContractFrozen();\\n    error InvalidExitFeeRatio();\\n    error ZeroOutSupplyNotAllowed();\\n    error StreamInputTokenNotAccepted();\\n    error InvalidBootstrappingTime();\\n    error StreamStartMustBeAfterBootstrapping();\\n    error StreamEndMustBeAfterStart();\\n    error InvalidToSVersion();\\n    error InsufficientNativeToken();\\n    error FeeTransferFailed();\\n    error TokenTransferFailed();\\n    error StreamAddressPredictionFailed();\\n    error InvalidFeeCollector();\\n    error InvalidProtocolAdmin();\\n    error NotAdmin();\\n    error InvalidPoolWrapper();\\n    error InvalidImplementationAddress();\\n}\\n\",\"keccak256\":\"0x3e25ca293a17bc04c5567618f14e0ff791ef5866ca457aa95a0fc6cc63f45a9e\",\"license\":\"MIT\"},\"contracts/interfaces/IVesting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\n/**\\n * @title IVesting\\n * @dev Interface for the Vesting contract that manages token vesting schedules\\n */\\ninterface IVesting {\\n    /**\\n     * @dev Struct representing a vesting schedule for a beneficiary\\n     */\\n    struct VestingSchedule {\\n        uint256 cliffTime; // Timestamp when cliff period ends\\n        uint256 endTime; // Timestamp when vesting period ends\\n        uint256 totalAmount; // Total amount to be vested\\n        uint256 releasedAmount; // Amount already released to beneficiary\\n    }\\n\\n    /**\\n     * @dev Stakes funds for vesting to a beneficiary\\n     * @param beneficiary Address that will receive the vested tokens\\n     * @param tokenAddress Address of the token being vested\\n     * @param cliffTime Timestamp after which the first tokens can be withdrawn\\n     * @param endTime Timestamp when all tokens will be vested\\n     * @param totalAmount Total amount of tokens to vest\\n     */\\n    function stakeFunds(\\n        address beneficiary,\\n        address tokenAddress,\\n        uint256 cliffTime,\\n        uint256 endTime,\\n        uint256 totalAmount\\n    ) external;\\n\\n    /**\\n     * @dev Withdraws available vested funds for the caller\\n     * @param tokenAddress Address of the token to withdraw\\n     * @param scheduleIndex Index of the vesting schedule to withdraw from\\n     */\\n    function withdrawFunds(address tokenAddress, uint256 scheduleIndex) external;\\n\\n    /**\\n     * @dev Retrieves all vesting schedules for a beneficiary for a specific token\\n     * @param beneficiary Address of the beneficiary\\n     * @param tokenAddress Address of the token\\n     * @return Array of vesting schedules\\n     */\\n    function getStakesForBeneficiary(\\n        address beneficiary,\\n        address tokenAddress\\n    ) external view returns (VestingSchedule[] memory);\\n\\n    /**\\n     * @dev Calculates the amount available for withdrawal from a vesting schedule\\n     * @param vestingSchedule The vesting schedule to check\\n     * @return The withdrawable amount\\n     */\\n    function calculateWithdrawableAmount(VestingSchedule memory vestingSchedule) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x413cce156e5966f0f07d5353c3703da331f824ab6543136182682ac1ef33bb74\",\"license\":\"MIT\"},\"contracts/lib/helpers/TokenHelpers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"../../interfaces/IERC20.sol\\\";\\nimport \\\"../../interfaces/IStreamErrors.sol\\\";\\n\\nlibrary TokenHelpers {\\n    /**\\n     * @dev Checks if an address is a valid ERC20 token\\n     * @param tokenAddress The token address to validate\\n     * @param testAccount The account to use for testing the token interface\\n     * @return isValid True if the address implements the ERC20 interface\\n     */\\n    function isValidERC20(address tokenAddress, address testAccount) internal view returns (bool isValid) {\\n        if (tokenAddress == address(0)) {\\n            return false;\\n        }\\n\\n        try IERC20(tokenAddress).balanceOf(testAccount) returns (uint256) {\\n            return true;\\n        } catch {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Checks if an account has sufficient token balance\\n     * @param tokenAddress The ERC20 token address\\n     * @param account The account to check balance for\\n     * @param requiredAmount The minimum required balance\\n     * @return hasEnoughBalance True if the account has sufficient balance\\n     */\\n    function hasEnoughBalance(\\n        address tokenAddress,\\n        address account,\\n        uint256 requiredAmount\\n    ) internal view returns (bool) {\\n        try IERC20(tokenAddress).balanceOf(account) returns (uint256 balance) {\\n            return balance >= requiredAmount;\\n        } catch Error(string memory) {\\n            return false;\\n        } catch {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Safely transfers tokens from the contract to a recipient\\n     * @param tokenAddress Address of the token to transfer\\n     * @param recipient Address of the recipient\\n     * @param amount Amount of tokens to transfer\\n     * @return bool True if the transfer was successful\\n     */\\n    function safeTokenTransfer(address tokenAddress, address recipient, uint256 amount) internal returns (bool) {\\n        if (amount == 0 || recipient == address(0)) {\\n            return true;\\n        }\\n\\n        IERC20 token = IERC20(tokenAddress);\\n        bool success = token.transfer(recipient, amount);\\n        if (!success) {\\n            revert IStreamErrors.PaymentFailed();\\n        }\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0xdc4e075a0094053b44e1684cb202a48532b2de397f6a6a5ed0c152da816f04b4\",\"license\":\"MIT\"},\"contracts/lib/math/DecimalMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\n/**\\n * @title Decimal type and math operations\\n * @dev Library for handling decimal math operations with fixed-point arithmetic\\n */\\n\\nstruct Decimal {\\n    uint256 value; // Value scaled by DECIMAL_PRECISION\\n}\\n\\n/**\\n * @title DecimalMath\\n * @dev Library for handling decimal math operations with fixed-point arithmetic\\n */\\nlibrary DecimalMath {\\n    // We'll use 6 decimal places for precision\\n    uint256 public constant DECIMAL_PRECISION = 1e6;\\n\\n    // Convert a regular number to a Decimal\\n    function fromNumber(uint256 value) internal pure returns (Decimal memory) {\\n        return Decimal({ value: value * DECIMAL_PRECISION });\\n    }\\n\\n    // Convert a Decimal to a regular number while keeping the remainder\\n    function toNumber(Decimal memory d) internal pure returns (uint256, Decimal memory) {\\n        return (d.value / DECIMAL_PRECISION, Decimal({ value: d.value % DECIMAL_PRECISION }));\\n    }\\n\\n    // Floor division for Decimal\\n    function floor(Decimal memory d) internal pure returns (uint256) {\\n        return d.value / DECIMAL_PRECISION;\\n    }\\n\\n    // Ceiling division for Decimal\\n    function ceil(Decimal memory d) internal pure returns (uint256) {\\n        return (d.value + DECIMAL_PRECISION - 1) / DECIMAL_PRECISION;\\n    }\\n\\n    // Multiply two Decimals\\n    function mul(Decimal memory a, Decimal memory b) internal pure returns (Decimal memory) {\\n        return Decimal({ value: (a.value * b.value) / DECIMAL_PRECISION });\\n    }\\n\\n    // Multiply Decimal by a scalar\\n    function mulScalar(Decimal memory a, uint256 scalar) internal pure returns (Decimal memory) {\\n        return Decimal({ value: a.value * scalar });\\n    }\\n\\n    // Divide two Decimals\\n    function div(Decimal memory a, Decimal memory b) internal pure returns (Decimal memory) {\\n        return Decimal({ value: (a.value * DECIMAL_PRECISION) / b.value });\\n    }\\n\\n    // Divide Decimal by a scalar\\n    function divScalar(Decimal memory a, uint256 scalar) internal pure returns (Decimal memory) {\\n        return Decimal({ value: a.value / scalar });\\n    }\\n\\n    // Add two Decimals\\n    function add(Decimal memory a, Decimal memory b) internal pure returns (Decimal memory) {\\n        return Decimal({ value: a.value + b.value });\\n    }\\n\\n    // Subtract two Decimals\\n    function sub(Decimal memory a, Decimal memory b) internal pure returns (Decimal memory) {\\n        return Decimal({ value: a.value - b.value });\\n    }\\n\\n    // From ratio to Decimal\\n    function fromRatio(uint256 num, uint256 denom) internal pure returns (Decimal memory) {\\n        return Decimal({ value: (num * DECIMAL_PRECISION) / denom });\\n    }\\n\\n    // > operator for Decimals\\n    function gt(Decimal memory a, Decimal memory b) internal pure returns (bool) {\\n        return a.value > b.value;\\n    }\\n\\n    // < operator for Decimals\\n    function lt(Decimal memory a, Decimal memory b) internal pure returns (bool) {\\n        return a.value < b.value;\\n    }\\n}\\n\",\"keccak256\":\"0x664491d1766944366e4a8ac0967b13fb7e5dbc8479fbd36b6472819d996c11d2\",\"license\":\"MIT\"},\"contracts/lib/math/StreamMathLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../types/StreamTypes.sol\\\";\\nimport \\\"./DecimalMath.sol\\\";\\nimport \\\"../../types/PositionTypes.sol\\\";\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\nlibrary StreamMathLib {\\n    /**\\n     * @dev Calculates the time difference ratio between current time and last updated time\\n     * @param currentTimestamp Current timestamp\\n     * @param streamStartTime Timestamp when the stream starts\\n     * @param streamEndTime Timestamp when the stream ends\\n     * @param lastUpdated Timestamp when the stream was last updated\\n     * @return The ratio of time elapsed since last update compared to total remaining time (scaled by 1e18)\\n     */\\n    function calculateDiff(\\n        uint256 currentTimestamp,\\n        uint256 streamStartTime,\\n        uint256 streamEndTime,\\n        uint256 lastUpdated\\n    ) internal pure returns (Decimal memory) {\\n        // If the stream is not started yet or already ended, return 0\\n        if (currentTimestamp < streamStartTime || lastUpdated >= streamEndTime) {\\n            return DecimalMath.fromNumber(0);\\n        }\\n\\n        // If lastUpdated is before start time, set it to start time\\n        uint256 effectiveLastUpdated = lastUpdated;\\n        if (effectiveLastUpdated < streamStartTime) {\\n            effectiveLastUpdated = streamStartTime;\\n        }\\n\\n        // If current time is past end time, use end time instead\\n        uint256 effectiveNow = currentTimestamp;\\n        if (effectiveNow > streamEndTime) {\\n            effectiveNow = streamEndTime;\\n        }\\n\\n        uint256 numerator = effectiveNow - effectiveLastUpdated;\\n        uint256 denominator = streamEndTime - effectiveLastUpdated;\\n\\n        if (denominator == 0 || numerator == 0) {\\n            return DecimalMath.fromNumber(0);\\n        }\\n        // Return ratio of time elapsed since last update compared to total remaining time\\n        return DecimalMath.fromRatio(numerator, denominator);\\n    }\\n\\n    /**\\n     * @dev Calculates the stream status based on the current state and timestamp\\n     * @param currentStatus Current status of the stream\\n     * @param currentTime Current timestamp to check against\\n     * @param bootstrappingStartTime Timestamp when bootstrapping phase starts\\n     * @param streamStartTime Timestamp when active streaming starts\\n     * @param streamEndTime Timestamp when streaming ends\\n     * @return IStreamTypes.Status The calculated stream status\\n     */\\n    function calculateStreamStatus(\\n        StreamTypes.Status currentStatus,\\n        uint256 currentTime,\\n        uint256 bootstrappingStartTime,\\n        uint256 streamStartTime,\\n        uint256 streamEndTime\\n    ) internal pure returns (StreamTypes.Status) {\\n        // Don't update if stream is in a final state\\n        if (\\n            currentStatus == StreamTypes.Status.Cancelled ||\\n            currentStatus == StreamTypes.Status.FinalizedRefunded ||\\n            currentStatus == StreamTypes.Status.FinalizedStreamed\\n        ) {\\n            return currentStatus;\\n        }\\n\\n        // Update status based on current timestamp\\n        if (currentTime < bootstrappingStartTime) {\\n            return StreamTypes.Status.Waiting;\\n        } else if (currentTime >= bootstrappingStartTime && currentTime < streamStartTime) {\\n            return StreamTypes.Status.Bootstrapping;\\n        } else if (currentTime >= streamStartTime && currentTime < streamEndTime) {\\n            return StreamTypes.Status.Active;\\n        } else if (currentTime >= streamEndTime) {\\n            return StreamTypes.Status.Ended;\\n        }\\n\\n        // This should never be reached, but return current status as fallback\\n        return currentStatus;\\n    }\\n\\n    /**\\n     * @dev Calculates updated stream state based on time difference\\n     * @param state Current stream state\\n     * @param diff Time difference in seconds\\n     * @return Updated stream state\\n     */\\n    function calculateUpdatedState(\\n        StreamTypes.StreamState memory state,\\n        Decimal memory diff\\n    ) internal pure returns (StreamTypes.StreamState memory) {\\n        // Create a copy of the state to avoid modifying the input\\n        StreamTypes.StreamState memory newState = state;\\n\\n        if (newState.shares > 0 && diff.value > 0) {\\n            // Calculate new distribution balance and spent in amount\\n            Decimal memory newDecimalDistributionBalance = DecimalMath.mul(\\n                DecimalMath.fromNumber(newState.outRemaining),\\n                diff\\n            );\\n            uint256 newDistributionBalance = DecimalMath.floor(newDecimalDistributionBalance);\\n\\n            Decimal memory newDecimalSpentIn = DecimalMath.mul(DecimalMath.fromNumber(newState.inSupply), diff);\\n            uint256 spentIn = DecimalMath.floor(newDecimalSpentIn);\\n\\n            // Update state variables\\n            newState.spentIn += spentIn;\\n            newState.inSupply -= spentIn;\\n\\n            if (newDistributionBalance > 0) {\\n                newState.outRemaining -= newDistributionBalance;\\n                // Increment distribution index\\n                Decimal memory distIndexIncrementAmount = DecimalMath.fromRatio(\\n                    newDistributionBalance,\\n                    newState.shares\\n                );\\n                newState.distIndex = DecimalMath.add(newState.distIndex, distIndexIncrementAmount);\\n                // Update current streamed price\\n                newState.currentStreamedPrice = DecimalMath.fromRatio(spentIn, newDistributionBalance);\\n            }\\n        }\\n        return newState;\\n    }\\n\\n    function computeSharesAmount(\\n        uint256 amountIn,\\n        bool roundUp,\\n        uint256 inSupply,\\n        uint256 totalShares\\n    ) internal pure returns (uint256) {\\n        if (totalShares == 0 || amountIn == 0) {\\n            return amountIn;\\n        }\\n\\n        uint256 totalSharesIn = totalShares * amountIn;\\n        if (roundUp) {\\n            return (totalSharesIn + inSupply - 1) / inSupply;\\n        } else {\\n            return totalSharesIn / inSupply;\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates the exit fee amount based on the spent in amount\\n     * @param spentInAmount Amount of tokens spent in the stream\\n     * @return exitFeeAmount The calculated fee amount\\n     * @return remainingAmount The remaining amount after fee deduction\\n     */\\n    function calculateExitFee(\\n        uint256 spentInAmount,\\n        Decimal memory exitFeeRatio\\n    ) internal pure returns (uint256 exitFeeAmount, uint256 remainingAmount) {\\n        Decimal memory decimalSpentIn = DecimalMath.fromNumber(spentInAmount);\\n\\n        // Calculate exit fee amount using DecimalMath\\n        Decimal memory decimalExitFeeAmount = DecimalMath.mul(decimalSpentIn, exitFeeRatio);\\n        exitFeeAmount = DecimalMath.floor(decimalExitFeeAmount);\\n        remainingAmount = spentInAmount - exitFeeAmount;\\n\\n        return (exitFeeAmount, remainingAmount);\\n    }\\n\\n    function calculatePoolAmount(uint256 creatorRevenue, Decimal memory poolRatio) internal pure returns (uint256) {\\n        Decimal memory decimalCreatorRevenue = DecimalMath.fromNumber(creatorRevenue);\\n        Decimal memory decimalPoolAmount = DecimalMath.mul(decimalCreatorRevenue, poolRatio);\\n        return DecimalMath.floor(decimalPoolAmount);\\n    }\\n\\n    function syncPosition(\\n        PositionTypes.Position memory position,\\n        Decimal memory distIndex,\\n        uint256 totalShares,\\n        uint256 inSupply,\\n        uint256 nowTime\\n    ) internal pure returns (PositionTypes.Position memory) {\\n        // Create a new position in memory to store the updated values\\n        PositionTypes.Position memory updatedPosition = PositionTypes.Position({\\n            inBalance: position.inBalance,\\n            shares: position.shares,\\n            index: position.index,\\n            lastUpdateTime: position.lastUpdateTime,\\n            pendingReward: position.pendingReward,\\n            spentIn: position.spentIn,\\n            purchased: position.purchased,\\n            exitDate: position.exitDate\\n        });\\n\\n        // Calculate index difference for distributions since last update\\n        Decimal memory indexDiff = DecimalMath.sub(distIndex, updatedPosition.index);\\n        uint256 spent = 0;\\n        uint256 purchased = 0;\\n\\n        // Only process if there are shares in the stream\\n        if (totalShares > 0) {\\n            // Calculate purchased amount based on position shares and index difference\\n            Decimal memory positionSharesDecimal = DecimalMath.fromNumber(updatedPosition.shares);\\n            Decimal memory purchasedDecimal = DecimalMath.add(\\n                DecimalMath.mul(positionSharesDecimal, indexDiff),\\n                updatedPosition.pendingReward\\n            );\\n            (purchased, purchasedDecimal) = DecimalMath.toNumber(purchasedDecimal);\\n            updatedPosition.purchased += purchased;\\n            updatedPosition.pendingReward = purchasedDecimal;\\n\\n            // Calculate remaining balance based on current shares ratio\\n            uint256 inRemaining = (inSupply * updatedPosition.shares) / totalShares;\\n            // Calculate spent amount\\n            spent = updatedPosition.inBalance - inRemaining;\\n            updatedPosition.spentIn += spent;\\n            updatedPosition.inBalance = inRemaining;\\n        }\\n\\n        // Update position tracking\\n        updatedPosition.index = distIndex;\\n        updatedPosition.lastUpdateTime = nowTime;\\n\\n        return updatedPosition;\\n    }\\n\\n    function calculateVestingSchedule(\\n        uint256 nowTime,\\n        uint256 cliffDuration,\\n        uint256 vestingDuration\\n    ) internal pure returns (uint256 cliffTime, uint256 endTime) {\\n        cliffTime = nowTime + cliffDuration;\\n        endTime = nowTime + vestingDuration;\\n        return (cliffTime, endTime);\\n    }\\n}\\n\",\"keccak256\":\"0x8d1838182e328e1a2944d7eae92610f6e98bada488e126b834b38e28827cfdf3\",\"license\":\"MIT\"},\"contracts/storage/PositionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"../types/PositionTypes.sol\\\";\\nimport \\\"../lib/math/DecimalMath.sol\\\";\\n\\ncontract PositionStorage {\\n    using PositionTypes for PositionTypes.Position;\\n\\n    mapping(address => PositionTypes.Position) private positions;\\n    address public immutable streamContractAddress;\\n\\n    constructor(address _streamContractAddress) {\\n        streamContractAddress = _streamContractAddress;\\n    }\\n\\n    function getPosition(address _owner) external view returns (PositionTypes.Position memory) {\\n        return positions[_owner];\\n    }\\n\\n    modifier onlyStreamContract() {\\n        require(msg.sender == streamContractAddress, \\\"Position can only be set by the stream contract\\\");\\n        _;\\n    }\\n\\n    function createPosition(\\n        address owner,\\n        uint256 inBalance,\\n        uint256 shares,\\n        Decimal memory index\\n    ) external onlyStreamContract {\\n        positions[owner] = PositionTypes.Position(\\n            inBalance,\\n            shares,\\n            index,\\n            block.timestamp,\\n            DecimalMath.fromNumber(0),\\n            0,\\n            0,\\n            0\\n        );\\n    }\\n\\n    function updatePosition(address owner, PositionTypes.Position memory position) external onlyStreamContract {\\n        positions[owner] = position;\\n    }\\n\\n    function setExitDate(address owner, uint256 exitDate) external onlyStreamContract {\\n        positions[owner].exitDate = exitDate;\\n    }\\n}\\n\",\"keccak256\":\"0xf90fa78dd55581fbcf46de01c6479df8b982ceea3d72908583821d9bd4ed2a90\",\"license\":\"MIT\"},\"contracts/types/PoolWrapperTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nlibrary PoolWrapperTypes {\\n    struct CreatePoolMsg {\\n        address token0;\\n        address token1;\\n        uint256 amount0;\\n        uint256 amount1;\\n    }\\n\\n    struct CreatedPoolInfo {\\n        address poolAddress;\\n        address token0;\\n        address token1;\\n    }\\n}\\n\",\"keccak256\":\"0xd67fb482e72c55e037334355080ec68627a3b4e307e54023b737e29adc25f58f\",\"license\":\"MIT\"},\"contracts/types/PositionTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"../lib/math/DecimalMath.sol\\\";\\n\\nlibrary PositionTypes {\\n    struct Position {\\n        uint256 inBalance;\\n        uint256 shares;\\n        Decimal index;\\n        uint256 lastUpdateTime;\\n        Decimal pendingReward;\\n        uint256 spentIn;\\n        uint256 purchased;\\n        uint256 exitDate;\\n    }\\n}\\n\",\"keccak256\":\"0x20e3d610c16a5c3c4e245cb129662324aeb6e67e73f836d3325a45e6f52bbb2b\",\"license\":\"MIT\"},\"contracts/types/StreamFactoryTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"../lib/math/DecimalMath.sol\\\";\\n\\nlibrary StreamFactoryTypes {\\n    struct Params {\\n        uint256 streamCreationFee;\\n        address streamCreationFeeToken;\\n        Decimal exitFeeRatio;\\n        uint256 minWaitingDuration;\\n        uint256 minBootstrappingDuration;\\n        uint256 minStreamDuration;\\n        address feeCollector;\\n        address protocolAdmin;\\n        string tosVersion;\\n        address vestingAddress;\\n        address poolWrapperAddress;\\n        address streamImplementationAddress;\\n    }\\n\\n    struct initializeStreamMessage {\\n        uint256 streamCreationFee;\\n        address streamCreationFeeToken;\\n        Decimal exitFeeRatio;\\n        uint256 minWaitingDuration;\\n        uint256 minBootstrappingDuration;\\n        uint256 minStreamDuration;\\n        address feeCollector;\\n        address protocolAdmin;\\n        string tosVersion;\\n        address poolWrapperAddress;\\n        address[] acceptedInSupplyTokens;\\n        address streamImplementationAddress;\\n    }\\n}\\n\",\"keccak256\":\"0xf06c159f59328f62225ce42a6c8f973c95712a68ea54271f993091bbf2dabcf2\",\"license\":\"MIT\"},\"contracts/types/StreamTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"../lib/math/DecimalMath.sol\\\";\\n\\nlibrary StreamTypes {\\n    enum Status {\\n        Waiting,\\n        Bootstrapping,\\n        Active,\\n        Ended,\\n        FinalizedRefunded,\\n        FinalizedStreamed,\\n        Cancelled\\n    }\\n\\n    struct createStreamMessage {\\n        uint256 streamOutAmount;\\n        address outSupplyToken;\\n        uint256 bootstrappingStartTime;\\n        uint256 streamStartTime;\\n        uint256 streamEndTime;\\n        uint256 threshold;\\n        string name;\\n        address inSupplyToken;\\n        address creator;\\n        VestingInfo creatorVesting;\\n        VestingInfo beneficiaryVesting;\\n        PoolInfo poolInfo;\\n        bytes32 salt;\\n        string tosVersion;\\n    }\\n    struct StreamTimes {\\n        uint256 bootstrappingStartTime;\\n        uint256 streamStartTime;\\n        uint256 streamEndTime;\\n    }\\n\\n    struct StreamMetadata {\\n        string name;\\n    }\\n\\n    struct StreamState {\\n        uint256 outRemaining;\\n        Decimal distIndex;\\n        uint256 spentIn;\\n        uint256 shares;\\n        Decimal currentStreamedPrice;\\n        uint256 threshold;\\n        uint256 inSupply;\\n        uint256 outSupply;\\n        uint256 lastUpdated;\\n    }\\n\\n    struct StreamTokens {\\n        address inSupplyToken;\\n        address outSupplyToken;\\n    }\\n\\n    struct VestingInfo {\\n        bool isVestingEnabled;\\n        uint16 vestingDuration;\\n        uint16 cliffDuration;\\n    }\\n\\n    struct PoolInfo {\\n        uint256 poolOutSupplyAmount;\\n    }\\n\\n    struct PostStreamActions {\\n        PoolInfo poolInfo;\\n        VestingInfo creatorVesting;\\n        VestingInfo beneficiaryVesting;\\n    }\\n}\\n\",\"keccak256\":\"0x5f3b9ef01e3223295942fce24d7344e2de22c467f25863b486a590339072748e\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nlibrary console {\\n    address constant CONSOLE_ADDRESS =\\n        0x000000000000000000636F6e736F6c652e6c6f67;\\n\\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            pop(\\n                staticcall(\\n                    gas(),\\n                    consoleAddress,\\n                    add(payload, 32),\\n                    mload(payload),\\n                    0,\\n                    0\\n                )\\n            )\\n        }\\n    }\\n\\n    function _castToPure(\\n      function(bytes memory) internal view fnIn\\n    ) internal pure returns (function(bytes memory) pure fnOut) {\\n        assembly {\\n            fnOut := fnIn\\n        }\\n    }\\n\\n    function _sendLogPayload(bytes memory payload) internal pure {\\n        _castToPure(_sendLogPayloadImplementation)(payload);\\n    }\\n\\n    function log() internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n    }\\n\\n    function logInt(int256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n    }\\n\\n    function logUint(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function logString(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function logBool(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function logAddress(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n    }\\n\\n    function log(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function log(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function log(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function log(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function log(uint256 p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n}\\n\",\"keccak256\":\"0xf2560b5386574153057104d19a9e68a32ee912cf23c0c8df1fe9a0607f42d543\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a03461008157601f62002d5338819003918201601f19168301916001600160401b038311848410176100865780849260209460405283398101031261008157516001600160a01b038116810361008157608052604051612cb690816200009d82396080518181816101e401528181610c20015281816118ec01526120fb0152f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe608080604052600436101561001357600080fd5b600090813560e01c90816302d05d3f146119e6575080630390547414610a295780630bcc8eba146118be5780630e5634df146117c35780630f574ba7146114cc57806316c197391461149a5780632ae4e931146114215780632e1a7d4d1461127157806334793e05146111935780637a7c04a614610a815780638a03764f14610a4f578063af5c3ac414610a29578063bdf4a94714610970578063c0ae398c146108ee578063cbf064151461082e578063d08452c2146107fb578063e427d08c146107d2578063e9a9e1441461070e578063f69e8fba146101b05763f7c843c8146100fd57600080fd5b346101ad5760203660031901126101ad57610116611b5d565b61011f81612383565b906101696101596101406101316122af565b61013961246d565b4291611da6565b936020850151906060860151429260c088015192612b4a565b9261016484846124f4565b6124ab565b60208251920151604051928352602083015260018060a01b0316907f366709aadaf43525a76cecc1264bd3e11f30bd3a30b5d42e7fcf2b1f81f818aa60403092a380f35b80fd5b50346101ad57806003193601126101ad576101c96125b4565b604051635e615a6b60e01b8082529091906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116918385600481865afa9485156107035784956106e7575b5060ff600e54169461027861023b61023261246d565b9788429161259c565b9661026960405161024b81611afe565b600181526020998a3681840137600361026383611d05565b52611de6565b42906102736122af565b611da6565b9361028c8560a06040820151910151111590565b1561068057906102d392916102c88560c08401511691604084015187600b54169060408a015190620f42409485916102c38461280d565b612a8b565b510497888092611d38565b948161066e575b50505082946012549283610459575b505050505060ff601354166000146104345760135461031e61ffff610313818460181c1642611cc9565b9260081c1642611cc9565b9185600b54169086610120818b54169201511691823b156104305760405162f55c9960e61b81526001600160a01b039182166004820152911660248201526044810192909252606482019290925260848101839052908690829060a490829084905af1801561042557610408575b509061016492916103eb95965b6005938651806103ee575b508854169286519160405193845283015260408201528260608201527f476ec185ebf8c5d4d3d9fe3a58370d6626d3438833a6689990b80962f25e571460803092a3611cec565b80f35b6104019082600c5416838c541690612769565b50386103a4565b906103eb9561041b610164959493611aeb565b955090919261038c565b6040513d88823e3d90fd5b8980fd5b5090816103eb9596610453859461016496600b5416868b541690612769565b50610399565b9091929395506104688461280d565b61047360095461280d565b908b60405161048181611a99565b5251908282029180830484149015171561065a576104a86104c993926104c0925190612843565b604051906104b582611a99565b81526102c38961280d565b51048096611d38565b9487600b5416928a89600c54169360046040518094819382525afa90811561064f578991610140918d9161062d575b5001511692604051608081018181106001600160401b03821117610619576040908152828252818e0185815281830185815260608085018a815293516302e2616d60e61b815294518e16600486015291518d16602485015251604484015290516064830152816084818f895af1801561060e57610593575b50839291610588959461058292612769565b50612769565b5038808080806102e9565b6060813d8211610606575b816105ab60609383611b19565b81010312610602579184610582928e60406105f3816105889b9a99988151946105d386611ad0565b6105dc82611e72565b86526105e9818301611e72565b9086015201611e72565b91015292505091929394610570565b8b80fd5b3d915061059e565b6040513d8e823e3d90fd5b634e487b7160e01b8d52604160045260248dfd5b61064991503d808f833e6106418183611b19565b810190611ea4565b386104f8565b6040513d8d823e3d90fd5b634e487b7160e01b8c52601160045260248cfd5b61067792612769565b503886816102da565b5050506103eb929361016491600491600482600c5416926106ac818a54169460e0890195865191612769565b508854169251916040519283528201527f2e83dafa2991dd7c20bc281659948e55f6f2eaa4cba2d06345f3109ec15fcaf960403092a3611cec565b6106fc9195503d8086833e6106418183611b19565b933861021c565b6040513d86823e3d90fd5b50346101ad57806003193601126101ad576107276125b4565b61076461074260ff600e541661073b61246d565b429161259c565b6040519061074f82611afe565b60018252602036818401378361026383611d05565b600c5481546009546001600160a01b0392610783928416908416612769565b50600660ff19600e541617600e558154166009546040519182526020820152600660408201527febb55ea32d517c9ec85f61357977ac73b84e65ebeaedb528ed791d7e25e30a2b60603092a280f35b50346101ad57806003193601126101ad576001546040516001600160a01b039091168152602090f35b50346101ad57806003193601126101ad57600b54600c54604080516001600160a01b039384168152919092166020820152f35b50346101ad57806003193601126101ad5761084833612383565b61085181611e3f565b156108dc576103eb906108d661088861087061086b6122af565b612550565b926020840151606085015160c0860151914293612b4a565b916101646108a560ff600e5416429061089f61246d565b9061259c565b6108cb6108bb8460a06040820151910151111590565b866108c4611c96565b9184611fd7565b4260e0860152611cec565b336124f4565b60405163673f032f60e11b8152600490fd5b50346101ad57806003193601126101ad5761012060025460405161091181611a99565b600354815260045460055460405161092881611a99565b6006548152600754906008549260095494600a54966040519889525160208901526040880152606087015251608086015260a085015260c084015260e0830152610100820152f35b50346101ad57806003193601126101ad5760e060405161098f81611a99565b6012548152610a276040516109a381611ad0565b60135460ff81161515825261ffff90818160081c16602084015260181c166040820152610a006109d1611c96565b916040519451855260208501906040908051151583528161ffff91826020820151166020860152015116910152565b805115156080840152602081015161ffff90811660a08501526040909101511660c0830152565bf35b50346101ad57806003193601126101ad57602060ff600e5416610a276040518092611a0a565b50346101ad57806003193601126101ad57600f5460105460115460408051938452602084019290925290820152606090f35b50346101ad5760031960403682011261117b576001600160401b036004351161117b5761024090600435360301126101ad57604051906101c082018281106001600160401b0382111761117f57604052600435600401358252610ae8602460043501611b78565b602083015260043560448101356040840152606481013560608401526084810135608084015260a481013560a084015260c401356001600160401b03811161117b57610b3b906004369181350101611bf4565b60c0830152610b4e60e460043501611b78565b60e0830152610b6261010460043501611b78565b610100830152610b783661012460043501611c4a565b610120830152610b8e3661018460043501611c4a565b610140830152602060043536036101e31901126101ad57604051610bb181611a99565b6101e460043501358152610160830152610204600435013561018083015261022460043501356001600160401b03811161117b57610bf6906004369181350101611bf4565b6101a08301526024356001600160a01b038116810361117b576001549060ff8260a01c1661116a577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316330361116a576020840151610c679033906001600160a01b03166125cf565b1561115857610c96610c8185516101608701515190611cc9565b602086015130906001600160a01b03166126b8565b156111465760e0840151610cb49033906001600160a01b03166125cf565b156111345761012084015180516110b5575b506101408401518051611012575b506101608401515180610fe9575b506001600160a01b039081166001600160a01b0319928316176001556101008401518354911691161781556040518190610d1b81611a99565b52604051610d2881611a99565b81815282519082604051610d3b81611a99565b52604051610d4881611a99565b83815260a085015191855193604051610d6081611ab4565b8181528260208201528660408201528660608201528360808201528460a08201528660c08201528560e082015261010042910152600255516003558360045583600555516006556007558160085560095542600a5560018060a01b0360e08301511660018060a01b0360208401511690604051604081018181106001600160401b03821117610fd557839160209160405283815201526bffffffffffffffffffffffff60a01b600b541617600b556bffffffffffffffffffffffff60a01b600c541617600c5560c08201519182604051610e3981611a99565b5282516001600160401b038111610fc157610e55600d54611a2d565b601f8111610f5e575b506020601f8211600114610edd57839482939492610ed2575b50508160011b916000199060031b1c191617600d555b60ff19600e5416600e556040810151906080606082015191015191610eb3604051611ad0565b600f556010556011556001805460ff60a01b1916600160a01b17905580f35b015190503880610e77565b600d84527fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb590601f198316855b818110610f4657509583600195969710610f2d575b505050811b01600d55610e8d565b015160001960f88460031b161c19169055388080610f1f565b9192602060018192868b015181550194019201610f0a565b600d84527fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb5601f830160051c81019160208410610fb7575b601f0160051c01905b818110610fac5750610e5e565b848155600101610f9f565b9091508190610f96565b634e487b7160e01b83526041600452602483fd5b634e487b7160e01b85526041600452602485fd5b845110611000576101608401515160125538610ce2565b60405163162908e360e11b8152600490fd5b6020015161ffff16156110a35761ffff6040610140860151015116156110915761014084015161ffff60208160408401511692015116111561109157610140840151805115159060145460ff64ffff000000604062ffff00602086015160081b1694015160181b1693169064ffffffffff191617171760145538610cd4565b604051632676310d60e11b8152600490fd5b604051632b39f6cb60e01b8152600490fd5b6020015161ffff16156110a35761ffff6040610120860151015116156110915761012084015161ffff60208160408401511692015116111561109157610120840151805115159060135460ff64ffff000000604062ffff00602086015160081b1694015160181b1693169064ffffffffff191617171760135538610cc6565b604051632181b39760e01b8152600490fd5b6040516357084d7360e11b8152600490fd5b6040516372146d6160e11b8152600490fd5b6040516282b42960e81b8152600490fd5b5080fd5b634e487b7160e01b82526041600452602482fd5b50346101ad57806003193601126101ad576111ac6122af565b6111da6111c36111ba61246d565b92834291611da6565b916111cd836124ab565b429060ff600e541661259c565b6111e381611cec565b61010082015191600782101561125d576020810151815160c08301519160ff60806040860151950151956040519788521660208701525160408601526060850152608084015260a08301525160c08201527f335a3e7f39aaebd3c219ca4ebda42ee6bb0cbd2b660d4d71a0dac6f7c03d710960e03092a280f35b634e487b7160e01b84526021600452602484fd5b50346101ad5760208060031936011261117b5760043590611291826125c8565b61129a33612383565b916112a483611e3f565b156108dc576113056112b461246d565b6102696112c860ff600e541683429161259c565b6113006040516112d781611ad0565b600281526040368983013760026112ed82611d05565b5260016112f982611d28565b5282611de6565b611cec565b8281015191611324606083019384519660c08501974292895192612b4a565b9182518211611408577ffabb9e7afa4ef595f60e1ae9041b2b311b4acb27aeaed4b11b6f2abf689af10a9392916113a96113bc92845183146000146113ef5761139d88860151985b86019861137a818b51611d38565b8a52611387858851611d38565b8752611394858c51611d38565b8b528751611d38565b865261016485336124f4565b600b5433906001600160a01b0316612769565b50519251935190516040805194855260208501959095529383015260608201929092523391309180608081015b0390a380f35b61139d6114028a518a8801519086612b04565b9861136c565b6040516318928cbf60e31b815260048101839052602490fd5b50346101ad57806003193601126101ad5761012061143d6122af565b604051908051825260208101515160208301526040810151604083015260608101516060830152608081015151608083015260a081015160a083015260c081015160c083015260e081015160e08301526101008091015190820152f35b50346101ad5760203660031901126101ad576101006114bf6114ba611b5d565b612383565b610a276040518092611b8c565b5060208060031936011261117b576004356114e6816125c8565b61152b6114fa60ff600e541661073b61246d565b61130060405161150981611ad0565b6002815260403687830137600161151f82611d05565b5260026112f982611d28565b600b546040516370a0823160e01b81523360048201526001600160a01b03909116908381602481855afa9081156117b8578591611787575b5082811061176957508284916064604051809481936323b872dd60e01b83523360048401523060248401528760448401525af190811561070357849161173c575b501561172a576115b333612383565b6115be61086b6122af565b9083810151156000146116b957508061160260c07f1913e17d5784005a914657f9e879fcc261644776365f1d84aeb45afcb6da486493015160608301519085612ad7565b93808201518660405161161481611a99565b526040519061162282611a99565b878252866040519361163385611a67565b878552840152604083015242606083015260808201528560a08201528560c08201528560e0820152905b61168d60c0820191611670868451611cc9565b83526101646060820194611685898751611cc9565b8652336124f4565b5190516040805194855260208501959095529383015260608201929092523391309180608081016113e9565b928161170860c07f1913e17d5784005a914657f9e879fcc261644776365f1d84aeb45afcb6da486494018051966116f7606085019889519089612ad7565b978585015190519042935192612b4a565b91611714858451611cc9565b83528201611723868251611cc9565b905261165d565b6040516307a4ced160e51b8152600490fd5b61175c9150833d8511611762575b6117548183611b19565b810190611e5a565b386115a4565b503d61174a565b82604491604051916381ddee1b60e01b835260048301526024820152fd5b90508381813d83116117b1575b61179e8183611b19565b810103126117ad575138611563565b8480fd5b503d611794565b6040513d87823e3d90fd5b50346101ad57806003193601126101ad576040518190600d54926117e684611a2d565b8083526020809581850193600191828116908160001461189e5750600114611845575b5050505061181b826040940383611b19565b6118378351948593818552519283809286015285850190611b3a565b601f01601f19168101030190f35b92919550600d83527fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb55b82841061188b5750505082019092019161181b84604084611809565b805486850188015292860192810161186f565b60ff1916865250505090151560051b830101925061181b84604084611809565b50346101ad57806003193601126101ad57604051635e615a6b60e01b81526001600160a01b039082816004817f000000000000000000000000000000000000000000000000000000000000000086165afa9081156119db57829160e09185916119c1575b50015116330361116a5761193d60ff600e541661073b61246d565b60405190608082018281106001600160401b03821117610fd5576040526003825260603660208401378361197083611d05565b52600161197c83611d28565b528151600210156119ad57906119989160026060830152611de6565b61078381600c54168284541660095491612769565b634e487b7160e01b84526032600452602484fd5b6119d591503d8087833e6106418183611b19565b38611922565b6040513d85823e3d90fd5b90503461117b578160031936011261117b5790546001600160a01b03168152602090f35b906007821015611a175752565b634e487b7160e01b600052602160045260246000fd5b90600182811c92168015611a5d575b6020831014611a4757565b634e487b7160e01b600052602260045260246000fd5b91607f1691611a3c565b61010081019081106001600160401b03821117611a8357604052565b634e487b7160e01b600052604160045260246000fd5b602081019081106001600160401b03821117611a8357604052565b61012081019081106001600160401b03821117611a8357604052565b606081019081106001600160401b03821117611a8357604052565b6001600160401b038111611a8357604052565b604081019081106001600160401b03821117611a8357604052565b90601f801991011681019081106001600160401b03821117611a8357604052565b60005b838110611b4d5750506000910152565b8181015183820152602001611b3d565b600435906001600160a01b0382168203611b7357565b600080fd5b35906001600160a01b0382168203611b7357565b60e080918051845260208101516020850152604081015151604085015260608101516060850152608081015151608085015260a081015160a085015260c081015160c08501520151910152565b6001600160401b038111611a8357601f01601f191660200190565b81601f82011215611b7357803590611c0b82611bd9565b92611c196040519485611b19565b82845260208383010111611b7357816000926020809301838601378301015290565b359061ffff82168203611b7357565b9190826060910312611b7357604051611c6281611ad0565b80928035908115158203611b73576040611c919181938552611c8660208201611c3b565b602086015201611c3b565b910152565b60405190611ca382611ad0565b81604060145460ff81161515835261ffff90818160081c16602085015260181c16910152565b91908201809211611cd657565b634e487b7160e01b600052601160045260246000fd5b6007811015611a175760ff8019600e5416911617600e55565b805115611d125760200190565b634e487b7160e01b600052603260045260246000fd5b805160011015611d125760400190565b91908203918211611cd657565b60405190611d5282611ab4565b81610100600091828152604051611d6881611a99565b8381526020820152826040820152826060820152604051611d8881611a99565b83815260808201528260a08201528260c08201528260e08201520152565b91611daf611d45565b50611dcd604060208401519301519261010085019384519184612863565b9152805115611de257611ddf916129cb565b90565b5090565b91909160005b8351811015611e2d5760208160051b85010151600780821015611a1757831015611a17578214611e27576000198114611cd657600101611dec565b50509050565b604051637a851da960e11b8152600490fd5b602081015115159081611e50575090565b60e0915001511590565b90816020910312611b7357518015158103611b735790565b51906001600160a01b0382168203611b7357565b9190826020910312611b7357604051611e9e81611a99565b91518252565b6020918282820312611b735781516001600160401b0392838211611b73570191610180938484840312611b735760405194850185811083821117611a835760405283518552611ef4818501611e72565b81860152611f058360408601611e86565b6040860152606084015160608601526080840151608086015260a084015160a0860152611f3460c08501611e72565b60c0860152611f4560e08501611e72565b60e08601526101009182850151908111611b7357840183601f82011215611b7357805190611f7282611bd9565b94611f806040519687611b19565b828652838383010111611b735782611f9b9386019101611b3a565b830152610120611fac818301611e72565b90830152610140611fbe818301611e72565b90830152611fd0610160809201611e72565b9082015290565b919290600783101580611a1757600384149283806122a8575b801561229a575b6120be575080611a1757600684149384156120af575b50831561208f575b50505061202e5760405163eee2192360e01b8152600490fd5b8060a061203f925191015190611cc9565b600b5461205890829033906001600160a01b0316612769565b5060405190815242602082015233907f974d269dfe471aa7c09788034bef284519056ae9769575104f22c0456456dd0960403092a3565b90919250611a1757816120a6575b50388080612015565b9050153861209d565b6004149350600090503861200d565b935050505081518061227b575b508051156122585760c0820151604051635e615a6b60e01b815290916000916001600160a01b03919083816004817f000000000000000000000000000000000000000000000000000000000000000087165afa90811561070357839161012091869161223e575b500151169061215b61215461ffff602081604086015116940151169242611cc9565b9142611cc9565b9261216b868483600c5416612769565b50600c5416823b156117ad5760405162f55c9960e61b81523360048201526001600160a01b03919091166024820152604481019190915260648101929092526084820193909352918190839060a490829084905af19081156122325750612223575b505b60a060c08201519101517f42c690944bb098e84e7a84f157acef3324928623259330b1ba03ec0495407bb46040518061221e339530954291846040919493926060820195825260208201520152565b0390a3565b61222c90611aeb565b386121cd565b604051903d90823e3d90fd5b61225291503d8088833e6106418183611b19565b38612132565b50600c5460c08201516122759133906001600160a01b0316612769565b506121cf565b600b54612293919033906001600160a01b0316612769565b50386120cb565b506000915060058514611ff7565b5082611ff0565b6122b7611d45565b506040516122c481611ab4565b60025481526040516122d581611a99565b60035481526020820152600454604082015260055460608201526040516122fb81611a99565b6006548152608082015260075460a082015260085460c082015260095460e0820152600a5461010082015290565b6040519061233682611a67565b8160e060009182815282602082015260405161235181611a99565b838152604082015282606082015260405161236b81611a99565b83815260808201528260a08201528260c08201520152565b61238b612329565b506001546040516316c1973960e01b81526001600160a01b0392831660048201529161010091829184916024918391165afa918215612461576000926123d057505090565b9091823d841161245a575b6123e58184611b19565b820192828403126101ad575060e0906124376040519361240485611a67565b825185526020830151602086015261241f8160408501611e86565b60408601526060830151606086015260808301611e86565b608084015260a081015160a084015260c081015160c0840152015160e082015290565b503d6123db565b6040513d6000823e3d90fd5b60006040805161247c81611ad0565b828152826020820152015260405161249381611ad0565b600f5481526010546020820152601154604082015290565b80516002556020810151516003556040810151600455606081015160055560808101515160065560a081015160075560c081015160085560e08101516009556101000151600a55565b6001546001600160a01b03908116803b15611b7357600092836101249261253660405197889687956360d6081360e11b87521660048601526024850190611b8c565b5af18015612461576125455750565b61254e90611aeb565b565b612558611d45565b5061256161246d565b61257e604060208301519201519161010092838501519142612863565b805161258957505090565b61259391926129cb565b80914291015290565b90611ddf928151906040602084015193015193612952565b6000546001600160a01b0316330361116a57565b1561100057565b6001600160a01b039081169190821561264257602460209260405194859384926370a0823160e01b84521660048301525afa9081612617575b5061261257600090565b600190565b602090813d811161263b575b61262d8183611b19565b81010312611b735738612608565b503d612623565b505050600090565b600060443d10611ddf57604051600319913d83016004833e81516001600160401b03918282113d6024840111176126a7578184019485519384116126af573d850101602084870101116126a75750611ddf92910160200190611b19565b949350505050565b50949350505050565b6040516370a0823160e01b81526001600160a01b0392831660048201529160209183916024918391165afa60009181612736575b50612731575050600060033d11612723575b6308c379a01461270d57600090565b61271561264a565b61271e57600090565b600090565b600481803e5160e01c6126fe565b101590565b90916020823d8211612761575b8161275060209383611b19565b810103126101ad57505190386126ec565b3d9150612743565b919091811580156127e9575b6127e15760446020926000604051958694859363a9059cbb60e01b855260018060a01b0380931660048601526024850152165af1908115612461576000916127c3575b501561172a57600190565b6127db915060203d8111611762576117548183611b19565b386127b8565b505050600190565b506001600160a01b03831615612775565b81810292918115918404141715611cd657565b600060405161281b81611a99565b52620f424090818102918183041490151715611cd6576040519061283e82611a99565b815290565b811561284d570490565b634e487b7160e01b600052601260045260246000fd5b92909192600060405161287581611a99565b52828110801561290d575b6128fb57826128a99383106128f3575b50818482116128eb575b6128a391611d38565b92611d38565b801580156128e3575b6128bf57611ddf91612917565b505060006040516128cf81611a99565b526040516128dc81611a99565b6000815290565b5081156128b2565b84915061289a565b915038612890565b5050505060006040516128cf81611a99565b5083821015612880565b90600060405161292681611a99565b52620f424091828102928184041490151715611cd65761294591612843565b6040519061283e82611a99565b92919092600781101580611a1757600682149081156129be575b81156129ae575b506129a6575082101561298857505050600090565b811015612996575050600190565b10156129a157600290565b600390565b935050505090565b9050611a17576005811438612973565b505060048114600061296c565b906129d4611d45565b5060608201908151151580612a81575b6129ed57505090565b620f42409081612a01826102c3875161280d565b510491612a1660c08601926102c3845161280d565b51049060408501612a28838251611cc9565b9052612a35828251611d38565b905281612a43575b50505090565b612a5e612a7493612a55848751611d38565b86525183612917565b612a6d60208601918251612aba565b9052612917565b6080820152388080612a3d565b50805115156129e4565b620f424091612aac916000604051612aa281611a99565b52519051906127fa565b046040519061283e82611a99565b90612945916000604051612acd81611a99565b5251905190611cc9565b9180158015612afc575b612af757611ddf92612af2916127fa565b612843565b505090565b508215612ae1565b909180158015612b42575b612b3c57612b21612b269284926127fa565b611cc9565b600019810191908211611cd657611ddf91612843565b50905090565b508115612b0f565b939291612b55612329565b50845190602086015195604091828201519760608301519660808401519160a085015195612bdd60e060c08801519701519c82519d8e9a612b958c611a67565b8b5260208b0194855260e0848c019b838d52606081019e8f526080810198895260a081019b8c5260c081019a8b52015260008351612bd281611a99565b528a51905190611d38565b93815194612bea86611a99565b855285612bff575b5050505050505050525290565b612c5996612c4f612c22612c1a612af2986102c3885161280d565b845190612aba565b60008551612c2f81611a99565b5251935193612c3d85611a99565b620f4240908181068652048251611cc9565b90525251906127fa565b90612c6f612c68838951611d38565b8251611cc9565b905285523880808080808080612bf256fea2646970667358221220277fc15100b2289922bbe442f5ceb58f5dab34ac58456072fc242238277db5cc64736f6c63430008140033",
  "deployedBytecode": "0x608080604052600436101561001357600080fd5b600090813560e01c90816302d05d3f146119e6575080630390547414610a295780630bcc8eba146118be5780630e5634df146117c35780630f574ba7146114cc57806316c197391461149a5780632ae4e931146114215780632e1a7d4d1461127157806334793e05146111935780637a7c04a614610a815780638a03764f14610a4f578063af5c3ac414610a29578063bdf4a94714610970578063c0ae398c146108ee578063cbf064151461082e578063d08452c2146107fb578063e427d08c146107d2578063e9a9e1441461070e578063f69e8fba146101b05763f7c843c8146100fd57600080fd5b346101ad5760203660031901126101ad57610116611b5d565b61011f81612383565b906101696101596101406101316122af565b61013961246d565b4291611da6565b936020850151906060860151429260c088015192612b4a565b9261016484846124f4565b6124ab565b60208251920151604051928352602083015260018060a01b0316907f366709aadaf43525a76cecc1264bd3e11f30bd3a30b5d42e7fcf2b1f81f818aa60403092a380f35b80fd5b50346101ad57806003193601126101ad576101c96125b4565b604051635e615a6b60e01b8082529091906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116918385600481865afa9485156107035784956106e7575b5060ff600e54169461027861023b61023261246d565b9788429161259c565b9661026960405161024b81611afe565b600181526020998a3681840137600361026383611d05565b52611de6565b42906102736122af565b611da6565b9361028c8560a06040820151910151111590565b1561068057906102d392916102c88560c08401511691604084015187600b54169060408a015190620f42409485916102c38461280d565b612a8b565b510497888092611d38565b948161066e575b50505082946012549283610459575b505050505060ff601354166000146104345760135461031e61ffff610313818460181c1642611cc9565b9260081c1642611cc9565b9185600b54169086610120818b54169201511691823b156104305760405162f55c9960e61b81526001600160a01b039182166004820152911660248201526044810192909252606482019290925260848101839052908690829060a490829084905af1801561042557610408575b509061016492916103eb95965b6005938651806103ee575b508854169286519160405193845283015260408201528260608201527f476ec185ebf8c5d4d3d9fe3a58370d6626d3438833a6689990b80962f25e571460803092a3611cec565b80f35b6104019082600c5416838c541690612769565b50386103a4565b906103eb9561041b610164959493611aeb565b955090919261038c565b6040513d88823e3d90fd5b8980fd5b5090816103eb9596610453859461016496600b5416868b541690612769565b50610399565b9091929395506104688461280d565b61047360095461280d565b908b60405161048181611a99565b5251908282029180830484149015171561065a576104a86104c993926104c0925190612843565b604051906104b582611a99565b81526102c38961280d565b51048096611d38565b9487600b5416928a89600c54169360046040518094819382525afa90811561064f578991610140918d9161062d575b5001511692604051608081018181106001600160401b03821117610619576040908152828252818e0185815281830185815260608085018a815293516302e2616d60e61b815294518e16600486015291518d16602485015251604484015290516064830152816084818f895af1801561060e57610593575b50839291610588959461058292612769565b50612769565b5038808080806102e9565b6060813d8211610606575b816105ab60609383611b19565b81010312610602579184610582928e60406105f3816105889b9a99988151946105d386611ad0565b6105dc82611e72565b86526105e9818301611e72565b9086015201611e72565b91015292505091929394610570565b8b80fd5b3d915061059e565b6040513d8e823e3d90fd5b634e487b7160e01b8d52604160045260248dfd5b61064991503d808f833e6106418183611b19565b810190611ea4565b386104f8565b6040513d8d823e3d90fd5b634e487b7160e01b8c52601160045260248cfd5b61067792612769565b503886816102da565b5050506103eb929361016491600491600482600c5416926106ac818a54169460e0890195865191612769565b508854169251916040519283528201527f2e83dafa2991dd7c20bc281659948e55f6f2eaa4cba2d06345f3109ec15fcaf960403092a3611cec565b6106fc9195503d8086833e6106418183611b19565b933861021c565b6040513d86823e3d90fd5b50346101ad57806003193601126101ad576107276125b4565b61076461074260ff600e541661073b61246d565b429161259c565b6040519061074f82611afe565b60018252602036818401378361026383611d05565b600c5481546009546001600160a01b0392610783928416908416612769565b50600660ff19600e541617600e558154166009546040519182526020820152600660408201527febb55ea32d517c9ec85f61357977ac73b84e65ebeaedb528ed791d7e25e30a2b60603092a280f35b50346101ad57806003193601126101ad576001546040516001600160a01b039091168152602090f35b50346101ad57806003193601126101ad57600b54600c54604080516001600160a01b039384168152919092166020820152f35b50346101ad57806003193601126101ad5761084833612383565b61085181611e3f565b156108dc576103eb906108d661088861087061086b6122af565b612550565b926020840151606085015160c0860151914293612b4a565b916101646108a560ff600e5416429061089f61246d565b9061259c565b6108cb6108bb8460a06040820151910151111590565b866108c4611c96565b9184611fd7565b4260e0860152611cec565b336124f4565b60405163673f032f60e11b8152600490fd5b50346101ad57806003193601126101ad5761012060025460405161091181611a99565b600354815260045460055460405161092881611a99565b6006548152600754906008549260095494600a54966040519889525160208901526040880152606087015251608086015260a085015260c084015260e0830152610100820152f35b50346101ad57806003193601126101ad5760e060405161098f81611a99565b6012548152610a276040516109a381611ad0565b60135460ff81161515825261ffff90818160081c16602084015260181c166040820152610a006109d1611c96565b916040519451855260208501906040908051151583528161ffff91826020820151166020860152015116910152565b805115156080840152602081015161ffff90811660a08501526040909101511660c0830152565bf35b50346101ad57806003193601126101ad57602060ff600e5416610a276040518092611a0a565b50346101ad57806003193601126101ad57600f5460105460115460408051938452602084019290925290820152606090f35b50346101ad5760031960403682011261117b576001600160401b036004351161117b5761024090600435360301126101ad57604051906101c082018281106001600160401b0382111761117f57604052600435600401358252610ae8602460043501611b78565b602083015260043560448101356040840152606481013560608401526084810135608084015260a481013560a084015260c401356001600160401b03811161117b57610b3b906004369181350101611bf4565b60c0830152610b4e60e460043501611b78565b60e0830152610b6261010460043501611b78565b610100830152610b783661012460043501611c4a565b610120830152610b8e3661018460043501611c4a565b610140830152602060043536036101e31901126101ad57604051610bb181611a99565b6101e460043501358152610160830152610204600435013561018083015261022460043501356001600160401b03811161117b57610bf6906004369181350101611bf4565b6101a08301526024356001600160a01b038116810361117b576001549060ff8260a01c1661116a577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316330361116a576020840151610c679033906001600160a01b03166125cf565b1561115857610c96610c8185516101608701515190611cc9565b602086015130906001600160a01b03166126b8565b156111465760e0840151610cb49033906001600160a01b03166125cf565b156111345761012084015180516110b5575b506101408401518051611012575b506101608401515180610fe9575b506001600160a01b039081166001600160a01b0319928316176001556101008401518354911691161781556040518190610d1b81611a99565b52604051610d2881611a99565b81815282519082604051610d3b81611a99565b52604051610d4881611a99565b83815260a085015191855193604051610d6081611ab4565b8181528260208201528660408201528660608201528360808201528460a08201528660c08201528560e082015261010042910152600255516003558360045583600555516006556007558160085560095542600a5560018060a01b0360e08301511660018060a01b0360208401511690604051604081018181106001600160401b03821117610fd557839160209160405283815201526bffffffffffffffffffffffff60a01b600b541617600b556bffffffffffffffffffffffff60a01b600c541617600c5560c08201519182604051610e3981611a99565b5282516001600160401b038111610fc157610e55600d54611a2d565b601f8111610f5e575b506020601f8211600114610edd57839482939492610ed2575b50508160011b916000199060031b1c191617600d555b60ff19600e5416600e556040810151906080606082015191015191610eb3604051611ad0565b600f556010556011556001805460ff60a01b1916600160a01b17905580f35b015190503880610e77565b600d84527fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb590601f198316855b818110610f4657509583600195969710610f2d575b505050811b01600d55610e8d565b015160001960f88460031b161c19169055388080610f1f565b9192602060018192868b015181550194019201610f0a565b600d84527fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb5601f830160051c81019160208410610fb7575b601f0160051c01905b818110610fac5750610e5e565b848155600101610f9f565b9091508190610f96565b634e487b7160e01b83526041600452602483fd5b634e487b7160e01b85526041600452602485fd5b845110611000576101608401515160125538610ce2565b60405163162908e360e11b8152600490fd5b6020015161ffff16156110a35761ffff6040610140860151015116156110915761014084015161ffff60208160408401511692015116111561109157610140840151805115159060145460ff64ffff000000604062ffff00602086015160081b1694015160181b1693169064ffffffffff191617171760145538610cd4565b604051632676310d60e11b8152600490fd5b604051632b39f6cb60e01b8152600490fd5b6020015161ffff16156110a35761ffff6040610120860151015116156110915761012084015161ffff60208160408401511692015116111561109157610120840151805115159060135460ff64ffff000000604062ffff00602086015160081b1694015160181b1693169064ffffffffff191617171760135538610cc6565b604051632181b39760e01b8152600490fd5b6040516357084d7360e11b8152600490fd5b6040516372146d6160e11b8152600490fd5b6040516282b42960e81b8152600490fd5b5080fd5b634e487b7160e01b82526041600452602482fd5b50346101ad57806003193601126101ad576111ac6122af565b6111da6111c36111ba61246d565b92834291611da6565b916111cd836124ab565b429060ff600e541661259c565b6111e381611cec565b61010082015191600782101561125d576020810151815160c08301519160ff60806040860151950151956040519788521660208701525160408601526060850152608084015260a08301525160c08201527f335a3e7f39aaebd3c219ca4ebda42ee6bb0cbd2b660d4d71a0dac6f7c03d710960e03092a280f35b634e487b7160e01b84526021600452602484fd5b50346101ad5760208060031936011261117b5760043590611291826125c8565b61129a33612383565b916112a483611e3f565b156108dc576113056112b461246d565b6102696112c860ff600e541683429161259c565b6113006040516112d781611ad0565b600281526040368983013760026112ed82611d05565b5260016112f982611d28565b5282611de6565b611cec565b8281015191611324606083019384519660c08501974292895192612b4a565b9182518211611408577ffabb9e7afa4ef595f60e1ae9041b2b311b4acb27aeaed4b11b6f2abf689af10a9392916113a96113bc92845183146000146113ef5761139d88860151985b86019861137a818b51611d38565b8a52611387858851611d38565b8752611394858c51611d38565b8b528751611d38565b865261016485336124f4565b600b5433906001600160a01b0316612769565b50519251935190516040805194855260208501959095529383015260608201929092523391309180608081015b0390a380f35b61139d6114028a518a8801519086612b04565b9861136c565b6040516318928cbf60e31b815260048101839052602490fd5b50346101ad57806003193601126101ad5761012061143d6122af565b604051908051825260208101515160208301526040810151604083015260608101516060830152608081015151608083015260a081015160a083015260c081015160c083015260e081015160e08301526101008091015190820152f35b50346101ad5760203660031901126101ad576101006114bf6114ba611b5d565b612383565b610a276040518092611b8c565b5060208060031936011261117b576004356114e6816125c8565b61152b6114fa60ff600e541661073b61246d565b61130060405161150981611ad0565b6002815260403687830137600161151f82611d05565b5260026112f982611d28565b600b546040516370a0823160e01b81523360048201526001600160a01b03909116908381602481855afa9081156117b8578591611787575b5082811061176957508284916064604051809481936323b872dd60e01b83523360048401523060248401528760448401525af190811561070357849161173c575b501561172a576115b333612383565b6115be61086b6122af565b9083810151156000146116b957508061160260c07f1913e17d5784005a914657f9e879fcc261644776365f1d84aeb45afcb6da486493015160608301519085612ad7565b93808201518660405161161481611a99565b526040519061162282611a99565b878252866040519361163385611a67565b878552840152604083015242606083015260808201528560a08201528560c08201528560e0820152905b61168d60c0820191611670868451611cc9565b83526101646060820194611685898751611cc9565b8652336124f4565b5190516040805194855260208501959095529383015260608201929092523391309180608081016113e9565b928161170860c07f1913e17d5784005a914657f9e879fcc261644776365f1d84aeb45afcb6da486494018051966116f7606085019889519089612ad7565b978585015190519042935192612b4a565b91611714858451611cc9565b83528201611723868251611cc9565b905261165d565b6040516307a4ced160e51b8152600490fd5b61175c9150833d8511611762575b6117548183611b19565b810190611e5a565b386115a4565b503d61174a565b82604491604051916381ddee1b60e01b835260048301526024820152fd5b90508381813d83116117b1575b61179e8183611b19565b810103126117ad575138611563565b8480fd5b503d611794565b6040513d87823e3d90fd5b50346101ad57806003193601126101ad576040518190600d54926117e684611a2d565b8083526020809581850193600191828116908160001461189e5750600114611845575b5050505061181b826040940383611b19565b6118378351948593818552519283809286015285850190611b3a565b601f01601f19168101030190f35b92919550600d83527fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb55b82841061188b5750505082019092019161181b84604084611809565b805486850188015292860192810161186f565b60ff1916865250505090151560051b830101925061181b84604084611809565b50346101ad57806003193601126101ad57604051635e615a6b60e01b81526001600160a01b039082816004817f000000000000000000000000000000000000000000000000000000000000000086165afa9081156119db57829160e09185916119c1575b50015116330361116a5761193d60ff600e541661073b61246d565b60405190608082018281106001600160401b03821117610fd5576040526003825260603660208401378361197083611d05565b52600161197c83611d28565b528151600210156119ad57906119989160026060830152611de6565b61078381600c54168284541660095491612769565b634e487b7160e01b84526032600452602484fd5b6119d591503d8087833e6106418183611b19565b38611922565b6040513d85823e3d90fd5b90503461117b578160031936011261117b5790546001600160a01b03168152602090f35b906007821015611a175752565b634e487b7160e01b600052602160045260246000fd5b90600182811c92168015611a5d575b6020831014611a4757565b634e487b7160e01b600052602260045260246000fd5b91607f1691611a3c565b61010081019081106001600160401b03821117611a8357604052565b634e487b7160e01b600052604160045260246000fd5b602081019081106001600160401b03821117611a8357604052565b61012081019081106001600160401b03821117611a8357604052565b606081019081106001600160401b03821117611a8357604052565b6001600160401b038111611a8357604052565b604081019081106001600160401b03821117611a8357604052565b90601f801991011681019081106001600160401b03821117611a8357604052565b60005b838110611b4d5750506000910152565b8181015183820152602001611b3d565b600435906001600160a01b0382168203611b7357565b600080fd5b35906001600160a01b0382168203611b7357565b60e080918051845260208101516020850152604081015151604085015260608101516060850152608081015151608085015260a081015160a085015260c081015160c08501520151910152565b6001600160401b038111611a8357601f01601f191660200190565b81601f82011215611b7357803590611c0b82611bd9565b92611c196040519485611b19565b82845260208383010111611b7357816000926020809301838601378301015290565b359061ffff82168203611b7357565b9190826060910312611b7357604051611c6281611ad0565b80928035908115158203611b73576040611c919181938552611c8660208201611c3b565b602086015201611c3b565b910152565b60405190611ca382611ad0565b81604060145460ff81161515835261ffff90818160081c16602085015260181c16910152565b91908201809211611cd657565b634e487b7160e01b600052601160045260246000fd5b6007811015611a175760ff8019600e5416911617600e55565b805115611d125760200190565b634e487b7160e01b600052603260045260246000fd5b805160011015611d125760400190565b91908203918211611cd657565b60405190611d5282611ab4565b81610100600091828152604051611d6881611a99565b8381526020820152826040820152826060820152604051611d8881611a99565b83815260808201528260a08201528260c08201528260e08201520152565b91611daf611d45565b50611dcd604060208401519301519261010085019384519184612863565b9152805115611de257611ddf916129cb565b90565b5090565b91909160005b8351811015611e2d5760208160051b85010151600780821015611a1757831015611a17578214611e27576000198114611cd657600101611dec565b50509050565b604051637a851da960e11b8152600490fd5b602081015115159081611e50575090565b60e0915001511590565b90816020910312611b7357518015158103611b735790565b51906001600160a01b0382168203611b7357565b9190826020910312611b7357604051611e9e81611a99565b91518252565b6020918282820312611b735781516001600160401b0392838211611b73570191610180938484840312611b735760405194850185811083821117611a835760405283518552611ef4818501611e72565b81860152611f058360408601611e86565b6040860152606084015160608601526080840151608086015260a084015160a0860152611f3460c08501611e72565b60c0860152611f4560e08501611e72565b60e08601526101009182850151908111611b7357840183601f82011215611b7357805190611f7282611bd9565b94611f806040519687611b19565b828652838383010111611b735782611f9b9386019101611b3a565b830152610120611fac818301611e72565b90830152610140611fbe818301611e72565b90830152611fd0610160809201611e72565b9082015290565b919290600783101580611a1757600384149283806122a8575b801561229a575b6120be575080611a1757600684149384156120af575b50831561208f575b50505061202e5760405163eee2192360e01b8152600490fd5b8060a061203f925191015190611cc9565b600b5461205890829033906001600160a01b0316612769565b5060405190815242602082015233907f974d269dfe471aa7c09788034bef284519056ae9769575104f22c0456456dd0960403092a3565b90919250611a1757816120a6575b50388080612015565b9050153861209d565b6004149350600090503861200d565b935050505081518061227b575b508051156122585760c0820151604051635e615a6b60e01b815290916000916001600160a01b03919083816004817f000000000000000000000000000000000000000000000000000000000000000087165afa90811561070357839161012091869161223e575b500151169061215b61215461ffff602081604086015116940151169242611cc9565b9142611cc9565b9261216b868483600c5416612769565b50600c5416823b156117ad5760405162f55c9960e61b81523360048201526001600160a01b03919091166024820152604481019190915260648101929092526084820193909352918190839060a490829084905af19081156122325750612223575b505b60a060c08201519101517f42c690944bb098e84e7a84f157acef3324928623259330b1ba03ec0495407bb46040518061221e339530954291846040919493926060820195825260208201520152565b0390a3565b61222c90611aeb565b386121cd565b604051903d90823e3d90fd5b61225291503d8088833e6106418183611b19565b38612132565b50600c5460c08201516122759133906001600160a01b0316612769565b506121cf565b600b54612293919033906001600160a01b0316612769565b50386120cb565b506000915060058514611ff7565b5082611ff0565b6122b7611d45565b506040516122c481611ab4565b60025481526040516122d581611a99565b60035481526020820152600454604082015260055460608201526040516122fb81611a99565b6006548152608082015260075460a082015260085460c082015260095460e0820152600a5461010082015290565b6040519061233682611a67565b8160e060009182815282602082015260405161235181611a99565b838152604082015282606082015260405161236b81611a99565b83815260808201528260a08201528260c08201520152565b61238b612329565b506001546040516316c1973960e01b81526001600160a01b0392831660048201529161010091829184916024918391165afa918215612461576000926123d057505090565b9091823d841161245a575b6123e58184611b19565b820192828403126101ad575060e0906124376040519361240485611a67565b825185526020830151602086015261241f8160408501611e86565b60408601526060830151606086015260808301611e86565b608084015260a081015160a084015260c081015160c0840152015160e082015290565b503d6123db565b6040513d6000823e3d90fd5b60006040805161247c81611ad0565b828152826020820152015260405161249381611ad0565b600f5481526010546020820152601154604082015290565b80516002556020810151516003556040810151600455606081015160055560808101515160065560a081015160075560c081015160085560e08101516009556101000151600a55565b6001546001600160a01b03908116803b15611b7357600092836101249261253660405197889687956360d6081360e11b87521660048601526024850190611b8c565b5af18015612461576125455750565b61254e90611aeb565b565b612558611d45565b5061256161246d565b61257e604060208301519201519161010092838501519142612863565b805161258957505090565b61259391926129cb565b80914291015290565b90611ddf928151906040602084015193015193612952565b6000546001600160a01b0316330361116a57565b1561100057565b6001600160a01b039081169190821561264257602460209260405194859384926370a0823160e01b84521660048301525afa9081612617575b5061261257600090565b600190565b602090813d811161263b575b61262d8183611b19565b81010312611b735738612608565b503d612623565b505050600090565b600060443d10611ddf57604051600319913d83016004833e81516001600160401b03918282113d6024840111176126a7578184019485519384116126af573d850101602084870101116126a75750611ddf92910160200190611b19565b949350505050565b50949350505050565b6040516370a0823160e01b81526001600160a01b0392831660048201529160209183916024918391165afa60009181612736575b50612731575050600060033d11612723575b6308c379a01461270d57600090565b61271561264a565b61271e57600090565b600090565b600481803e5160e01c6126fe565b101590565b90916020823d8211612761575b8161275060209383611b19565b810103126101ad57505190386126ec565b3d9150612743565b919091811580156127e9575b6127e15760446020926000604051958694859363a9059cbb60e01b855260018060a01b0380931660048601526024850152165af1908115612461576000916127c3575b501561172a57600190565b6127db915060203d8111611762576117548183611b19565b386127b8565b505050600190565b506001600160a01b03831615612775565b81810292918115918404141715611cd657565b600060405161281b81611a99565b52620f424090818102918183041490151715611cd6576040519061283e82611a99565b815290565b811561284d570490565b634e487b7160e01b600052601260045260246000fd5b92909192600060405161287581611a99565b52828110801561290d575b6128fb57826128a99383106128f3575b50818482116128eb575b6128a391611d38565b92611d38565b801580156128e3575b6128bf57611ddf91612917565b505060006040516128cf81611a99565b526040516128dc81611a99565b6000815290565b5081156128b2565b84915061289a565b915038612890565b5050505060006040516128cf81611a99565b5083821015612880565b90600060405161292681611a99565b52620f424091828102928184041490151715611cd65761294591612843565b6040519061283e82611a99565b92919092600781101580611a1757600682149081156129be575b81156129ae575b506129a6575082101561298857505050600090565b811015612996575050600190565b10156129a157600290565b600390565b935050505090565b9050611a17576005811438612973565b505060048114600061296c565b906129d4611d45565b5060608201908151151580612a81575b6129ed57505090565b620f42409081612a01826102c3875161280d565b510491612a1660c08601926102c3845161280d565b51049060408501612a28838251611cc9565b9052612a35828251611d38565b905281612a43575b50505090565b612a5e612a7493612a55848751611d38565b86525183612917565b612a6d60208601918251612aba565b9052612917565b6080820152388080612a3d565b50805115156129e4565b620f424091612aac916000604051612aa281611a99565b52519051906127fa565b046040519061283e82611a99565b90612945916000604051612acd81611a99565b5251905190611cc9565b9180158015612afc575b612af757611ddf92612af2916127fa565b612843565b505090565b508215612ae1565b909180158015612b42575b612b3c57612b21612b269284926127fa565b611cc9565b600019810191908211611cd657611ddf91612843565b50905090565b508115612b0f565b939291612b55612329565b50845190602086015195604091828201519760608301519660808401519160a085015195612bdd60e060c08801519701519c82519d8e9a612b958c611a67565b8b5260208b0194855260e0848c019b838d52606081019e8f526080810198895260a081019b8c5260c081019a8b52015260008351612bd281611a99565b528a51905190611d38565b93815194612bea86611a99565b855285612bff575b5050505050505050525290565b612c5996612c4f612c22612c1a612af2986102c3885161280d565b845190612aba565b60008551612c2f81611a99565b5251935193612c3d85611a99565b620f4240908181068652048251611cc9565b90525251906127fa565b90612c6f612c68838951611d38565b8251611cc9565b905285523880808080808080612bf256fea2646970667358221220277fc15100b2289922bbe442f5ceb58f5dab34ac58456072fc242238277db5cc64736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getStreamState()": {
        "details": "Get the current stream state",
        "returns": {
          "_0": "The current stream state"
        }
      },
      "getStreamStatus()": {
        "details": "Get the current stream status",
        "returns": {
          "_0": "The current stream status"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 107,
        "contract": "contracts/Stream.sol:Stream",
        "label": "creator",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 111,
        "contract": "contracts/Stream.sol:Stream",
        "label": "positionStorageAddress",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 113,
        "contract": "contracts/Stream.sol:Stream",
        "label": "initialized",
        "offset": 20,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 116,
        "contract": "contracts/Stream.sol:Stream",
        "label": "streamState",
        "offset": 0,
        "slot": "2",
        "type": "t_struct(StreamState)5831_storage"
      },
      {
        "astId": 119,
        "contract": "contracts/Stream.sol:Stream",
        "label": "streamTokens",
        "offset": 0,
        "slot": "11",
        "type": "t_struct(StreamTokens)5836_storage"
      },
      {
        "astId": 122,
        "contract": "contracts/Stream.sol:Stream",
        "label": "streamMetadata",
        "offset": 0,
        "slot": "13",
        "type": "t_struct(StreamMetadata)5810_storage"
      },
      {
        "astId": 125,
        "contract": "contracts/Stream.sol:Stream",
        "label": "streamStatus",
        "offset": 0,
        "slot": "14",
        "type": "t_enum(Status)5768"
      },
      {
        "astId": 128,
        "contract": "contracts/Stream.sol:Stream",
        "label": "streamTimes",
        "offset": 0,
        "slot": "15",
        "type": "t_struct(StreamTimes)5807_storage"
      },
      {
        "astId": 131,
        "contract": "contracts/Stream.sol:Stream",
        "label": "postStreamActions",
        "offset": 0,
        "slot": "18",
        "type": "t_struct(PostStreamActions)5856_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(Status)5768": {
        "encoding": "inplace",
        "label": "enum StreamTypes.Status",
        "numberOfBytes": "1"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Decimal)4510_storage": {
        "encoding": "inplace",
        "label": "struct Decimal",
        "members": [
          {
            "astId": 4509,
            "contract": "contracts/Stream.sol:Stream",
            "label": "value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(PoolInfo)5846_storage": {
        "encoding": "inplace",
        "label": "struct StreamTypes.PoolInfo",
        "members": [
          {
            "astId": 5845,
            "contract": "contracts/Stream.sol:Stream",
            "label": "poolOutSupplyAmount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(PostStreamActions)5856_storage": {
        "encoding": "inplace",
        "label": "struct StreamTypes.PostStreamActions",
        "members": [
          {
            "astId": 5849,
            "contract": "contracts/Stream.sol:Stream",
            "label": "poolInfo",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(PoolInfo)5846_storage"
          },
          {
            "astId": 5852,
            "contract": "contracts/Stream.sol:Stream",
            "label": "creatorVesting",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(VestingInfo)5843_storage"
          },
          {
            "astId": 5855,
            "contract": "contracts/Stream.sol:Stream",
            "label": "beneficiaryVesting",
            "offset": 0,
            "slot": "2",
            "type": "t_struct(VestingInfo)5843_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(StreamMetadata)5810_storage": {
        "encoding": "inplace",
        "label": "struct StreamTypes.StreamMetadata",
        "members": [
          {
            "astId": 5809,
            "contract": "contracts/Stream.sol:Stream",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(StreamState)5831_storage": {
        "encoding": "inplace",
        "label": "struct StreamTypes.StreamState",
        "members": [
          {
            "astId": 5812,
            "contract": "contracts/Stream.sol:Stream",
            "label": "outRemaining",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5815,
            "contract": "contracts/Stream.sol:Stream",
            "label": "distIndex",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(Decimal)4510_storage"
          },
          {
            "astId": 5817,
            "contract": "contracts/Stream.sol:Stream",
            "label": "spentIn",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 5819,
            "contract": "contracts/Stream.sol:Stream",
            "label": "shares",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 5822,
            "contract": "contracts/Stream.sol:Stream",
            "label": "currentStreamedPrice",
            "offset": 0,
            "slot": "4",
            "type": "t_struct(Decimal)4510_storage"
          },
          {
            "astId": 5824,
            "contract": "contracts/Stream.sol:Stream",
            "label": "threshold",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 5826,
            "contract": "contracts/Stream.sol:Stream",
            "label": "inSupply",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 5828,
            "contract": "contracts/Stream.sol:Stream",
            "label": "outSupply",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 5830,
            "contract": "contracts/Stream.sol:Stream",
            "label": "lastUpdated",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_struct(StreamTimes)5807_storage": {
        "encoding": "inplace",
        "label": "struct StreamTypes.StreamTimes",
        "members": [
          {
            "astId": 5802,
            "contract": "contracts/Stream.sol:Stream",
            "label": "bootstrappingStartTime",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5804,
            "contract": "contracts/Stream.sol:Stream",
            "label": "streamStartTime",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5806,
            "contract": "contracts/Stream.sol:Stream",
            "label": "streamEndTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(StreamTokens)5836_storage": {
        "encoding": "inplace",
        "label": "struct StreamTypes.StreamTokens",
        "members": [
          {
            "astId": 5833,
            "contract": "contracts/Stream.sol:Stream",
            "label": "inSupplyToken",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 5835,
            "contract": "contracts/Stream.sol:Stream",
            "label": "outSupplyToken",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(VestingInfo)5843_storage": {
        "encoding": "inplace",
        "label": "struct StreamTypes.VestingInfo",
        "members": [
          {
            "astId": 5838,
            "contract": "contracts/Stream.sol:Stream",
            "label": "isVestingEnabled",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 5840,
            "contract": "contracts/Stream.sol:Stream",
            "label": "vestingDuration",
            "offset": 1,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 5842,
            "contract": "contracts/Stream.sol:Stream",
            "label": "cliffDuration",
            "offset": 3,
            "slot": "0",
            "type": "t_uint16"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}