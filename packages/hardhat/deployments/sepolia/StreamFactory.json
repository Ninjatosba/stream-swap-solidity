{
  "address": "0x97A242974DcF3C32B3d89599AB67fe8765D383fE",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_protocolAdmin",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "BootstrappingDurationTooShort",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ContractFrozen",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC1167FailedCreateClone",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FeeTransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientNativeToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidBootstrappingStartTime",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidBootstrappingTime",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidExitFeeRatio",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidFeeCollector",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidImplementationAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidPoolWrapper",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidProtocolAdmin",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidStreamEndTime",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidStreamStartTime",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidToSVersion",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotAdmin",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StreamAddressPredictionFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StreamDurationTooShort",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StreamEndMustBeAfterStart",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StreamInputTokenNotAccepted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StreamStartMustBeAfterBootstrapping",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TokenTransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WaitingDurationTooShort",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroOutSupplyNotAllowed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "tokensAdded",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "tokensRemoved",
          "type": "address[]"
        }
      ],
      "name": "AcceptedTokensUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "streamAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "subscriber",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "refundedAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "exitTimestamp",
          "type": "uint256"
        }
      ],
      "name": "ExitRefunded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "streamAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "subscriber",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "purchased",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "spentIn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "exitTimestamp",
          "type": "uint256"
        }
      ],
      "name": "ExitStreamed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newFeeCollector",
          "type": "address"
        }
      ],
      "name": "FeeCollectorUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "streamAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "refundedOutAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum StreamTypes.Status",
          "name": "status",
          "type": "uint8"
        }
      ],
      "name": "FinalizedRefunded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "streamAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "creatorRevenue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "exitFeeAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "refundedOutAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum StreamTypes.Status",
          "name": "status",
          "type": "uint8"
        }
      ],
      "name": "FinalizedStreamed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "frozen",
          "type": "bool"
        }
      ],
      "name": "FrozenStateUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "streamCreationFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "exitFeeRatio",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minWaitingDuration",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minBootstrappingDuration",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minStreamDuration",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "tosVersion",
          "type": "string"
        }
      ],
      "name": "ParamsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "factoryAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "poolWrapper",
          "type": "address"
        }
      ],
      "name": "PoolWrapperUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "streamAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "subscriber",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "inBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "PositionSynced",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newProtocolAdmin",
          "type": "address"
        }
      ],
      "name": "ProtocolAdminUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "streamAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "outSupply",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum StreamTypes.Status",
          "name": "status",
          "type": "uint8"
        }
      ],
      "name": "StreamCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "streamOutToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "streamInToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "streamFactoryAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "streamOutAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bootstrappingStartTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "streamStartTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "streamEndTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "threshold",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "streamName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "tosVersion",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "streamAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "streamId",
          "type": "uint16"
        }
      ],
      "name": "StreamCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "streamAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum StreamTypes.Status",
          "name": "mainStatus",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lastUpdated",
          "type": "uint256"
        }
      ],
      "name": "StreamSynced",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "streamAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lastUpdated",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "newStatus",
          "type": "uint8"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct Decimal",
          "name": "distIndex",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "outRemaining",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "inSupply",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "spentIn",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct Decimal",
          "name": "currentStreamedPrice",
          "type": "tuple"
        }
      ],
      "name": "StreamSynced",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "streamAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "subscriber",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newShares",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalSharesAfter",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalInSupplyAfter",
          "type": "uint256"
        }
      ],
      "name": "Subscribed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "factoryAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "vestingContract",
          "type": "address"
        }
      ],
      "name": "VestingContractDeployed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "streamAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "subscriber",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "remainingInBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "remainingShares",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalInSupply",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalShares",
          "type": "uint256"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "NATIVE_TOKEN",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "acceptedInSupplyTokens",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "streamOutAmount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "outSupplyToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "bootstrappingStartTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "streamStartTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "streamEndTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "threshold",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "inSupplyToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "creator",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "bool",
                  "name": "isVestingEnabled",
                  "type": "bool"
                },
                {
                  "internalType": "uint32",
                  "name": "vestingDuration",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "cliffDuration",
                  "type": "uint32"
                }
              ],
              "internalType": "struct StreamTypes.VestingInfo",
              "name": "creatorVesting",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "bool",
                  "name": "isVestingEnabled",
                  "type": "bool"
                },
                {
                  "internalType": "uint32",
                  "name": "vestingDuration",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "cliffDuration",
                  "type": "uint32"
                }
              ],
              "internalType": "struct StreamTypes.VestingInfo",
              "name": "beneficiaryVesting",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "poolOutSupplyAmount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct StreamTypes.PoolInfo",
              "name": "poolInfo",
              "type": "tuple"
            },
            {
              "internalType": "bytes32",
              "name": "salt",
              "type": "bytes32"
            },
            {
              "internalType": "string",
              "name": "tosVersion",
              "type": "string"
            }
          ],
          "internalType": "struct StreamTypes.createStreamMessage",
          "name": "createStreamMessage",
          "type": "tuple"
        }
      ],
      "name": "createStream",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentStreamId",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "frozen",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAcceptedInSupplyTokens",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getParams",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "streamCreationFee",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "streamCreationFeeToken",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Decimal",
              "name": "exitFeeRatio",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "minWaitingDuration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minBootstrappingDuration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minStreamDuration",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "feeCollector",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "protocolAdmin",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "tosVersion",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "vestingAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "poolWrapperAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "streamImplementationAddress",
              "type": "address"
            }
          ],
          "internalType": "struct StreamFactoryTypes.Params",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_streamId",
          "type": "uint16"
        }
      ],
      "name": "getStream",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStreams",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "streamCreationFee",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "streamCreationFeeToken",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Decimal",
              "name": "exitFeeRatio",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "minWaitingDuration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minBootstrappingDuration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minStreamDuration",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "feeCollector",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "protocolAdmin",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "tosVersion",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "poolWrapperAddress",
              "type": "address"
            },
            {
              "internalType": "address[]",
              "name": "acceptedInSupplyTokens",
              "type": "address[]"
            },
            {
              "internalType": "address",
              "name": "streamImplementationAddress",
              "type": "address"
            }
          ],
          "internalType": "struct StreamFactoryTypes.initializeStreamMessage",
          "name": "initializeStreamMessage",
          "type": "tuple"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "isAcceptedInSupplyToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_streamAddress",
          "type": "address"
        }
      ],
      "name": "isStream",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "params",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "streamCreationFee",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "streamCreationFeeToken",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal",
          "name": "exitFeeRatio",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "minWaitingDuration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minBootstrappingDuration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minStreamDuration",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "feeCollector",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "protocolAdmin",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "tosVersion",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "vestingAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "poolWrapperAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "streamImplementationAddress",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal",
          "name": "_ratio",
          "type": "tuple"
        }
      ],
      "name": "setExitFeeRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_frozen",
          "type": "bool"
        }
      ],
      "name": "setFrozen",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_implementation",
          "type": "address"
        }
      ],
      "name": "setImplementation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "name": "setStreamCreationFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "setStreamCreationFeeToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "streamAddresses",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokens_to_add",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "tokens_to_remove",
          "type": "address[]"
        }
      ],
      "name": "updateAcceptedTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeCollector",
          "type": "address"
        }
      ],
      "name": "updateFeeCollector",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_streamCreationFee",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal",
          "name": "_exitFeeRatio",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "_minWaitingDuration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minBootstrappingDuration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minStreamDuration",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_tosVersion",
          "type": "string"
        }
      ],
      "name": "updateParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_poolWrapper",
          "type": "address"
        }
      ],
      "name": "updatePoolWrapper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_protocolAdmin",
          "type": "address"
        }
      ],
      "name": "updateProtocolAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x5dd9366bccf1f6588f261dc7190f5fdf6ff9a9e4085c7fec90f2c4c9a3d53bd7",
  "receipt": {
    "to": null,
    "from": "0xB4eE189569597EFDB3bB48DB5ede8394d1D48e7b",
    "contractAddress": "0x97A242974DcF3C32B3d89599AB67fe8765D383fE",
    "transactionIndex": 43,
    "gasUsed": "2632926",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xe8d4f4506d63e758041df991b8696f08b9c190f8def8d1519badfca54872f0ad",
    "transactionHash": "0x5dd9366bccf1f6588f261dc7190f5fdf6ff9a9e4085c7fec90f2c4c9a3d53bd7",
    "logs": [],
    "blockNumber": 8306924,
    "cumulativeGasUsed": "11343178",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xB4eE189569597EFDB3bB48DB5ede8394d1D48e7b"
  ],
  "numDeployments": 1,
  "solcInputHash": "e5de484e6cfdc3d76c97f9220d2257e8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_protocolAdmin\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"BootstrappingDurationTooShort\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ContractFrozen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC1167FailedCreateClone\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FeeTransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientNativeToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidBootstrappingStartTime\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidBootstrappingTime\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidExitFeeRatio\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidFeeCollector\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidImplementationAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPoolWrapper\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidProtocolAdmin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidStreamEndTime\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidStreamStartTime\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidToSVersion\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAdmin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StreamAddressPredictionFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StreamDurationTooShort\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StreamEndMustBeAfterStart\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StreamInputTokenNotAccepted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StreamStartMustBeAfterBootstrapping\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenTransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WaitingDurationTooShort\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroOutSupplyNotAllowed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokensAdded\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokensRemoved\",\"type\":\"address[]\"}],\"name\":\"AcceptedTokensUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"streamAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"subscriber\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"refundedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"exitTimestamp\",\"type\":\"uint256\"}],\"name\":\"ExitRefunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"streamAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"subscriber\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"purchased\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"spentIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"exitTimestamp\",\"type\":\"uint256\"}],\"name\":\"ExitStreamed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newFeeCollector\",\"type\":\"address\"}],\"name\":\"FeeCollectorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"streamAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"refundedOutAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum StreamTypes.Status\",\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"FinalizedRefunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"streamAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"creatorRevenue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"exitFeeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"refundedOutAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum StreamTypes.Status\",\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"FinalizedStreamed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenStateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"streamCreationFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"exitFeeRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minWaitingDuration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minBootstrappingDuration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minStreamDuration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"tosVersion\",\"type\":\"string\"}],\"name\":\"ParamsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"factoryAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"poolWrapper\",\"type\":\"address\"}],\"name\":\"PoolWrapperUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"streamAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"subscriber\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"PositionSynced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newProtocolAdmin\",\"type\":\"address\"}],\"name\":\"ProtocolAdminUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"streamAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"outSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum StreamTypes.Status\",\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"StreamCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"streamOutToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"streamInToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"streamFactoryAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"streamOutAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bootstrappingStartTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"streamStartTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"streamEndTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"streamName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"tosVersion\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"streamAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"streamId\",\"type\":\"uint16\"}],\"name\":\"StreamCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"streamAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum StreamTypes.Status\",\"name\":\"mainStatus\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastUpdated\",\"type\":\"uint256\"}],\"name\":\"StreamSynced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"streamAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastUpdated\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"newStatus\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct Decimal\",\"name\":\"distIndex\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"outRemaining\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"spentIn\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct Decimal\",\"name\":\"currentStreamedPrice\",\"type\":\"tuple\"}],\"name\":\"StreamSynced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"streamAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"subscriber\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newShares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalSharesAfter\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalInSupplyAfter\",\"type\":\"uint256\"}],\"name\":\"Subscribed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"factoryAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vestingContract\",\"type\":\"address\"}],\"name\":\"VestingContractDeployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"streamAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"subscriber\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remainingInBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remainingShares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalInSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalShares\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"NATIVE_TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"acceptedInSupplyTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"streamOutAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"outSupplyToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bootstrappingStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"streamStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"streamEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"inSupplyToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isVestingEnabled\",\"type\":\"bool\"},{\"internalType\":\"uint32\",\"name\":\"vestingDuration\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"cliffDuration\",\"type\":\"uint32\"}],\"internalType\":\"struct StreamTypes.VestingInfo\",\"name\":\"creatorVesting\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isVestingEnabled\",\"type\":\"bool\"},{\"internalType\":\"uint32\",\"name\":\"vestingDuration\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"cliffDuration\",\"type\":\"uint32\"}],\"internalType\":\"struct StreamTypes.VestingInfo\",\"name\":\"beneficiaryVesting\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"poolOutSupplyAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct StreamTypes.PoolInfo\",\"name\":\"poolInfo\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"tosVersion\",\"type\":\"string\"}],\"internalType\":\"struct StreamTypes.createStreamMessage\",\"name\":\"createStreamMessage\",\"type\":\"tuple\"}],\"name\":\"createStream\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentStreamId\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"frozen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAcceptedInSupplyTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getParams\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"streamCreationFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"streamCreationFeeToken\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal\",\"name\":\"exitFeeRatio\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"minWaitingDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBootstrappingDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minStreamDuration\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"feeCollector\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"protocolAdmin\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"tosVersion\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"vestingAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"poolWrapperAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"streamImplementationAddress\",\"type\":\"address\"}],\"internalType\":\"struct StreamFactoryTypes.Params\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_streamId\",\"type\":\"uint16\"}],\"name\":\"getStream\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStreams\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"streamCreationFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"streamCreationFeeToken\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal\",\"name\":\"exitFeeRatio\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"minWaitingDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBootstrappingDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minStreamDuration\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"feeCollector\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"protocolAdmin\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"tosVersion\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"poolWrapperAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"acceptedInSupplyTokens\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"streamImplementationAddress\",\"type\":\"address\"}],\"internalType\":\"struct StreamFactoryTypes.initializeStreamMessage\",\"name\":\"initializeStreamMessage\",\"type\":\"tuple\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"isAcceptedInSupplyToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_streamAddress\",\"type\":\"address\"}],\"name\":\"isStream\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"params\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"streamCreationFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"streamCreationFeeToken\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal\",\"name\":\"exitFeeRatio\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"minWaitingDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBootstrappingDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minStreamDuration\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"feeCollector\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"protocolAdmin\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"tosVersion\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"vestingAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"poolWrapperAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"streamImplementationAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal\",\"name\":\"_ratio\",\"type\":\"tuple\"}],\"name\":\"setExitFeeRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_frozen\",\"type\":\"bool\"}],\"name\":\"setFrozen\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_implementation\",\"type\":\"address\"}],\"name\":\"setImplementation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setStreamCreationFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setStreamCreationFeeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"streamAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens_to_add\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"tokens_to_remove\",\"type\":\"address[]\"}],\"name\":\"updateAcceptedTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeCollector\",\"type\":\"address\"}],\"name\":\"updateFeeCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_streamCreationFee\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal\",\"name\":\"_exitFeeRatio\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_minWaitingDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minBootstrappingDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minStreamDuration\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tosVersion\",\"type\":\"string\"}],\"name\":\"updateParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolWrapper\",\"type\":\"address\"}],\"name\":\"updatePoolWrapper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_protocolAdmin\",\"type\":\"address\"}],\"name\":\"updateProtocolAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ERC1167FailedCreateClone()\":[{\"details\":\"A clone instance deployment failed.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/StreamFactory.sol\":\"StreamFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/Clones.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n */\\nlibrary Clones {\\n    /**\\n     * @dev A clone instance deployment failed.\\n     */\\n    error ERC1167FailedCreateClone();\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create(0, 0x09, 0x37)\\n        }\\n        if (instance == address(0)) {\\n            revert ERC1167FailedCreateClone();\\n        }\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create2(0, 0x09, 0x37, salt)\\n        }\\n        if (instance == address(0)) {\\n            revert ERC1167FailedCreateClone();\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(add(ptr, 0x38), deployer)\\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\\n            mstore(add(ptr, 0x14), implementation)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\\n            mstore(add(ptr, 0x58), salt)\\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\\n            predicted := keccak256(add(ptr, 0x43), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt\\n    ) internal view returns (address predicted) {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xd18408af8a91bedb3d56343eeb9b30eb852e6dea93a5e2d5c6db9ca4cb905155\",\"license\":\"MIT\"},\"contracts/StreamFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\nimport \\\"./interfaces/IStreamEvents.sol\\\";\\nimport \\\"./interfaces/IStreamFactoryErrors.sol\\\";\\nimport \\\"./Vesting.sol\\\";\\nimport \\\"./types/StreamTypes.sol\\\";\\nimport \\\"./interfaces/IStream.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\nimport \\\"./types/StreamFactoryTypes.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\nimport \\\"./storage/PositionStorage.sol\\\";\\n\\ncontract StreamFactory is IStreamEvents, IStreamFactoryErrors {\\n    mapping(address => bool) public acceptedInSupplyTokens;\\n\\n    address public constant NATIVE_TOKEN = address(0);\\n\\n    uint16 public currentStreamId;\\n\\n    StreamFactoryTypes.Params public params;\\n    mapping(uint16 => address) public streamAddresses;\\n\\n    bool public frozen;\\n    bool public initialized;\\n\\n    constructor(address _protocolAdmin) {\\n        if (_protocolAdmin == address(0)) revert InvalidProtocolAdmin();\\n        params.protocolAdmin = _protocolAdmin;\\n    }\\n\\n    // Only once\\n    modifier onlyOnce() {\\n        require(!initialized, \\\"Already initialized\\\");\\n        _;\\n        initialized = true;\\n    }\\n\\n    function initialize(\\n        StreamFactoryTypes.initializeStreamMessage memory initializeStreamMessage\\n    ) external onlyAdmin onlyOnce {\\n        if (DecimalMath.gt(initializeStreamMessage.exitFeeRatio, DecimalMath.fromNumber(1)))\\n            revert InvalidExitFeeRatio();\\n\\n        // Deploy vesting contract\\n        Vesting vesting = new Vesting();\\n        emit VestingContractDeployed(address(this), address(vesting));\\n\\n        params.streamCreationFee = initializeStreamMessage.streamCreationFee;\\n        params.streamCreationFeeToken = initializeStreamMessage.streamCreationFeeToken;\\n        params.exitFeeRatio = initializeStreamMessage.exitFeeRatio;\\n        params.minWaitingDuration = initializeStreamMessage.minWaitingDuration;\\n        params.minBootstrappingDuration = initializeStreamMessage.minBootstrappingDuration;\\n        params.minStreamDuration = initializeStreamMessage.minStreamDuration;\\n        params.feeCollector = initializeStreamMessage.feeCollector;\\n        params.tosVersion = initializeStreamMessage.tosVersion;\\n        params.vestingAddress = address(vesting);\\n        params.poolWrapperAddress = initializeStreamMessage.poolWrapperAddress;\\n        params.streamImplementationAddress = initializeStreamMessage.streamImplementationAddress;\\n        // Set accepted tokens\\n        for (uint i = 0; i < initializeStreamMessage.acceptedInSupplyTokens.length; i++) {\\n            acceptedInSupplyTokens[initializeStreamMessage.acceptedInSupplyTokens[i]] = true;\\n        }\\n    }\\n\\n    modifier onlyAdmin() {\\n        if (msg.sender != params.protocolAdmin) revert NotAdmin();\\n        _;\\n    }\\n\\n    function updateParams(\\n        uint256 _streamCreationFee,\\n        Decimal memory _exitFeeRatio,\\n        uint256 _minWaitingDuration,\\n        uint256 _minBootstrappingDuration,\\n        uint256 _minStreamDuration,\\n        string memory _tosVersion\\n    ) external onlyAdmin {\\n        params.streamCreationFee = _streamCreationFee;\\n        params.exitFeeRatio = _exitFeeRatio;\\n        params.minWaitingDuration = _minWaitingDuration;\\n        params.minBootstrappingDuration = _minBootstrappingDuration;\\n        params.minStreamDuration = _minStreamDuration;\\n        params.tosVersion = _tosVersion;\\n\\n        emit ParamsUpdated(\\n            address(this),\\n            _streamCreationFee,\\n            _exitFeeRatio.value,\\n            _minWaitingDuration,\\n            _minBootstrappingDuration,\\n            _minStreamDuration,\\n            _tosVersion\\n        );\\n    }\\n\\n    function updateFeeCollector(address _feeCollector) external onlyAdmin {\\n        if (_feeCollector == address(0)) revert InvalidFeeCollector();\\n        params.feeCollector = _feeCollector;\\n        emit FeeCollectorUpdated(address(this), _feeCollector);\\n    }\\n\\n    function updateProtocolAdmin(address _protocolAdmin) external onlyAdmin {\\n        if (_protocolAdmin == address(0)) revert InvalidProtocolAdmin();\\n        params.protocolAdmin = _protocolAdmin;\\n        emit ProtocolAdminUpdated(address(this), _protocolAdmin);\\n    }\\n\\n    function updateAcceptedTokens(\\n        address[] calldata tokens_to_add,\\n        address[] calldata tokens_to_remove\\n    ) external onlyAdmin {\\n        for (uint i = 0; i < tokens_to_add.length; i++) {\\n            acceptedInSupplyTokens[tokens_to_add[i]] = true;\\n        }\\n        for (uint i = 0; i < tokens_to_remove.length; i++) {\\n            acceptedInSupplyTokens[tokens_to_remove[i]] = false;\\n        }\\n        emit AcceptedTokensUpdated(address(this), tokens_to_add, tokens_to_remove);\\n    }\\n\\n    function updatePoolWrapper(address _poolWrapper) external onlyAdmin {\\n        if (_poolWrapper == address(0)) revert InvalidPoolWrapper();\\n        params.poolWrapperAddress = _poolWrapper;\\n        emit PoolWrapperUpdated(address(this), _poolWrapper);\\n    }\\n\\n    function createStream(StreamTypes.createStreamMessage memory createStreamMessage) external payable {\\n        // Check if contract is accepting new streams (not frozen)\\n        if (frozen) revert ContractFrozen();\\n        // Validate input parameters\\n        if (createStreamMessage.streamOutAmount == 0) revert ZeroOutSupplyNotAllowed();\\n        if (!acceptedInSupplyTokens[createStreamMessage.inSupplyToken]) revert StreamInputTokenNotAccepted();\\n\\n        // Validate time parameters using validateStreamTimes\\n        validateStreamTimes(\\n            block.timestamp,\\n            createStreamMessage.bootstrappingStartTime,\\n            createStreamMessage.streamStartTime,\\n            createStreamMessage.streamEndTime\\n        );\\n\\n        // Validate TOS version\\n        if (\\n            keccak256(abi.encodePacked(createStreamMessage.tosVersion)) !=\\n            keccak256(abi.encodePacked(params.tosVersion))\\n        ) revert InvalidToSVersion();\\n\\n        // Load creation fee\\n        uint256 creationFee = params.streamCreationFee;\\n        if (creationFee > 0) {\\n            if (params.streamCreationFeeToken == address(0)) {\\n                // Native token\\n                if (msg.value < creationFee) revert InsufficientNativeToken();\\n                // Transfer fee to fee collector\\n                if (!payable(params.feeCollector).send(creationFee)) revert FeeTransferFailed();\\n            } else {\\n                // ERC20 token\\n                if (\\n                    !IERC20(params.streamCreationFeeToken).transferFrom(\\n                        msg.sender,\\n                        address(params.feeCollector),\\n                        creationFee\\n                    )\\n                ) revert TokenTransferFailed();\\n            }\\n        }\\n\\n        // Clone stream contract\\n        address clone = Clones.clone(params.streamImplementationAddress);\\n        IStream stream = IStream(clone);\\n\\n        // Deploy PositionStorage\\n        PositionStorage positionStorage = new PositionStorage(address(stream));\\n\\n        // Transfer tokens before initialization\\n        if (\\n            !IERC20(createStreamMessage.outSupplyToken).transferFrom(\\n                msg.sender,\\n                address(stream),\\n                createStreamMessage.streamOutAmount + createStreamMessage.poolInfo.poolOutSupplyAmount\\n            )\\n        ) revert TokenTransferFailed();\\n\\n        // Initialize the cloned stream\\n        stream.initialize(createStreamMessage, address(positionStorage));\\n\\n        // Store stream address\\n        streamAddresses[currentStreamId] = address(stream);\\n\\n        emit StreamCreated(\\n            createStreamMessage.outSupplyToken,\\n            createStreamMessage.inSupplyToken,\\n            address(this),\\n            createStreamMessage.streamOutAmount,\\n            createStreamMessage.bootstrappingStartTime,\\n            createStreamMessage.streamStartTime,\\n            createStreamMessage.streamEndTime,\\n            createStreamMessage.threshold,\\n            createStreamMessage.name,\\n            params.tosVersion,\\n            address(stream),\\n            currentStreamId\\n        );\\n        currentStreamId++;\\n    }\\n\\n    function getStreams() external view returns (address[] memory) {\\n        address[] memory streams = new address[](currentStreamId);\\n        for (uint16 i = 0; i < currentStreamId; i++) {\\n            streams[i] = streamAddresses[i];\\n        }\\n        return streams;\\n    }\\n\\n    function getStream(uint16 _streamId) external view returns (address) {\\n        return streamAddresses[_streamId];\\n    }\\n\\n    function isStream(address _streamAddress) external view returns (bool) {\\n        for (uint16 i = 0; i < currentStreamId; i++) {\\n            if (streamAddresses[i] == _streamAddress) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function getParams() external view returns (StreamFactoryTypes.Params memory) {\\n        return params;\\n    }\\n\\n    function isAcceptedInSupplyToken(address token) public view returns (bool) {\\n        return acceptedInSupplyTokens[token];\\n    }\\n\\n    function getAcceptedInSupplyTokens() external view returns (address[] memory) {\\n        address[] memory tokens = new address[](currentStreamId);\\n        for (uint16 i = 0; i < currentStreamId; i++) {\\n            if (acceptedInSupplyTokens[streamAddresses[i]]) {\\n                tokens[i] = streamAddresses[i];\\n            }\\n        }\\n        return tokens;\\n    }\\n\\n    function setFrozen(bool _frozen) external onlyAdmin {\\n        frozen = _frozen;\\n        emit FrozenStateUpdated(address(this), _frozen);\\n    }\\n\\n    function validateStreamTimes(\\n        uint256 nowTime,\\n        uint256 _bootstrappingStartTime,\\n        uint256 _startTime,\\n        uint256 _endTime\\n    ) internal view {\\n        if (nowTime > _bootstrappingStartTime) revert InvalidBootstrappingStartTime();\\n        if (_bootstrappingStartTime > _startTime) revert InvalidStreamStartTime();\\n        if (_startTime > _endTime) revert InvalidStreamEndTime();\\n        if (_endTime - _startTime < params.minStreamDuration) revert StreamDurationTooShort();\\n        if (_startTime - _bootstrappingStartTime < params.minBootstrappingDuration)\\n            revert BootstrappingDurationTooShort();\\n        if (_bootstrappingStartTime - nowTime < params.minWaitingDuration) revert WaitingDurationTooShort();\\n    }\\n\\n    function setImplementation(address _implementation) external onlyAdmin {\\n        if (_implementation == address(0)) revert InvalidImplementationAddress();\\n\\n        params.streamImplementationAddress = _implementation;\\n    }\\n\\n    function setStreamCreationFee(uint256 _fee) external onlyAdmin {\\n        params.streamCreationFee = _fee;\\n    }\\n\\n    function setStreamCreationFeeToken(address _token) external onlyAdmin {\\n        params.streamCreationFeeToken = _token;\\n    }\\n\\n    function setExitFeeRatio(Decimal memory _ratio) external onlyAdmin {\\n        if (DecimalMath.gt(_ratio, DecimalMath.fromNumber(1))) revert InvalidExitFeeRatio();\\n        params.exitFeeRatio = _ratio;\\n    }\\n}\\n\",\"keccak256\":\"0xdead07067b2e47559370dbcfc7ed6cc1cdc7335e9e2f29421ddcc38f93b61a9e\",\"license\":\"MIT\"},\"contracts/Vesting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"./interfaces/IERC20.sol\\\";\\n\\ncontract Vesting {\\n    struct VestingSchedule {\\n        uint256 cliffTime;\\n        uint256 endTime;\\n        uint256 totalAmount;\\n        uint256 releasedAmount;\\n    }\\n\\n    mapping(address => mapping(address => VestingSchedule[])) private tokenVestings;\\n\\n    event FundsStaked(\\n        address indexed beneficiary,\\n        address indexed token,\\n        uint256 totalAmount,\\n        uint256 cliffTime,\\n        uint256 endTime\\n    );\\n\\n    event FundsWithdrawn(address indexed beneficiary, address indexed token, uint256 scheduleIndex, uint256 amount);\\n\\n    function stakeFunds(\\n        address beneficiary,\\n        address tokenAddress,\\n        uint256 cliffTime,\\n        uint256 endTime,\\n        uint256 totalAmount\\n    ) external {\\n        require(cliffTime >= block.timestamp, \\\"Cliff time must be in the future\\\");\\n        require(endTime > cliffTime, \\\"End time must be after cliff time\\\");\\n        require(totalAmount > 0, \\\"Total amount must be greater than zero\\\");\\n\\n        require(IERC20(tokenAddress).transferFrom(msg.sender, address(this), totalAmount), \\\"Token transfer failed\\\");\\n\\n        VestingSchedule[] storage vestingSchedules = tokenVestings[beneficiary][tokenAddress];\\n        vestingSchedules.push(VestingSchedule(cliffTime, endTime, totalAmount, 0));\\n\\n        emit FundsStaked(beneficiary, tokenAddress, totalAmount, cliffTime, endTime);\\n    }\\n\\n    function withdrawFunds(address tokenAddress, uint256 scheduleIndex) external {\\n        VestingSchedule[] storage vestingSchedules = tokenVestings[msg.sender][tokenAddress];\\n        require(scheduleIndex < vestingSchedules.length, \\\"Invalid schedule index\\\");\\n\\n        VestingSchedule storage vestingSchedule = vestingSchedules[scheduleIndex];\\n        require(vestingSchedule.cliffTime <= block.timestamp, \\\"Funds are still in the cliff period\\\");\\n\\n        uint256 withdrawableAmount = calculateWithdrawableAmount(vestingSchedule);\\n        require(withdrawableAmount > 0, \\\"No funds available for withdrawal\\\");\\n\\n        vestingSchedule.releasedAmount += withdrawableAmount;\\n\\n        require(IERC20(tokenAddress).transfer(msg.sender, withdrawableAmount), \\\"Token transfer failed\\\");\\n\\n        emit FundsWithdrawn(msg.sender, tokenAddress, scheduleIndex, withdrawableAmount);\\n\\n        if (vestingSchedule.releasedAmount == vestingSchedule.totalAmount) {\\n            delete vestingSchedules[scheduleIndex];\\n        }\\n    }\\n\\n    function getStakesForBeneficiary(\\n        address beneficiary,\\n        address tokenAddress\\n    ) external view returns (VestingSchedule[] memory) {\\n        return tokenVestings[beneficiary][tokenAddress];\\n    }\\n\\n    function calculateWithdrawableAmount(VestingSchedule storage vestingSchedule) private view returns (uint256) {\\n        uint256 elapsedTime = block.timestamp - vestingSchedule.cliffTime;\\n\\n        if (elapsedTime >= vestingSchedule.endTime - vestingSchedule.cliffTime) {\\n            // Can now access all of the funds minus any that have already been claimed\\n            return vestingSchedule.totalAmount - vestingSchedule.releasedAmount;\\n        } else {\\n            // Calculate what proportion of funds is now available and only return that amount\\n\\n            // How long is the unlock period\\n            uint256 totalUnlockPeriod = vestingSchedule.endTime - vestingSchedule.cliffTime;\\n\\n            // How much should have been unlocked so far\\n            uint256 totalAmountAccessible = (vestingSchedule.totalAmount / totalUnlockPeriod) * elapsedTime;\\n\\n            // Amount available to withdraw is the currently unlocked amount minus anything\\n            // that has already been claimed to prevent repeat counting funds\\n            uint256 actualAccessible = totalAmountAccessible - vestingSchedule.releasedAmount;\\n\\n            return actualAccessible;\\n        }\\n    }\\n\\n    function getBlockTime() external view returns (uint256) {\\n        return block.timestamp;\\n    }\\n}\\n\",\"keccak256\":\"0x87bedfc5ad73e53cd4fe9877e7a7e5e9bf7fa8305ab9e01035f946cd93485f21\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\ninterface IERC20 {\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x5bc9a2a424370ebcf139f2ec42a84672249d81d0d0f20b6d6ce13f58ec5b4138\",\"license\":\"MIT\"},\"contracts/interfaces/IStream.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"../types/StreamTypes.sol\\\";\\nimport \\\"../types/PositionTypes.sol\\\";\\n\\ninterface IStream {\\n    function initialize(\\n        StreamTypes.createStreamMessage memory createStreamMessage,\\n        address positionStorageAddress\\n    ) external;\\n\\n    function withdraw(uint256 cap) external;\\n\\n    function subscribe(uint256 amountIn) external payable;\\n\\n    function exitStream() external;\\n\\n    function finalizeStream() external;\\n\\n    function syncStreamExternal() external;\\n\\n    function syncPosition(address user) external;\\n\\n    function cancelStream() external;\\n\\n    function cancelWithAdmin() external;\\n\\n    // View functions\\n    function getStreamStatus() external view returns (StreamTypes.Status);\\n\\n    function getStreamState() external view returns (StreamTypes.StreamState memory);\\n\\n    function getPosition(address user) external view returns (PositionTypes.Position memory);\\n\\n    // State variables getters (since they're public)\\n    function creator() external view returns (address);\\n\\n    function positionStorageAddress() external view returns (address);\\n\\n    function streamFactoryAddress() external view returns (address);\\n}\\n\",\"keccak256\":\"0x3fed2e45c7b7f34ad2f65e156416c7c0b2ad8cc71a9caa90d9b27b45d7a1ae03\",\"license\":\"MIT\"},\"contracts/interfaces/IStreamEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"../types/StreamTypes.sol\\\";\\nimport \\\"../lib/math/DecimalMath.sol\\\";\\n\\ninterface IStreamEvents {\\n    event StreamCreated(\\n        address indexed streamOutToken,\\n        address indexed streamInToken,\\n        address indexed streamFactoryAddress,\\n        uint256 streamOutAmount,\\n        uint256 bootstrappingStartTime,\\n        uint256 streamStartTime,\\n        uint256 streamEndTime,\\n        uint256 threshold,\\n        string streamName,\\n        string tosVersion,\\n        address streamAddress,\\n        uint16 streamId\\n    );\\n\\n    event StreamSynced(address indexed streamAddress, StreamTypes.Status mainStatus, uint256 lastUpdated);\\n\\n    event Subscribed(\\n        address indexed streamAddress,\\n        address indexed subscriber,\\n        uint256 amountIn,\\n        uint256 newShares,\\n        uint256 totalSharesAfter,\\n        uint256 totalInSupplyAfter\\n    );\\n\\n    event StreamSynced(\\n        address indexed streamAddress,\\n        uint256 lastUpdated,\\n        uint8 newStatus,\\n        Decimal distIndex,\\n        uint256 outRemaining,\\n        uint256 inSupply,\\n        uint256 spentIn,\\n        Decimal currentStreamedPrice\\n    );\\n\\n    event PositionSynced(address indexed streamAddress, address indexed subscriber, uint256 inBalance, uint256 shares);\\n\\n    event Withdrawn(\\n        address indexed streamAddress,\\n        address indexed subscriber,\\n        uint256 remainingInBalance,\\n        uint256 remainingShares,\\n        uint256 totalInSupply,\\n        uint256 totalShares\\n    );\\n\\n    event ExitRefunded(\\n        address indexed streamAddress,\\n        address indexed subscriber,\\n        uint256 refundedAmount,\\n        uint256 exitTimestamp\\n    );\\n    event ExitStreamed(\\n        address indexed streamAddress,\\n        address indexed subscriber,\\n        uint256 purchased,\\n        uint256 spentIn,\\n        uint256 exitTimestamp\\n    );\\n\\n    event FinalizedStreamed(\\n        address indexed streamAddress,\\n        address indexed creator,\\n        uint256 creatorRevenue,\\n        uint256 exitFeeAmount,\\n        uint256 refundedOutAmount,\\n        StreamTypes.Status status\\n    );\\n\\n    event FinalizedRefunded(\\n        address indexed streamAddress,\\n        address indexed creator,\\n        uint256 refundedOutAmount,\\n        StreamTypes.Status status\\n    );\\n\\n    event ParamsUpdated(\\n        address indexed factory,\\n        uint256 streamCreationFee,\\n        uint256 exitFeeRatio,\\n        uint256 minWaitingDuration,\\n        uint256 minBootstrappingDuration,\\n        uint256 minStreamDuration,\\n        string tosVersion\\n    );\\n\\n    event FeeCollectorUpdated(address indexed factory, address newFeeCollector);\\n\\n    event ProtocolAdminUpdated(address indexed factory, address newProtocolAdmin);\\n\\n    event FrozenStateUpdated(address indexed factory, bool frozen);\\n\\n    event AcceptedTokensUpdated(address indexed factory, address[] tokensAdded, address[] tokensRemoved);\\n\\n    event StreamCancelled(address indexed streamAddress, address creator, uint256 outSupply, StreamTypes.Status status);\\n\\n    event VestingContractDeployed(address indexed factoryAddress, address vestingContract);\\n\\n    event PoolWrapperUpdated(address indexed factoryAddress, address poolWrapper);\\n}\\n\",\"keccak256\":\"0xb680489a13467977417048e9b7ba0807c037f21c184d36ac5bd8b050900e7e82\",\"license\":\"MIT\"},\"contracts/interfaces/IStreamFactoryErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\n// StreamFactory errors\\ninterface IStreamFactoryErrors {\\n    // StreamFactory errors\\n    error InvalidBootstrappingStartTime();\\n    error InvalidStreamStartTime();\\n    error InvalidStreamEndTime();\\n    error StreamDurationTooShort();\\n    error BootstrappingDurationTooShort();\\n    error WaitingDurationTooShort();\\n    error ContractFrozen();\\n    error InvalidExitFeeRatio();\\n    error ZeroOutSupplyNotAllowed();\\n    error StreamInputTokenNotAccepted();\\n    error InvalidBootstrappingTime();\\n    error StreamStartMustBeAfterBootstrapping();\\n    error StreamEndMustBeAfterStart();\\n    error InvalidToSVersion();\\n    error InsufficientNativeToken();\\n    error FeeTransferFailed();\\n    error TokenTransferFailed();\\n    error StreamAddressPredictionFailed();\\n    error InvalidFeeCollector();\\n    error InvalidProtocolAdmin();\\n    error NotAdmin();\\n    error InvalidPoolWrapper();\\n    error InvalidImplementationAddress();\\n}\\n\",\"keccak256\":\"0x3e25ca293a17bc04c5567618f14e0ff791ef5866ca457aa95a0fc6cc63f45a9e\",\"license\":\"MIT\"},\"contracts/lib/math/DecimalMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\n/**\\n * @title Decimal type and math operations\\n * @dev Library for handling decimal math operations with fixed-point arithmetic\\n */\\n\\nstruct Decimal {\\n    uint256 value; // Value scaled by DECIMAL_PRECISION\\n}\\n\\n/**\\n * @title DecimalMath\\n * @dev Library for handling decimal math operations with fixed-point arithmetic\\n */\\nlibrary DecimalMath {\\n    // We'll use 6 decimal places for precision\\n    uint256 public constant DECIMAL_PRECISION = 1e6;\\n\\n    // Convert a regular number to a Decimal\\n    function fromNumber(uint256 value) internal pure returns (Decimal memory) {\\n        return Decimal({ value: value * DECIMAL_PRECISION });\\n    }\\n\\n    // Convert a Decimal to a regular number while keeping the remainder\\n    function toNumber(Decimal memory d) internal pure returns (uint256, Decimal memory) {\\n        return (d.value / DECIMAL_PRECISION, Decimal({ value: d.value % DECIMAL_PRECISION }));\\n    }\\n\\n    // Floor division for Decimal\\n    function floor(Decimal memory d) internal pure returns (uint256) {\\n        return d.value / DECIMAL_PRECISION;\\n    }\\n\\n    // Ceiling division for Decimal\\n    function ceil(Decimal memory d) internal pure returns (uint256) {\\n        return (d.value + DECIMAL_PRECISION - 1) / DECIMAL_PRECISION;\\n    }\\n\\n    // Multiply two Decimals\\n    function mul(Decimal memory a, Decimal memory b) internal pure returns (Decimal memory) {\\n        return Decimal({ value: (a.value * b.value) / DECIMAL_PRECISION });\\n    }\\n\\n    // Multiply Decimal by a scalar\\n    function mulScalar(Decimal memory a, uint256 scalar) internal pure returns (Decimal memory) {\\n        return Decimal({ value: a.value * scalar });\\n    }\\n\\n    // Divide two Decimals\\n    function div(Decimal memory a, Decimal memory b) internal pure returns (Decimal memory) {\\n        return Decimal({ value: (a.value * DECIMAL_PRECISION) / b.value });\\n    }\\n\\n    // Divide Decimal by a scalar\\n    function divScalar(Decimal memory a, uint256 scalar) internal pure returns (Decimal memory) {\\n        return Decimal({ value: a.value / scalar });\\n    }\\n\\n    // Add two Decimals\\n    function add(Decimal memory a, Decimal memory b) internal pure returns (Decimal memory) {\\n        return Decimal({ value: a.value + b.value });\\n    }\\n\\n    // Subtract two Decimals\\n    function sub(Decimal memory a, Decimal memory b) internal pure returns (Decimal memory) {\\n        return Decimal({ value: a.value - b.value });\\n    }\\n\\n    // From ratio to Decimal\\n    function fromRatio(uint256 num, uint256 denom) internal pure returns (Decimal memory) {\\n        return Decimal({ value: (num * DECIMAL_PRECISION) / denom });\\n    }\\n\\n    // > operator for Decimals\\n    function gt(Decimal memory a, Decimal memory b) internal pure returns (bool) {\\n        return a.value > b.value;\\n    }\\n\\n    // < operator for Decimals\\n    function lt(Decimal memory a, Decimal memory b) internal pure returns (bool) {\\n        return a.value < b.value;\\n    }\\n}\\n\",\"keccak256\":\"0x664491d1766944366e4a8ac0967b13fb7e5dbc8479fbd36b6472819d996c11d2\",\"license\":\"MIT\"},\"contracts/storage/PositionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"../types/PositionTypes.sol\\\";\\nimport \\\"../lib/math/DecimalMath.sol\\\";\\n\\ncontract PositionStorage {\\n    using PositionTypes for PositionTypes.Position;\\n\\n    mapping(address => PositionTypes.Position) private positions;\\n    address public immutable streamContractAddress;\\n\\n    constructor(address _streamContractAddress) {\\n        streamContractAddress = _streamContractAddress;\\n    }\\n\\n    function getPosition(address _owner) external view returns (PositionTypes.Position memory) {\\n        return positions[_owner];\\n    }\\n\\n    modifier onlyStreamContract() {\\n        require(msg.sender == streamContractAddress, \\\"Position can only be set by the stream contract\\\");\\n        _;\\n    }\\n\\n    function createPosition(\\n        address owner,\\n        uint256 inBalance,\\n        uint256 shares,\\n        Decimal memory index\\n    ) external onlyStreamContract {\\n        positions[owner] = PositionTypes.Position(\\n            inBalance,\\n            shares,\\n            index,\\n            block.timestamp,\\n            DecimalMath.fromNumber(0),\\n            0,\\n            0,\\n            0\\n        );\\n    }\\n\\n    function updatePosition(address owner, PositionTypes.Position memory position) external onlyStreamContract {\\n        positions[owner] = position;\\n    }\\n\\n    function setExitDate(address owner, uint256 exitDate) external onlyStreamContract {\\n        positions[owner].exitDate = exitDate;\\n    }\\n}\\n\",\"keccak256\":\"0xf90fa78dd55581fbcf46de01c6479df8b982ceea3d72908583821d9bd4ed2a90\",\"license\":\"MIT\"},\"contracts/types/PositionTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"../lib/math/DecimalMath.sol\\\";\\n\\nlibrary PositionTypes {\\n    struct Position {\\n        uint256 inBalance;\\n        uint256 shares;\\n        Decimal index;\\n        uint256 lastUpdateTime;\\n        Decimal pendingReward;\\n        uint256 spentIn;\\n        uint256 purchased;\\n        uint256 exitDate;\\n    }\\n}\\n\",\"keccak256\":\"0x20e3d610c16a5c3c4e245cb129662324aeb6e67e73f836d3325a45e6f52bbb2b\",\"license\":\"MIT\"},\"contracts/types/StreamFactoryTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"../lib/math/DecimalMath.sol\\\";\\n\\nlibrary StreamFactoryTypes {\\n    struct Params {\\n        uint256 streamCreationFee;\\n        address streamCreationFeeToken;\\n        Decimal exitFeeRatio;\\n        uint256 minWaitingDuration;\\n        uint256 minBootstrappingDuration;\\n        uint256 minStreamDuration;\\n        address feeCollector;\\n        address protocolAdmin;\\n        string tosVersion;\\n        address vestingAddress;\\n        address poolWrapperAddress;\\n        address streamImplementationAddress;\\n    }\\n\\n    struct initializeStreamMessage {\\n        uint256 streamCreationFee;\\n        address streamCreationFeeToken;\\n        Decimal exitFeeRatio;\\n        uint256 minWaitingDuration;\\n        uint256 minBootstrappingDuration;\\n        uint256 minStreamDuration;\\n        address feeCollector;\\n        address protocolAdmin;\\n        string tosVersion;\\n        address poolWrapperAddress;\\n        address[] acceptedInSupplyTokens;\\n        address streamImplementationAddress;\\n    }\\n}\\n\",\"keccak256\":\"0xf06c159f59328f62225ce42a6c8f973c95712a68ea54271f993091bbf2dabcf2\",\"license\":\"MIT\"},\"contracts/types/StreamTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"../lib/math/DecimalMath.sol\\\";\\n\\nlibrary StreamTypes {\\n    enum Status {\\n        Waiting,\\n        Bootstrapping,\\n        Active,\\n        Ended,\\n        FinalizedRefunded,\\n        FinalizedStreamed,\\n        Cancelled\\n    }\\n\\n    struct createStreamMessage {\\n        uint256 streamOutAmount;\\n        address outSupplyToken;\\n        uint256 bootstrappingStartTime;\\n        uint256 streamStartTime;\\n        uint256 streamEndTime;\\n        uint256 threshold;\\n        string name;\\n        address inSupplyToken;\\n        address creator;\\n        VestingInfo creatorVesting;\\n        VestingInfo beneficiaryVesting;\\n        PoolInfo poolInfo;\\n        bytes32 salt;\\n        string tosVersion;\\n    }\\n    struct StreamTimes {\\n        uint256 bootstrappingStartTime;\\n        uint256 streamStartTime;\\n        uint256 streamEndTime;\\n    }\\n\\n    struct StreamMetadata {\\n        string name;\\n    }\\n\\n    struct StreamState {\\n        uint256 outRemaining;\\n        Decimal distIndex;\\n        uint256 spentIn;\\n        uint256 shares;\\n        Decimal currentStreamedPrice;\\n        uint256 threshold;\\n        uint256 inSupply;\\n        uint256 outSupply;\\n        uint256 lastUpdated;\\n    }\\n\\n    struct StreamTokens {\\n        address inSupplyToken;\\n        address outSupplyToken;\\n    }\\n\\n    struct VestingInfo {\\n        bool isVestingEnabled;\\n        uint32 vestingDuration;\\n        uint32 cliffDuration;\\n    }\\n\\n    struct PoolInfo {\\n        uint256 poolOutSupplyAmount;\\n    }\\n\\n    struct PostStreamActions {\\n        PoolInfo poolInfo;\\n        VestingInfo creatorVesting;\\n        VestingInfo beneficiaryVesting;\\n    }\\n}\\n\",\"keccak256\":\"0x4a85d2b3638715ecb6757f4f851397bc1e6766b944ea3afd86d91fbb9b826270\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nlibrary console {\\n    address constant CONSOLE_ADDRESS =\\n        0x000000000000000000636F6e736F6c652e6c6f67;\\n\\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            pop(\\n                staticcall(\\n                    gas(),\\n                    consoleAddress,\\n                    add(payload, 32),\\n                    mload(payload),\\n                    0,\\n                    0\\n                )\\n            )\\n        }\\n    }\\n\\n    function _castToPure(\\n      function(bytes memory) internal view fnIn\\n    ) internal pure returns (function(bytes memory) pure fnOut) {\\n        assembly {\\n            fnOut := fnIn\\n        }\\n    }\\n\\n    function _sendLogPayload(bytes memory payload) internal pure {\\n        _castToPure(_sendLogPayloadImplementation)(payload);\\n    }\\n\\n    function log() internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n    }\\n\\n    function logInt(int256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n    }\\n\\n    function logUint(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function logString(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function logBool(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function logAddress(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n    }\\n\\n    function log(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function log(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function log(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function log(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function log(uint256 p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n}\\n\",\"keccak256\":\"0xf2560b5386574153057104d19a9e68a32ee912cf23c0c8df1fe9a0607f42d543\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60803461008c57601f612eda38819003918201601f19168301916001600160401b038311848410176100915780849260209460405283398101031261008c57516001600160a01b0381169081900361008c57801561007a57600980546001600160a01b031916919091179055604051612e3290816100a88239f35b604051632bf75bc360e21b8152600490fd5b600080fd5b634e487b7160e01b600052604160045260246000fdfe608080604052600436101561001357600080fd5b600090813560e01c908163054f7d9c14611a845750806314d98de514611a62578063158ef93e14611a3c5780631c2a28f71461142a5780632654eec11461155e57806331f7d9641461154257806333907d1e1461149557806342938459146114685780635a91b3b21461142a5780635e615a6b14611231578063774ef43b14610a8a5780637c526bb3146111005780637e932d3214611091578063a0f3a6a814610e5e578063b13b809b14610e18578063bfb7922414610dea578063c1d3be8b14610d60578063c40635f714610d01578063cff0ab9614610c35578063d04fed6314610bb3578063d2c35ce814610b28578063d784d42614610aca578063e899f3d714610a8a578063fd7917f7146109ed5763ff3fe85e1461013457600080fd5b6003196020368201126109ce576001600160401b03600435116109ce5761024090600435360301126109ea576040516101c081018181106001600160401b038211176109d657604052600435600401358152610194602460043501611ac0565b602082015260043560448101356040830152606481013560608301526084810135608083015260a481013560a083015260c401356001600160401b0381116109d2576101e7906004369181350101611b60565b60c08201526101fa60e460043501611ac0565b60e082015261020e61010460043501611ac0565b6101008201526102243661012460043501611d67565b61012082015261023a3661018460043501611d67565b610140820152610250366101e460043501611b42565b61016082015261020460043501356101808201526001600160401b036102246004350135116109ce5761028e36600480356102248101350101611b60565b6101a082015260ff600f54166109bc578051156109aa5760e08101516001600160a01b031682526020829052604082205460ff161561099857604081015160608201516080830151824211610986578183116109745780821161096257816102f591611f40565b60075411610950578161030791611f40565b6006541161093e5761031a904290611f40565b6005541161092c576101a0810151604051610352602082816103458183019687815193849201611c11565b8101038084520182611b21565b519020604051600a54818561036683611c89565b926001811690811561090e57506001146108c4575b61038e925003601f198101835282611b21565b60208151910120036108b257600254806107c3575b50600d54608881901c62ffffff16763d602d80600a3d3981f3363d3d373d3d3d363d7300000017835260781b6effffffffffffffffffffffffffffff19166e5af43d82803e903d91602b57fd5bf3176020526001600160a01b036037600984f01680156107b157604051806105f18101106001600160401b036105f18301111761079d576105f1620027ec82396105f181018281528190036020019084f080156107925760018060a01b03602084015116835161016085015151810180911161077e576040516323b872dd60e01b81523360048201526001600160a01b03851660248201526044810191909152906020908290606490829089905af1908115610773578591610744575b501561073257813b1561072e5783604051808093635b2f9f9d60e01b8252604060048301528651604483015260018060a01b03602088015116606483015260408701516084830152606087015160a4830152608087015160c483015260a087015160e48301526105de61053260c0890151610240610104860152610284850190611c34565b60e08901516001600160a01b039081166101248601526101008a0151166101448501526101208901518051151561016486015260208082015163ffffffff90811661018488015260409283015181166101a48801526101408c0151805115156101c48901529182015181166101e488015291015116610204850152610160890151516102248501526101808901516102448501526101a089015184820360431901610264860152611c34565b6001600160a01b039091166024830152038183865af18015610723576106f2575b506106e461ffff92839283600154168652600e60205260408620816001600160601b0360a01b82541617905560018060a01b0360208301511660018060a01b0360e084015116907fd82fd25f2c186bf678ec89d69b74509fb3d3043ede4957173642a7e407e2321984516106cc6106bf604088015197606081015190608081015160c060a0830151920151926001549e8f169b604051978852602088015260408701526060860152608085015261012060a0850152610120840190611c34565b82810360c0840152611cc3565b9460e0820152856101008201528030950390a4611e92565b169061ffff19161760015580f35b6001600160401b03819492941161070f57604052916106e46105ff565b634e487b7160e01b82526041600452602482fd5b6040513d86823e3d90fd5b8380fd5b60405163022e258160e11b8152600490fd5b610766915060203d60201161076c575b61075e8183611b21565b810190611e7a565b386104ad565b503d610754565b6040513d87823e3d90fd5b634e487b7160e01b86526011600452602486fd5b6040513d85823e3d90fd5b634e487b7160e01b84526041600452602484fd5b6040516330be1a3d60e21b8152600490fd5b6003546001600160a01b03168061083257508034106108205760085483918291829182916001600160a01b0316828215610817575bf115610805575b386103a3565b604051634033e4e360e01b8152600490fd5b506108fc6107f8565b6040516332201f6960e11b8152600490fd5b6008546040516323b872dd60e01b81523360048201526001600160a01b03909116602482015260448101929092526020908290606490829087905af1908115610792578391610893575b506107ff5760405163022e258160e11b8152600490fd5b6108ac915060203d60201161076c5761075e8183611b21565b3861087c565b604051635d0b6cc760e01b8152600490fd5b5050600a8552818560008051602062002ddd8339815191525b8382106108f4575050602061038e9282010161037b565b6020919250806001915483858801015201910183916108dd565b6020925061038e94915060ff1916828401528015150282010161037b565b604051635bdfbd0360e11b8152600490fd5b6040516372904fb160e01b8152600490fd5b6040516318861b4960e01b8152600490fd5b6040516349f8456b60e11b8152600490fd5b604051633060050d60e21b8152600490fd5b6040516341f01d5760e01b8152600490fd5b60405163cc3ca47b60e01b8152600490fd5b604051634d5bb2d560e11b8152600490fd5b604051634051e96160e01b8152600490fd5b5080fd5b8280fd5b634e487b7160e01b83526041600452602483fd5b80fd5b50346109ea5760203660031901126109ea57610a07611aa5565b6009546001600160a01b03919082163303610a7857168015610a6657806001600160601b0360a01b600c541617600c556040519081527f0e68834ff868f2c0042bd32422f7e8ce1ebbc6341974bb698c0f89a7a29f1f6a60203092a280f35b60405163405b556360e11b8152600490fd5b604051637bfa4b9f60e01b8152600490fd5b50346109ea5760203660031901126109ea5760043561ffff81168091036109ce57906020918152600e8252604060018060a01b0391205416604051908152f35b50346109ea5760203660031901126109ea57610ae4611aa5565b6009546001600160a01b03919082163303610a7857168015610b16576001600160601b0360a01b600d541617600d5580f35b60405163325c055b60e21b8152600490fd5b50346109ea5760203660031901126109ea57610b42611aa5565b6009546001600160a01b03919082163303610a7857168015610ba157806001600160601b0360a01b60085416176008556040519081527f5d16ad41baeb009cd23eb8f6c7cde5c2e0cd5acf4a33926ab488875c37c37f3860203092a280f35b60405163bb0bac9960e01b8152600490fd5b50346109ea57806003193601126109ea5761ffff906001908282541690610bd982611ea5565b9381845b610bf4575b60405180610bf08882611bcd565b0390f35b81811684811015610c2f579081610c29928552600e602052610c2360018060a01b036040872054169189611de8565b52611e92565b84610bdd565b50610be2565b50346109ea57806003193601126109ea576002546003546040516001600160a01b03918216929190610c6681611b06565b600454815260055491610cea600654600754836008541684600954169160405193610c9b85610c9481611cc3565b0386611b21565b86600b54169887600c541697600d5416986040519c8d9c8d5260208d01525160408c015260608b015260808a015260a089015260c088015260e087015261018080610100880152860190611c34565b926101208501526101408401526101608301520390f35b50346109ea5760203660031901126109ea57604051610d1f81611b06565b60043581526009546001600160a01b03163303610a7857610d3e611f4d565b8151905110610d4e575160045580f35b604051632aa4e67b60e01b8152600490fd5b50346109ea5760203660031901126109ea57610d7a611aa5565b600954906001600160a01b03908183163303610a785716908115610dd8576001600160a01b031916811760095560405190815230907f96c81c3f4599d5ad4b4ce465555174670819d69aa61f97cf8fdf4b80c1fbb32590602090a280f35b604051632bf75bc360e21b8152600490fd5b50346109ea5760203660031901126109ea576020610e0e610e09611aa5565b611ed7565b6040519015158152f35b50346109ea5760203660031901126109ea57610e32611aa5565b6009546001600160a01b03919082163303610a7857166001600160601b0360a01b600354161760035580f35b50346109ea5760c03660031901126109ea57602090600435366023190183136109ce5760405190610e8e82611b06565b60243582526044356064356084359160a435966001600160401b039788811161108d57610ebf903690600401611b60565b6009549096906001600160a01b03163303610a7857856002558051600455826005558360065584600755865198891161107957610efd600a54611c89565b601f8111611028575b5081601f8a11600114610f97579880899a7f0411b059ef29e41429d7aa233c3c43e82806856b23c24bfb1f9e4c6efa5689a1999a91610f8c575b508160011b916000199060031b1c191617600a555b519060405195865285015260408401526060830152608082015260c060a082015280610f86309460c0830190611c34565b0390a280f35b905089015138610f40565b600a895260008051602062002ddd83398151915290601f198b168a5b8181106110115750918b917f0411b059ef29e41429d7aa233c3c43e82806856b23c24bfb1f9e4c6efa5689a19a9b9c60019410610ff8575b5050811b01600a55610f55565b8b015160001960f88460031b161c191690553880610feb565b91928560018192868e015181550194019201610fb3565b600a895260008051602062002ddd833981519152601f8b0160051c810191848c1061106f575b601f0160051c01905b8181106110645750610f06565b898155600101611057565b909150819061104e565b634e487b7160e01b88526041600452602488fd5b8780fd5b50346109ea5760203660031901126109ea576004358015158091036109ce576009546001600160a01b03163303610a785760ff19600f541660ff821617600f556040519081527fc08a1a38ceb2f9f45e15007131834153026896150e4400ab4000fd1b131fb1db60203092a280f35b50346109ea5760403660031901126109ea576001600160401b03906004358281116109ce57611133903690600401611c59565b90926024359081116109d25761114d903690600401611c59565b60095490949192906001600160a01b039081163303610a7857845b8281106111fe5750845b8681106111c9575050610f867f640a0a596c3bc7f91bc26965ed05efb8d3017a25c7b1822ba2ca3e33b2743cd59394956111b9604051948594604086526040860191611e36565b9083820360208501523096611e36565b80826111e16111dc6111f9948b8a611e12565b611e22565b168752866020526040872060ff198154169055611dc3565b611172565b80826112116111dc61122c948789611e12565b1687528660205260408720600160ff19825416179055611dc3565b611168565b50346109ea57806003193601126109ea5761016060405161125181611ad4565b82815282602082015260405161126681611b06565b83815260408201528260608201528260808201528260a08201528260c08201528260e08201526060610100820152826101208201528261014082015201526040516112b081611ad4565b60025481526003546001600160a01b031660208201526040516112d281611b06565b60045481526040828101919091526005546060830152600654608083015260075460a08301526008546001600160a01b0390811660c08401526009541660e0830152516113298161132281611cc3565b0382611b21565b61010082015260018060a01b03600b541661012082015260018060a01b03600c541661014082015260018060a01b03600d54166101608201526040518091602082528051602083015260018060a01b036020820151166040830152604081015151606083015260608101516080830152608081015160a083015260a081015160c083015260018060a01b0360c08201511660e083015260018060a01b0360e0820151166101008301526101008101516113f161018091826101208601526101a0850190611c34565b6101208301516001600160a01b039081166101408681019190915284015181166101608087019190915290930151909216908301520390f35b50346109ea5760203660031901126109ea5760209060ff906040906001600160a01b03611455611aa5565b1681528084522054166040519015158152f35b50346109ea5760203660031901126109ea576009546001600160a01b03163303610a785760043560025580f35b50346109ea57806003193601126109ea5761ffff600181815416926114b984611ea5565b9281835b6114d0575b60405180610bf08782611bcd565b8181168681101561153c57808452600e60208181526040808720546001600160a01b039081168852878352908720546115179594939060ff1661151d575b50505050611e92565b836114bd565b61153292848952526040872054169188611de8565b523880808061150e565b506114c2565b50346109ea57806003193601126109ea57602090604051908152f35b50346109ea576003196020368201126109ce576001600160401b03600435116109ce5761018090600435360301126109ea5760405161159c81611ad4565b6004356004013581526115b3602460043501611ac0565b60208201526115c736604460043501611b42565b6040820152600435606481013560608301526084810135608083015260a481013560a08301526115f99060c401611ac0565b60c082015261160c60e460043501611ac0565b60e082015261010460043501356001600160401b0381116109d257611638906004369181350101611b60565b61010082015261164d61012460043501611ac0565b61012082015261014460043501356001600160401b0381116109d25736602382600435010112156109d2576116886004828135010135611bb6565b906116966040519283611b21565b6004803582019081013580845260208401913660059290921b0160240111611a38576024826004350101905b6004803584019081013560051b016024018210611a1c575050506101408201526116f161016460043501611ac0565b6101608201526009546001600160a01b03163303610a785760ff600f5460081c166119e1576040810151611723611f4d565b9051905110610d4e576040518061087a8101106001600160401b0361087a830111176109d65761087a62001f7282398061087a8101039083f080156119d65760018060a01b03166040518181527f739fe22b8edefd6ce1fe32460f9cd54bf8e66fc7447f4c8a8131ce078a1988af60203092a2815160025560018060a01b03602083015116906001600160601b0360a01b918260035416176003556040830151516004556060830151600555608083015160065560a083015160075560018060a01b0360c0840151168260085416176008556101008301518051906001600160401b0382116119c2578190611819600a54611c89565b601f8111611965575b50602090601f83116001146118f35787926118e8575b50508160011b916000199060031b1c191617600a555b81600b541617600b5560018060a01b036101208301511681600c541617600c5560018060a01b036101608301511690600d541617600d55815b61014082015180518210156118d557610140916118ce916001600160a01b03906118b2908390611de8565b511685528460205260408520600160ff19825416179055611dc3565b9050611887565b8361010061ff0019600f541617600f5580f35b015190503880611838565b600a885260008051602062002ddd8339815191529250601f198416885b81811061194d5750908460019594939210611934575b505050811b01600a5561184e565b015160001960f88460031b161c19169055388080611926565b92936020600181928786015181550195019301611910565b909150600a875260008051602062002ddd833981519152601f840160051c810191602085106119b8575b90601f859493920160051c01905b8181106119aa5750611822565b88815584935060010161199d565b909150819061198f565b634e487b7160e01b86526041600452602486fd5b6040513d84823e3d90fd5b60405162461bcd60e51b8152602060048201526013602482015272105b1c9958591e481a5b9a5d1a585b1a5e9959606a1b6044820152606490fd5b602080602492611a2b85611ac0565b81520192019190506116c2565b8480fd5b50346109ea57806003193601126109ea57602060ff600f5460081c166040519015158152f35b50346109ea57806003193601126109ea57602061ffff60015416604051908152f35b9050346109ce57816003193601126109ce5760209060ff600f541615158152f35b600435906001600160a01b0382168203611abb57565b600080fd5b35906001600160a01b0382168203611abb57565b61018081019081106001600160401b03821117611af057604052565b634e487b7160e01b600052604160045260246000fd5b602081019081106001600160401b03821117611af057604052565b90601f801991011681019081106001600160401b03821117611af057604052565b9190826020910312611abb57604051611b5a81611b06565b91358252565b81601f82011215611abb578035906001600160401b038211611af05760405192611b94601f8401601f191660200185611b21565b82845260208383010111611abb57816000926020809301838601378301015290565b6001600160401b038111611af05760051b60200190565b6020908160408183019282815285518094520193019160005b828110611bf4575050505090565b83516001600160a01b031685529381019392810192600101611be6565b60005b838110611c245750506000910152565b8181015183820152602001611c14565b90602091611c4d81518092818552858086019101611c11565b601f01601f1916010190565b9181601f84011215611abb578235916001600160401b038311611abb576020808501948460051b010111611abb57565b90600182811c92168015611cb9575b6020831014611ca357565b634e487b7160e01b600052602260045260246000fd5b91607f1691611c98565b600a5460009291611cd382611c89565b80825291600190818116908115611d395750600114611cf157505050565b91929350600a60005260008051602062002ddd833981519152916000925b848410611d2157505060209250010190565b80546020858501810191909152909301928101611d0f565b915050602093945060ff929192191683830152151560051b010190565b359063ffffffff82168203611abb57565b9190826060910312611abb57604051606081018181106001600160401b03821117611af05760405280928035908115158203611abb576040611dbe9181938552611db360208201611d56565b602086015201611d56565b910152565b6000198114611dd25760010190565b634e487b7160e01b600052601160045260246000fd5b8051821015611dfc5760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b9190811015611dfc5760051b0190565b356001600160a01b0381168103611abb5790565b91908082526020809201929160005b828110611e53575050505090565b909192938280600192838060a01b03611e6b89611ac0565b16815201950193929101611e45565b90816020910312611abb57518015158103611abb5790565b61ffff809116908114611dd25760010190565b90611eaf82611bb6565b611ebc6040519182611b21565b8281528092611ecd601f1991611bb6565b0190602036910137565b600061ffff916001838194825416915b611ef6575b5050505050600090565b8084169382851015611f3a578594600052600e60205260018060a01b03806040600020541690851614611f3257611f2c90611e92565b93611ee7565b505050505090565b50611eec565b91908203918211611dd257565b6000604051611f5b81611b06565b52604051611f6881611b06565b620f424081529056fe608080604052346100165761085e908161001c8239f35b600080fdfe60806040908082526004918236101561001757600080fd5b600091823560e01c90816325394c941461053a575080633d572640146102c857806387ceff09146102ae5763c10753291461005157600080fd5b346102aa57806003193601126102aa5761006961066c565b33835260208381528284206001600160a01b039092168085529181528284208054602494853594929392909185101561026f576100a6858561074d565b509283544210610222576100b9846107a2565b9283156101d657600385019384548181018091116101c4578555815163a9059cbb60e01b815233818d0152808a0182905283816044818e895af19081156101ba5791610134600297969594927f080a49aa43b33f2f3fe14496cbedde2305f0cc484e98afb78e943cf9881adc8a948e9161018d575b50610709565b8151938a85528401523392a3549101541461014d578380f35b906101579161074d565b93909361017d575050600382828094558260018201558260028201550155803880808380f35b634e487b7160e01b835282905281fd5b6101ad9150863d88116101b3575b6101a581836106cf565b8101906106f1565b3861012e565b503d61019b565b83513d8d823e3d90fd5b634e487b7160e01b8b5260118c52898bfd5b5162461bcd60e51b8152808a01919091526021818801527f4e6f2066756e647320617661696c61626c6520666f72207769746864726177616044820152601b60fa1b6064820152608490fd5b8860238860849386519362461bcd60e51b85528401528201527f46756e647320617265207374696c6c20696e2074686520636c696666207065726044820152621a5bd960ea1b6064820152fd5b815162461bcd60e51b815280890184905260168188015275092dcecc2d8d2c840e6c6d0cac8ead8ca40d2dcc8caf60531b6044820152606490fd5b5080fd5b50346102aa57816003193601126102aa5760209051428152f35b5082346105365760a0366003190112610536576102e361066c565b916102ec610687565b6084359160643591604435904282106104f357818411156104a65784156104545782516323b872dd60e01b81523387820152306024820152604481018690526001600160a01b03918216976020929183816064818e8e5af190811561044a579061035c918c9161042d5750610709565b1695868952888252838920888a528252838920845161037a8161069d565b8481528381018781528682019189835260608101938d85528054906801000000000000000082101561041a57906103b69160018201815561074d565b95909561040857505184555160018401555160028301555160039091015582519485528401528201527f1db04dfee373564c736f0f9c7f12ba28e6378cccea075c4c1754ecb4fd5c5ee090606090a380f35b634e487b7160e01b8e528d905260248dfd5b634e487b7160e01b8f526041875260248ffd5b6104449150853d87116101b3576101a581836106cf565b8c61012e565b86513d8d823e3d90fd5b825162461bcd60e51b8152602081880152602660248201527f546f74616c20616d6f756e74206d7573742062652067726561746572207468616044820152656e207a65726f60d01b6064820152608490fd5b825162461bcd60e51b8152602081880152602160248201527f456e642074696d65206d75737420626520616674657220636c6966662074696d6044820152606560f81b6064820152608490fd5b825162461bcd60e51b8152602081880181905260248201527f436c6966662074696d65206d75737420626520696e20746865206675747572656044820152606490fd5b8280fd5b838584923461053657836003193601126105365761055661066c565b61055e610687565b6001600160a01b039182168552602085815286862091909216855281528484208054909367ffffffffffffffff8211610659576105a483836005989695981b01846106cf565b8183528583018095855286852085915b848310610613575050505050845193808501918186525180925285850193925b8281106105e15785850386f35b8351805186528083015186840152878101518887015260609081015190860152608090940193928101926001016105d4565b83896001928c9b98999b516106278161069d565b8554815284860154838201528d60028701549082015260038601546060820152815201920192019190979594976105b4565b634e487b7160e01b865260419052602485fd5b600435906001600160a01b038216820361068257565b600080fd5b602435906001600160a01b038216820361068257565b6080810190811067ffffffffffffffff8211176106b957604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff8211176106b957604052565b90816020910312610682575180151581036106825790565b1561071057565b60405162461bcd60e51b8152602060048201526015602482015274151bdad95b881d1c985b9cd9995c8819985a5b1959605a1b6044820152606490fd5b80548210156107695760005260206000209060021b0190600090565b634e487b7160e01b600052603260045260246000fd5b9190820391821161078c57565b634e487b7160e01b600052601160045260246000fd5b80546107ae814261077f565b9060018301546107be828261077f565b83106107de5750505080600360026107db9301549101549061077f565b90565b906107e89161077f565b60028301548115610812570481810291818304149015171561078c5760036107db9201549061077f565b634e487b7160e01b600052601260045260246000fdfea264697066735822122022a39d12bf5474e9b8a09dd44b98f8d6075709795f355ea52b615c09cf8289cd64736f6c6343000814003360a03461007e57601f6105f138819003918201601f19168301916001600160401b038311848410176100835780849260209460405283398101031261007e57516001600160a01b038116810361007e57608052604051610557908161009a82396080518181816080015281816101690152818161020e01526102dc0152f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe604060808152600436101561001357600080fd5b60009060e08235811c90816316c197391461030b5781635cb0175c146102c7578163a3de7d17146101d6578163c1ac1026146100bf575063fb33ce811461005957600080fd5b346100bb57806003193601126100bb5761007161042f565b6001600160a01b03906100a7337f00000000000000000000000000000000000000000000000000000000000000008416146104bd565b168252816020526007602435918320015580f35b5080fd5b919050346101d2576101203660031901126101d2576100dc61042f565b6101003660231901126101ce576100f161044a565b9260243584526020840192604435845261010a366104a1565b93818601948552606086016084358152602060a3193601126101ca57600795610131610481565b9260a43584526080890193845260a089019460c435865260c08a019660e43588528a019761010435895260018060a01b0390610190827f00000000000000000000000000000000000000000000000000000000000000001633146104bd565b168b528a6020528a209851895551600189015551516002880155516003870155515160048601555160058501555160068401555191015580f35b8780fd5b8380fd5b8280fd5b9050346101d25760803660031901126101d2576007906101f461042f565b906101fe366104a1565b936001600160a01b0390610235337f00000000000000000000000000000000000000000000000000000000000000008416146104bd565b8661023e610481565b52610247610481565b9087825261025361044a565b966024358852602088016044358152828901918252606089019242845260808a0194855260a08a01958b875260c08b01978c89528b01988c8a52168b528a6020528a209851895551600189015551516002880155516003870155515160048601555160058501555160068401555191015580f35b5050346100bb57816003193601126100bb57517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b9050346101d25760203660031901126101d257816101009361032b61042f565b818461033561044a565b828152826020820152610346610481565b8381528682015282606082015261035b610481565b838152608082015260a0810183905260c0810183905201526001600160a01b031681526020819052209161038d61044a565b9280548452600181015491602085019283526103a7610481565b90600283015482528086019182526003830154606087019081526103c9610481565b91600485015483526080880192835260058501549360a08901948552600760068701549660c08b01978852015496888a01978852825199518a525160208a0152515190880152516060870152515160808601525160a08501525160c08401525190820152f35b600435906001600160a01b038216820361044557565b600080fd5b60405190610100820182811067ffffffffffffffff82111761046b57604052565b634e487b7160e01b600052604160045260246000fd5b604051906020820182811067ffffffffffffffff82111761046b57604052565b6020906063190112610445576104b5610481565b906064358252565b156104c457565b60405162461bcd60e51b815260206004820152602f60248201527f506f736974696f6e2063616e206f6e6c7920626520736574206279207468652060448201526e1cdd1c99585b4818dbdb9d1c9858dd608a1b6064820152608490fdfea2646970667358221220965ea0f51c0f9285864401dc126ae8b55d530ca76b5e788daaf086ee2fa46a7764736f6c63430008140033c65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a8a26469706673582212201431724237c49c8eb92eac4d0f532704fd63eb43f597860ef13c577608bcd9e064736f6c63430008140033",
  "deployedBytecode": "0x608080604052600436101561001357600080fd5b600090813560e01c908163054f7d9c14611a845750806314d98de514611a62578063158ef93e14611a3c5780631c2a28f71461142a5780632654eec11461155e57806331f7d9641461154257806333907d1e1461149557806342938459146114685780635a91b3b21461142a5780635e615a6b14611231578063774ef43b14610a8a5780637c526bb3146111005780637e932d3214611091578063a0f3a6a814610e5e578063b13b809b14610e18578063bfb7922414610dea578063c1d3be8b14610d60578063c40635f714610d01578063cff0ab9614610c35578063d04fed6314610bb3578063d2c35ce814610b28578063d784d42614610aca578063e899f3d714610a8a578063fd7917f7146109ed5763ff3fe85e1461013457600080fd5b6003196020368201126109ce576001600160401b03600435116109ce5761024090600435360301126109ea576040516101c081018181106001600160401b038211176109d657604052600435600401358152610194602460043501611ac0565b602082015260043560448101356040830152606481013560608301526084810135608083015260a481013560a083015260c401356001600160401b0381116109d2576101e7906004369181350101611b60565b60c08201526101fa60e460043501611ac0565b60e082015261020e61010460043501611ac0565b6101008201526102243661012460043501611d67565b61012082015261023a3661018460043501611d67565b610140820152610250366101e460043501611b42565b61016082015261020460043501356101808201526001600160401b036102246004350135116109ce5761028e36600480356102248101350101611b60565b6101a082015260ff600f54166109bc578051156109aa5760e08101516001600160a01b031682526020829052604082205460ff161561099857604081015160608201516080830151824211610986578183116109745780821161096257816102f591611f40565b60075411610950578161030791611f40565b6006541161093e5761031a904290611f40565b6005541161092c576101a0810151604051610352602082816103458183019687815193849201611c11565b8101038084520182611b21565b519020604051600a54818561036683611c89565b926001811690811561090e57506001146108c4575b61038e925003601f198101835282611b21565b60208151910120036108b257600254806107c3575b50600d54608881901c62ffffff16763d602d80600a3d3981f3363d3d373d3d3d363d7300000017835260781b6effffffffffffffffffffffffffffff19166e5af43d82803e903d91602b57fd5bf3176020526001600160a01b036037600984f01680156107b157604051806105f18101106001600160401b036105f18301111761079d576105f1620027ec82396105f181018281528190036020019084f080156107925760018060a01b03602084015116835161016085015151810180911161077e576040516323b872dd60e01b81523360048201526001600160a01b03851660248201526044810191909152906020908290606490829089905af1908115610773578591610744575b501561073257813b1561072e5783604051808093635b2f9f9d60e01b8252604060048301528651604483015260018060a01b03602088015116606483015260408701516084830152606087015160a4830152608087015160c483015260a087015160e48301526105de61053260c0890151610240610104860152610284850190611c34565b60e08901516001600160a01b039081166101248601526101008a0151166101448501526101208901518051151561016486015260208082015163ffffffff90811661018488015260409283015181166101a48801526101408c0151805115156101c48901529182015181166101e488015291015116610204850152610160890151516102248501526101808901516102448501526101a089015184820360431901610264860152611c34565b6001600160a01b039091166024830152038183865af18015610723576106f2575b506106e461ffff92839283600154168652600e60205260408620816001600160601b0360a01b82541617905560018060a01b0360208301511660018060a01b0360e084015116907fd82fd25f2c186bf678ec89d69b74509fb3d3043ede4957173642a7e407e2321984516106cc6106bf604088015197606081015190608081015160c060a0830151920151926001549e8f169b604051978852602088015260408701526060860152608085015261012060a0850152610120840190611c34565b82810360c0840152611cc3565b9460e0820152856101008201528030950390a4611e92565b169061ffff19161760015580f35b6001600160401b03819492941161070f57604052916106e46105ff565b634e487b7160e01b82526041600452602482fd5b6040513d86823e3d90fd5b8380fd5b60405163022e258160e11b8152600490fd5b610766915060203d60201161076c575b61075e8183611b21565b810190611e7a565b386104ad565b503d610754565b6040513d87823e3d90fd5b634e487b7160e01b86526011600452602486fd5b6040513d85823e3d90fd5b634e487b7160e01b84526041600452602484fd5b6040516330be1a3d60e21b8152600490fd5b6003546001600160a01b03168061083257508034106108205760085483918291829182916001600160a01b0316828215610817575bf115610805575b386103a3565b604051634033e4e360e01b8152600490fd5b506108fc6107f8565b6040516332201f6960e11b8152600490fd5b6008546040516323b872dd60e01b81523360048201526001600160a01b03909116602482015260448101929092526020908290606490829087905af1908115610792578391610893575b506107ff5760405163022e258160e11b8152600490fd5b6108ac915060203d60201161076c5761075e8183611b21565b3861087c565b604051635d0b6cc760e01b8152600490fd5b5050600a8552818560008051602062002ddd8339815191525b8382106108f4575050602061038e9282010161037b565b6020919250806001915483858801015201910183916108dd565b6020925061038e94915060ff1916828401528015150282010161037b565b604051635bdfbd0360e11b8152600490fd5b6040516372904fb160e01b8152600490fd5b6040516318861b4960e01b8152600490fd5b6040516349f8456b60e11b8152600490fd5b604051633060050d60e21b8152600490fd5b6040516341f01d5760e01b8152600490fd5b60405163cc3ca47b60e01b8152600490fd5b604051634d5bb2d560e11b8152600490fd5b604051634051e96160e01b8152600490fd5b5080fd5b8280fd5b634e487b7160e01b83526041600452602483fd5b80fd5b50346109ea5760203660031901126109ea57610a07611aa5565b6009546001600160a01b03919082163303610a7857168015610a6657806001600160601b0360a01b600c541617600c556040519081527f0e68834ff868f2c0042bd32422f7e8ce1ebbc6341974bb698c0f89a7a29f1f6a60203092a280f35b60405163405b556360e11b8152600490fd5b604051637bfa4b9f60e01b8152600490fd5b50346109ea5760203660031901126109ea5760043561ffff81168091036109ce57906020918152600e8252604060018060a01b0391205416604051908152f35b50346109ea5760203660031901126109ea57610ae4611aa5565b6009546001600160a01b03919082163303610a7857168015610b16576001600160601b0360a01b600d541617600d5580f35b60405163325c055b60e21b8152600490fd5b50346109ea5760203660031901126109ea57610b42611aa5565b6009546001600160a01b03919082163303610a7857168015610ba157806001600160601b0360a01b60085416176008556040519081527f5d16ad41baeb009cd23eb8f6c7cde5c2e0cd5acf4a33926ab488875c37c37f3860203092a280f35b60405163bb0bac9960e01b8152600490fd5b50346109ea57806003193601126109ea5761ffff906001908282541690610bd982611ea5565b9381845b610bf4575b60405180610bf08882611bcd565b0390f35b81811684811015610c2f579081610c29928552600e602052610c2360018060a01b036040872054169189611de8565b52611e92565b84610bdd565b50610be2565b50346109ea57806003193601126109ea576002546003546040516001600160a01b03918216929190610c6681611b06565b600454815260055491610cea600654600754836008541684600954169160405193610c9b85610c9481611cc3565b0386611b21565b86600b54169887600c541697600d5416986040519c8d9c8d5260208d01525160408c015260608b015260808a015260a089015260c088015260e087015261018080610100880152860190611c34565b926101208501526101408401526101608301520390f35b50346109ea5760203660031901126109ea57604051610d1f81611b06565b60043581526009546001600160a01b03163303610a7857610d3e611f4d565b8151905110610d4e575160045580f35b604051632aa4e67b60e01b8152600490fd5b50346109ea5760203660031901126109ea57610d7a611aa5565b600954906001600160a01b03908183163303610a785716908115610dd8576001600160a01b031916811760095560405190815230907f96c81c3f4599d5ad4b4ce465555174670819d69aa61f97cf8fdf4b80c1fbb32590602090a280f35b604051632bf75bc360e21b8152600490fd5b50346109ea5760203660031901126109ea576020610e0e610e09611aa5565b611ed7565b6040519015158152f35b50346109ea5760203660031901126109ea57610e32611aa5565b6009546001600160a01b03919082163303610a7857166001600160601b0360a01b600354161760035580f35b50346109ea5760c03660031901126109ea57602090600435366023190183136109ce5760405190610e8e82611b06565b60243582526044356064356084359160a435966001600160401b039788811161108d57610ebf903690600401611b60565b6009549096906001600160a01b03163303610a7857856002558051600455826005558360065584600755865198891161107957610efd600a54611c89565b601f8111611028575b5081601f8a11600114610f97579880899a7f0411b059ef29e41429d7aa233c3c43e82806856b23c24bfb1f9e4c6efa5689a1999a91610f8c575b508160011b916000199060031b1c191617600a555b519060405195865285015260408401526060830152608082015260c060a082015280610f86309460c0830190611c34565b0390a280f35b905089015138610f40565b600a895260008051602062002ddd83398151915290601f198b168a5b8181106110115750918b917f0411b059ef29e41429d7aa233c3c43e82806856b23c24bfb1f9e4c6efa5689a19a9b9c60019410610ff8575b5050811b01600a55610f55565b8b015160001960f88460031b161c191690553880610feb565b91928560018192868e015181550194019201610fb3565b600a895260008051602062002ddd833981519152601f8b0160051c810191848c1061106f575b601f0160051c01905b8181106110645750610f06565b898155600101611057565b909150819061104e565b634e487b7160e01b88526041600452602488fd5b8780fd5b50346109ea5760203660031901126109ea576004358015158091036109ce576009546001600160a01b03163303610a785760ff19600f541660ff821617600f556040519081527fc08a1a38ceb2f9f45e15007131834153026896150e4400ab4000fd1b131fb1db60203092a280f35b50346109ea5760403660031901126109ea576001600160401b03906004358281116109ce57611133903690600401611c59565b90926024359081116109d25761114d903690600401611c59565b60095490949192906001600160a01b039081163303610a7857845b8281106111fe5750845b8681106111c9575050610f867f640a0a596c3bc7f91bc26965ed05efb8d3017a25c7b1822ba2ca3e33b2743cd59394956111b9604051948594604086526040860191611e36565b9083820360208501523096611e36565b80826111e16111dc6111f9948b8a611e12565b611e22565b168752866020526040872060ff198154169055611dc3565b611172565b80826112116111dc61122c948789611e12565b1687528660205260408720600160ff19825416179055611dc3565b611168565b50346109ea57806003193601126109ea5761016060405161125181611ad4565b82815282602082015260405161126681611b06565b83815260408201528260608201528260808201528260a08201528260c08201528260e08201526060610100820152826101208201528261014082015201526040516112b081611ad4565b60025481526003546001600160a01b031660208201526040516112d281611b06565b60045481526040828101919091526005546060830152600654608083015260075460a08301526008546001600160a01b0390811660c08401526009541660e0830152516113298161132281611cc3565b0382611b21565b61010082015260018060a01b03600b541661012082015260018060a01b03600c541661014082015260018060a01b03600d54166101608201526040518091602082528051602083015260018060a01b036020820151166040830152604081015151606083015260608101516080830152608081015160a083015260a081015160c083015260018060a01b0360c08201511660e083015260018060a01b0360e0820151166101008301526101008101516113f161018091826101208601526101a0850190611c34565b6101208301516001600160a01b039081166101408681019190915284015181166101608087019190915290930151909216908301520390f35b50346109ea5760203660031901126109ea5760209060ff906040906001600160a01b03611455611aa5565b1681528084522054166040519015158152f35b50346109ea5760203660031901126109ea576009546001600160a01b03163303610a785760043560025580f35b50346109ea57806003193601126109ea5761ffff600181815416926114b984611ea5565b9281835b6114d0575b60405180610bf08782611bcd565b8181168681101561153c57808452600e60208181526040808720546001600160a01b039081168852878352908720546115179594939060ff1661151d575b50505050611e92565b836114bd565b61153292848952526040872054169188611de8565b523880808061150e565b506114c2565b50346109ea57806003193601126109ea57602090604051908152f35b50346109ea576003196020368201126109ce576001600160401b03600435116109ce5761018090600435360301126109ea5760405161159c81611ad4565b6004356004013581526115b3602460043501611ac0565b60208201526115c736604460043501611b42565b6040820152600435606481013560608301526084810135608083015260a481013560a08301526115f99060c401611ac0565b60c082015261160c60e460043501611ac0565b60e082015261010460043501356001600160401b0381116109d257611638906004369181350101611b60565b61010082015261164d61012460043501611ac0565b61012082015261014460043501356001600160401b0381116109d25736602382600435010112156109d2576116886004828135010135611bb6565b906116966040519283611b21565b6004803582019081013580845260208401913660059290921b0160240111611a38576024826004350101905b6004803584019081013560051b016024018210611a1c575050506101408201526116f161016460043501611ac0565b6101608201526009546001600160a01b03163303610a785760ff600f5460081c166119e1576040810151611723611f4d565b9051905110610d4e576040518061087a8101106001600160401b0361087a830111176109d65761087a62001f7282398061087a8101039083f080156119d65760018060a01b03166040518181527f739fe22b8edefd6ce1fe32460f9cd54bf8e66fc7447f4c8a8131ce078a1988af60203092a2815160025560018060a01b03602083015116906001600160601b0360a01b918260035416176003556040830151516004556060830151600555608083015160065560a083015160075560018060a01b0360c0840151168260085416176008556101008301518051906001600160401b0382116119c2578190611819600a54611c89565b601f8111611965575b50602090601f83116001146118f35787926118e8575b50508160011b916000199060031b1c191617600a555b81600b541617600b5560018060a01b036101208301511681600c541617600c5560018060a01b036101608301511690600d541617600d55815b61014082015180518210156118d557610140916118ce916001600160a01b03906118b2908390611de8565b511685528460205260408520600160ff19825416179055611dc3565b9050611887565b8361010061ff0019600f541617600f5580f35b015190503880611838565b600a885260008051602062002ddd8339815191529250601f198416885b81811061194d5750908460019594939210611934575b505050811b01600a5561184e565b015160001960f88460031b161c19169055388080611926565b92936020600181928786015181550195019301611910565b909150600a875260008051602062002ddd833981519152601f840160051c810191602085106119b8575b90601f859493920160051c01905b8181106119aa5750611822565b88815584935060010161199d565b909150819061198f565b634e487b7160e01b86526041600452602486fd5b6040513d84823e3d90fd5b60405162461bcd60e51b8152602060048201526013602482015272105b1c9958591e481a5b9a5d1a585b1a5e9959606a1b6044820152606490fd5b602080602492611a2b85611ac0565b81520192019190506116c2565b8480fd5b50346109ea57806003193601126109ea57602060ff600f5460081c166040519015158152f35b50346109ea57806003193601126109ea57602061ffff60015416604051908152f35b9050346109ce57816003193601126109ce5760209060ff600f541615158152f35b600435906001600160a01b0382168203611abb57565b600080fd5b35906001600160a01b0382168203611abb57565b61018081019081106001600160401b03821117611af057604052565b634e487b7160e01b600052604160045260246000fd5b602081019081106001600160401b03821117611af057604052565b90601f801991011681019081106001600160401b03821117611af057604052565b9190826020910312611abb57604051611b5a81611b06565b91358252565b81601f82011215611abb578035906001600160401b038211611af05760405192611b94601f8401601f191660200185611b21565b82845260208383010111611abb57816000926020809301838601378301015290565b6001600160401b038111611af05760051b60200190565b6020908160408183019282815285518094520193019160005b828110611bf4575050505090565b83516001600160a01b031685529381019392810192600101611be6565b60005b838110611c245750506000910152565b8181015183820152602001611c14565b90602091611c4d81518092818552858086019101611c11565b601f01601f1916010190565b9181601f84011215611abb578235916001600160401b038311611abb576020808501948460051b010111611abb57565b90600182811c92168015611cb9575b6020831014611ca357565b634e487b7160e01b600052602260045260246000fd5b91607f1691611c98565b600a5460009291611cd382611c89565b80825291600190818116908115611d395750600114611cf157505050565b91929350600a60005260008051602062002ddd833981519152916000925b848410611d2157505060209250010190565b80546020858501810191909152909301928101611d0f565b915050602093945060ff929192191683830152151560051b010190565b359063ffffffff82168203611abb57565b9190826060910312611abb57604051606081018181106001600160401b03821117611af05760405280928035908115158203611abb576040611dbe9181938552611db360208201611d56565b602086015201611d56565b910152565b6000198114611dd25760010190565b634e487b7160e01b600052601160045260246000fd5b8051821015611dfc5760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b9190811015611dfc5760051b0190565b356001600160a01b0381168103611abb5790565b91908082526020809201929160005b828110611e53575050505090565b909192938280600192838060a01b03611e6b89611ac0565b16815201950193929101611e45565b90816020910312611abb57518015158103611abb5790565b61ffff809116908114611dd25760010190565b90611eaf82611bb6565b611ebc6040519182611b21565b8281528092611ecd601f1991611bb6565b0190602036910137565b600061ffff916001838194825416915b611ef6575b5050505050600090565b8084169382851015611f3a578594600052600e60205260018060a01b03806040600020541690851614611f3257611f2c90611e92565b93611ee7565b505050505090565b50611eec565b91908203918211611dd257565b6000604051611f5b81611b06565b52604051611f6881611b06565b620f424081529056fe608080604052346100165761085e908161001c8239f35b600080fdfe60806040908082526004918236101561001757600080fd5b600091823560e01c90816325394c941461053a575080633d572640146102c857806387ceff09146102ae5763c10753291461005157600080fd5b346102aa57806003193601126102aa5761006961066c565b33835260208381528284206001600160a01b039092168085529181528284208054602494853594929392909185101561026f576100a6858561074d565b509283544210610222576100b9846107a2565b9283156101d657600385019384548181018091116101c4578555815163a9059cbb60e01b815233818d0152808a0182905283816044818e895af19081156101ba5791610134600297969594927f080a49aa43b33f2f3fe14496cbedde2305f0cc484e98afb78e943cf9881adc8a948e9161018d575b50610709565b8151938a85528401523392a3549101541461014d578380f35b906101579161074d565b93909361017d575050600382828094558260018201558260028201550155803880808380f35b634e487b7160e01b835282905281fd5b6101ad9150863d88116101b3575b6101a581836106cf565b8101906106f1565b3861012e565b503d61019b565b83513d8d823e3d90fd5b634e487b7160e01b8b5260118c52898bfd5b5162461bcd60e51b8152808a01919091526021818801527f4e6f2066756e647320617661696c61626c6520666f72207769746864726177616044820152601b60fa1b6064820152608490fd5b8860238860849386519362461bcd60e51b85528401528201527f46756e647320617265207374696c6c20696e2074686520636c696666207065726044820152621a5bd960ea1b6064820152fd5b815162461bcd60e51b815280890184905260168188015275092dcecc2d8d2c840e6c6d0cac8ead8ca40d2dcc8caf60531b6044820152606490fd5b5080fd5b50346102aa57816003193601126102aa5760209051428152f35b5082346105365760a0366003190112610536576102e361066c565b916102ec610687565b6084359160643591604435904282106104f357818411156104a65784156104545782516323b872dd60e01b81523387820152306024820152604481018690526001600160a01b03918216976020929183816064818e8e5af190811561044a579061035c918c9161042d5750610709565b1695868952888252838920888a528252838920845161037a8161069d565b8481528381018781528682019189835260608101938d85528054906801000000000000000082101561041a57906103b69160018201815561074d565b95909561040857505184555160018401555160028301555160039091015582519485528401528201527f1db04dfee373564c736f0f9c7f12ba28e6378cccea075c4c1754ecb4fd5c5ee090606090a380f35b634e487b7160e01b8e528d905260248dfd5b634e487b7160e01b8f526041875260248ffd5b6104449150853d87116101b3576101a581836106cf565b8c61012e565b86513d8d823e3d90fd5b825162461bcd60e51b8152602081880152602660248201527f546f74616c20616d6f756e74206d7573742062652067726561746572207468616044820152656e207a65726f60d01b6064820152608490fd5b825162461bcd60e51b8152602081880152602160248201527f456e642074696d65206d75737420626520616674657220636c6966662074696d6044820152606560f81b6064820152608490fd5b825162461bcd60e51b8152602081880181905260248201527f436c6966662074696d65206d75737420626520696e20746865206675747572656044820152606490fd5b8280fd5b838584923461053657836003193601126105365761055661066c565b61055e610687565b6001600160a01b039182168552602085815286862091909216855281528484208054909367ffffffffffffffff8211610659576105a483836005989695981b01846106cf565b8183528583018095855286852085915b848310610613575050505050845193808501918186525180925285850193925b8281106105e15785850386f35b8351805186528083015186840152878101518887015260609081015190860152608090940193928101926001016105d4565b83896001928c9b98999b516106278161069d565b8554815284860154838201528d60028701549082015260038601546060820152815201920192019190979594976105b4565b634e487b7160e01b865260419052602485fd5b600435906001600160a01b038216820361068257565b600080fd5b602435906001600160a01b038216820361068257565b6080810190811067ffffffffffffffff8211176106b957604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff8211176106b957604052565b90816020910312610682575180151581036106825790565b1561071057565b60405162461bcd60e51b8152602060048201526015602482015274151bdad95b881d1c985b9cd9995c8819985a5b1959605a1b6044820152606490fd5b80548210156107695760005260206000209060021b0190600090565b634e487b7160e01b600052603260045260246000fd5b9190820391821161078c57565b634e487b7160e01b600052601160045260246000fd5b80546107ae814261077f565b9060018301546107be828261077f565b83106107de5750505080600360026107db9301549101549061077f565b90565b906107e89161077f565b60028301548115610812570481810291818304149015171561078c5760036107db9201549061077f565b634e487b7160e01b600052601260045260246000fdfea264697066735822122022a39d12bf5474e9b8a09dd44b98f8d6075709795f355ea52b615c09cf8289cd64736f6c6343000814003360a03461007e57601f6105f138819003918201601f19168301916001600160401b038311848410176100835780849260209460405283398101031261007e57516001600160a01b038116810361007e57608052604051610557908161009a82396080518181816080015281816101690152818161020e01526102dc0152f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe604060808152600436101561001357600080fd5b60009060e08235811c90816316c197391461030b5781635cb0175c146102c7578163a3de7d17146101d6578163c1ac1026146100bf575063fb33ce811461005957600080fd5b346100bb57806003193601126100bb5761007161042f565b6001600160a01b03906100a7337f00000000000000000000000000000000000000000000000000000000000000008416146104bd565b168252816020526007602435918320015580f35b5080fd5b919050346101d2576101203660031901126101d2576100dc61042f565b6101003660231901126101ce576100f161044a565b9260243584526020840192604435845261010a366104a1565b93818601948552606086016084358152602060a3193601126101ca57600795610131610481565b9260a43584526080890193845260a089019460c435865260c08a019660e43588528a019761010435895260018060a01b0390610190827f00000000000000000000000000000000000000000000000000000000000000001633146104bd565b168b528a6020528a209851895551600189015551516002880155516003870155515160048601555160058501555160068401555191015580f35b8780fd5b8380fd5b8280fd5b9050346101d25760803660031901126101d2576007906101f461042f565b906101fe366104a1565b936001600160a01b0390610235337f00000000000000000000000000000000000000000000000000000000000000008416146104bd565b8661023e610481565b52610247610481565b9087825261025361044a565b966024358852602088016044358152828901918252606089019242845260808a0194855260a08a01958b875260c08b01978c89528b01988c8a52168b528a6020528a209851895551600189015551516002880155516003870155515160048601555160058501555160068401555191015580f35b5050346100bb57816003193601126100bb57517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b9050346101d25760203660031901126101d257816101009361032b61042f565b818461033561044a565b828152826020820152610346610481565b8381528682015282606082015261035b610481565b838152608082015260a0810183905260c0810183905201526001600160a01b031681526020819052209161038d61044a565b9280548452600181015491602085019283526103a7610481565b90600283015482528086019182526003830154606087019081526103c9610481565b91600485015483526080880192835260058501549360a08901948552600760068701549660c08b01978852015496888a01978852825199518a525160208a0152515190880152516060870152515160808601525160a08501525160c08401525190820152f35b600435906001600160a01b038216820361044557565b600080fd5b60405190610100820182811067ffffffffffffffff82111761046b57604052565b634e487b7160e01b600052604160045260246000fd5b604051906020820182811067ffffffffffffffff82111761046b57604052565b6020906063190112610445576104b5610481565b906064358252565b156104c457565b60405162461bcd60e51b815260206004820152602f60248201527f506f736974696f6e2063616e206f6e6c7920626520736574206279207468652060448201526e1cdd1c99585b4818dbdb9d1c9858dd608a1b6064820152608490fdfea2646970667358221220965ea0f51c0f9285864401dc126ae8b55d530ca76b5e788daaf086ee2fa46a7764736f6c63430008140033c65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a8a26469706673582212201431724237c49c8eb92eac4d0f532704fd63eb43f597860ef13c577608bcd9e064736f6c63430008140033",
  "devdoc": {
    "errors": {
      "ERC1167FailedCreateClone()": [
        {
          "details": "A clone instance deployment failed."
        }
      ]
    },
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2552,
        "contract": "contracts/StreamFactory.sol:StreamFactory",
        "label": "acceptedInSupplyTokens",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2560,
        "contract": "contracts/StreamFactory.sol:StreamFactory",
        "label": "currentStreamId",
        "offset": 0,
        "slot": "1",
        "type": "t_uint16"
      },
      {
        "astId": 2563,
        "contract": "contracts/StreamFactory.sol:StreamFactory",
        "label": "params",
        "offset": 0,
        "slot": "2",
        "type": "t_struct(Params)5739_storage"
      },
      {
        "astId": 2567,
        "contract": "contracts/StreamFactory.sol:StreamFactory",
        "label": "streamAddresses",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_uint16,t_address)"
      },
      {
        "astId": 2569,
        "contract": "contracts/StreamFactory.sol:StreamFactory",
        "label": "frozen",
        "offset": 0,
        "slot": "15",
        "type": "t_bool"
      },
      {
        "astId": 2571,
        "contract": "contracts/StreamFactory.sol:StreamFactory",
        "label": "initialized",
        "offset": 1,
        "slot": "15",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint16,t_address)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Decimal)4518_storage": {
        "encoding": "inplace",
        "label": "struct Decimal",
        "members": [
          {
            "astId": 4517,
            "contract": "contracts/StreamFactory.sol:StreamFactory",
            "label": "value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Params)5739_storage": {
        "encoding": "inplace",
        "label": "struct StreamFactoryTypes.Params",
        "members": [
          {
            "astId": 5715,
            "contract": "contracts/StreamFactory.sol:StreamFactory",
            "label": "streamCreationFee",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5717,
            "contract": "contracts/StreamFactory.sol:StreamFactory",
            "label": "streamCreationFeeToken",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 5720,
            "contract": "contracts/StreamFactory.sol:StreamFactory",
            "label": "exitFeeRatio",
            "offset": 0,
            "slot": "2",
            "type": "t_struct(Decimal)4518_storage"
          },
          {
            "astId": 5722,
            "contract": "contracts/StreamFactory.sol:StreamFactory",
            "label": "minWaitingDuration",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 5724,
            "contract": "contracts/StreamFactory.sol:StreamFactory",
            "label": "minBootstrappingDuration",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 5726,
            "contract": "contracts/StreamFactory.sol:StreamFactory",
            "label": "minStreamDuration",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 5728,
            "contract": "contracts/StreamFactory.sol:StreamFactory",
            "label": "feeCollector",
            "offset": 0,
            "slot": "6",
            "type": "t_address"
          },
          {
            "astId": 5730,
            "contract": "contracts/StreamFactory.sol:StreamFactory",
            "label": "protocolAdmin",
            "offset": 0,
            "slot": "7",
            "type": "t_address"
          },
          {
            "astId": 5732,
            "contract": "contracts/StreamFactory.sol:StreamFactory",
            "label": "tosVersion",
            "offset": 0,
            "slot": "8",
            "type": "t_string_storage"
          },
          {
            "astId": 5734,
            "contract": "contracts/StreamFactory.sol:StreamFactory",
            "label": "vestingAddress",
            "offset": 0,
            "slot": "9",
            "type": "t_address"
          },
          {
            "astId": 5736,
            "contract": "contracts/StreamFactory.sol:StreamFactory",
            "label": "poolWrapperAddress",
            "offset": 0,
            "slot": "10",
            "type": "t_address"
          },
          {
            "astId": 5738,
            "contract": "contracts/StreamFactory.sol:StreamFactory",
            "label": "streamImplementationAddress",
            "offset": 0,
            "slot": "11",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "384"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}