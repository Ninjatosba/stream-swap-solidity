{
  "address": "0x1d0F5a71F1Ed972e312C1C72460d13ed81dF9E5c",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_streamFactoryAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InsufficientOutAmount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requiredTokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenBalance",
          "type": "uint256"
        }
      ],
      "name": "InsufficientTokenPayment",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidExitCondition",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidImplementationAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInSupplyToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidOutSupplyToken",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "exitDate",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "InvalidPosition",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidStreamFactoryAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidVestingCliffDuration",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidVestingDuration",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidWithdrawAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OperationNotAllowed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PaymentFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StreamFactoryAddressAlreadySet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Unauthorized",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "cap",
          "type": "uint256"
        }
      ],
      "name": "WithdrawAmountExceedsBalance",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "tokensAdded",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "tokensRemoved",
          "type": "address[]"
        }
      ],
      "name": "AcceptedTokensUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "streamAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "subscriber",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "refundedAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "exitTimestamp",
          "type": "uint256"
        }
      ],
      "name": "ExitRefunded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "streamAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "subscriber",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "purchased",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "spentIn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "exitTimestamp",
          "type": "uint256"
        }
      ],
      "name": "ExitStreamed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "streamImplementationAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "poolWrapperAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "feeCollector",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "protocolAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "streamCreationFeeToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "streamCreationFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "exitFeeRatio",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minWaitingDuration",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minBootstrappingDuration",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minStreamDuration",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "tosVersion",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "vestingAddress",
          "type": "address"
        }
      ],
      "name": "FactoryInitialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newFeeCollector",
          "type": "address"
        }
      ],
      "name": "FeeCollectorUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "streamAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "refundedOutAmount",
          "type": "uint256"
        }
      ],
      "name": "FinalizedRefunded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "streamAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "creatorRevenue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "exitFeeAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "refundedOutAmount",
          "type": "uint256"
        }
      ],
      "name": "FinalizedStreamed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "frozen",
          "type": "bool"
        }
      ],
      "name": "FrozenStateUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "streamCreationFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "exitFeeRatio",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minWaitingDuration",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minBootstrappingDuration",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minStreamDuration",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "tosVersion",
          "type": "string"
        }
      ],
      "name": "ParamsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "factoryAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "poolWrapper",
          "type": "address"
        }
      ],
      "name": "PoolWrapperUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "streamAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "subscriber",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "positionInBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "positionShares",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "positionLastUpdateTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "positionSpentIn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "positionPurchased",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "positionIndex",
          "type": "uint256"
        }
      ],
      "name": "PositionSynced",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newProtocolAdmin",
          "type": "address"
        }
      ],
      "name": "ProtocolAdminUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "streamAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "outSupply",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "status",
          "type": "uint8"
        }
      ],
      "name": "StreamCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "streamFactoryAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "streamOutToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "streamInToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "streamAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "positionStorageAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "streamOutAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bootstrappingStartTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "streamStartTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "streamEndTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "threshold",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "metadataIpfsHash",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "tosVersion",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "streamId",
          "type": "uint16"
        }
      ],
      "name": "StreamCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "streamAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lastUpdated",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "distIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "outRemaining",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "inSupply",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "spentIn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "currentStreamedPrice",
          "type": "uint256"
        }
      ],
      "name": "StreamStateUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "streamAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "mainStatus",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lastUpdated",
          "type": "uint256"
        }
      ],
      "name": "StreamSynced",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "streamAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lastUpdated",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "newStatus",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "distIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "outRemaining",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "inSupply",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "spentIn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "currentStreamedPrice",
          "type": "uint256"
        }
      ],
      "name": "StreamSynced",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "streamAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "subscriber",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "positionInBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "positionShares",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "positionLastUpdateTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "positionSpentIn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "positionPurchased",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "positionIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "streamInSupply",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "streamShares",
          "type": "uint256"
        }
      ],
      "name": "Subscribed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "factoryAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "vestingContract",
          "type": "address"
        }
      ],
      "name": "VestingContractDeployed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "streamAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "subscriber",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "positionInBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "positionShares",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "positionLastUpdateTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "positionSpentIn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "positionPurchased",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "positionIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "streamInSupply",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "streamShares",
          "type": "uint256"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "cancelStream",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cancelWithAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "creator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exitStream",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "finalizeStream",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getPosition",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "inBalance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "shares",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Decimal",
              "name": "index",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "lastUpdateTime",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Decimal",
              "name": "pendingReward",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "spentIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "purchased",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "exitDate",
              "type": "uint256"
            }
          ],
          "internalType": "struct PositionTypes.Position",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStreamState",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "outRemaining",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Decimal",
              "name": "distIndex",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "spentIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "shares",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Decimal",
              "name": "currentStreamedPrice",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "threshold",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "inSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "outSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastUpdated",
              "type": "uint256"
            }
          ],
          "internalType": "struct StreamTypes.StreamState",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStreamStatus",
      "outputs": [
        {
          "internalType": "enum StreamTypes.Status",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "streamOutAmount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "outSupplyToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "bootstrappingStartTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "streamStartTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "streamEndTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "threshold",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "ipfsHash",
                  "type": "string"
                }
              ],
              "internalType": "struct StreamTypes.StreamMetadata",
              "name": "metadata",
              "type": "tuple"
            },
            {
              "internalType": "address",
              "name": "inSupplyToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "creator",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "bool",
                  "name": "isVestingEnabled",
                  "type": "bool"
                },
                {
                  "internalType": "uint32",
                  "name": "vestingDuration",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "cliffDuration",
                  "type": "uint32"
                }
              ],
              "internalType": "struct StreamTypes.VestingInfo",
              "name": "creatorVesting",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "bool",
                  "name": "isVestingEnabled",
                  "type": "bool"
                },
                {
                  "internalType": "uint32",
                  "name": "vestingDuration",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "cliffDuration",
                  "type": "uint32"
                }
              ],
              "internalType": "struct StreamTypes.VestingInfo",
              "name": "beneficiaryVesting",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "poolOutSupplyAmount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct StreamTypes.PoolInfo",
              "name": "poolInfo",
              "type": "tuple"
            },
            {
              "internalType": "bytes32",
              "name": "salt",
              "type": "bytes32"
            },
            {
              "internalType": "string",
              "name": "tosVersion",
              "type": "string"
            }
          ],
          "internalType": "struct StreamTypes.createStreamMessage",
          "name": "createStreamMessage",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "_positionStorageAddress",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "positionStorageAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "postStreamActions",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "poolOutSupplyAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct StreamTypes.PoolInfo",
          "name": "poolInfo",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "isVestingEnabled",
              "type": "bool"
            },
            {
              "internalType": "uint32",
              "name": "vestingDuration",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "cliffDuration",
              "type": "uint32"
            }
          ],
          "internalType": "struct StreamTypes.VestingInfo",
          "name": "creatorVesting",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "isVestingEnabled",
              "type": "bool"
            },
            {
              "internalType": "uint32",
              "name": "vestingDuration",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "cliffDuration",
              "type": "uint32"
            }
          ],
          "internalType": "struct StreamTypes.VestingInfo",
          "name": "beneficiaryVesting",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "streamMetadata",
      "outputs": [
        {
          "internalType": "string",
          "name": "ipfsHash",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "streamState",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "outRemaining",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal",
          "name": "distIndex",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "spentIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal",
          "name": "currentStreamedPrice",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "threshold",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "inSupply",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "outSupply",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastUpdated",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "streamStatus",
      "outputs": [
        {
          "internalType": "enum StreamTypes.Status",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "streamTimes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "bootstrappingStartTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "streamStartTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "streamEndTime",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "streamTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "inSupplyToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "outSupplyToken",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        }
      ],
      "name": "subscribe",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "syncPositionExternal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "syncStreamExternal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "cap",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe203ddf32aef463112bea58b57a1e9751438c6bea649adb96846807883903d2b",
  "receipt": {
    "to": null,
    "from": "0xB4eE189569597EFDB3bB48DB5ede8394d1D48e7b",
    "contractAddress": "0x1d0F5a71F1Ed972e312C1C72460d13ed81dF9E5c",
    "transactionIndex": 110,
    "gasUsed": "2571144",
    "logsBloom": "0x
    "blockHash": "0x0086e672c7e2b78939db4ba665101e9fd29e4e6d1a4207b7cc0544986c7b0714",
    "transactionHash": "0xe203ddf32aef463112bea58b57a1e9751438c6bea649adb96846807883903d2b",
    "logs": [],
    "blockNumber": 8335516,
    "cumulativeGasUsed": "15866095",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xdDACdace6f2aEFbD277Bf54E30DF0eeA3216b268"
  ],
  "numDeployments": 1,
  "solcInputHash": "6587d92f5ffbcae7e2f551bb58430f5e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_streamFactoryAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InsufficientOutAmount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requiredTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenBalance\",\"type\":\"uint256\"}],\"name\":\"InsufficientTokenPayment\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidExitCondition\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidImplementationAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInSupplyToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidOutSupplyToken\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"exitDate\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"InvalidPosition\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidStreamFactoryAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidVestingCliffDuration\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidVestingDuration\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidWithdrawAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OperationNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PaymentFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StreamFactoryAddressAlreadySet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cap\",\"type\":\"uint256\"}],\"name\":\"WithdrawAmountExceedsBalance\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokensAdded\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokensRemoved\",\"type\":\"address[]\"}],\"name\":\"AcceptedTokensUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"streamAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"subscriber\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"refundedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"exitTimestamp\",\"type\":\"uint256\"}],\"name\":\"ExitRefunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"streamAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"subscriber\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"purchased\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"spentIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"exitTimestamp\",\"type\":\"uint256\"}],\"name\":\"ExitStreamed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"streamImplementationAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"poolWrapperAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeCollector\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"protocolAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"streamCreationFeeToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"streamCreationFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"exitFeeRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minWaitingDuration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minBootstrappingDuration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minStreamDuration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"tosVersion\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vestingAddress\",\"type\":\"address\"}],\"name\":\"FactoryInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newFeeCollector\",\"type\":\"address\"}],\"name\":\"FeeCollectorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"streamAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"refundedOutAmount\",\"type\":\"uint256\"}],\"name\":\"FinalizedRefunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"streamAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"creatorRevenue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"exitFeeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"refundedOutAmount\",\"type\":\"uint256\"}],\"name\":\"FinalizedStreamed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenStateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"streamCreationFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"exitFeeRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minWaitingDuration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minBootstrappingDuration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minStreamDuration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"tosVersion\",\"type\":\"string\"}],\"name\":\"ParamsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"factoryAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"poolWrapper\",\"type\":\"address\"}],\"name\":\"PoolWrapperUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"streamAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"subscriber\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"positionInBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"positionShares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"positionLastUpdateTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"positionSpentIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"positionPurchased\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"positionIndex\",\"type\":\"uint256\"}],\"name\":\"PositionSynced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newProtocolAdmin\",\"type\":\"address\"}],\"name\":\"ProtocolAdminUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"streamAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"outSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"StreamCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"streamFactoryAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"streamOutToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"streamInToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"streamAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"positionStorageAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"streamOutAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bootstrappingStartTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"streamStartTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"streamEndTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metadataIpfsHash\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"tosVersion\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"streamId\",\"type\":\"uint16\"}],\"name\":\"StreamCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"streamAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastUpdated\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"distIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"outRemaining\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"spentIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentStreamedPrice\",\"type\":\"uint256\"}],\"name\":\"StreamStateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"streamAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"mainStatus\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastUpdated\",\"type\":\"uint256\"}],\"name\":\"StreamSynced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"streamAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastUpdated\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"newStatus\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"distIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"outRemaining\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"spentIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentStreamedPrice\",\"type\":\"uint256\"}],\"name\":\"StreamSynced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"streamAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"subscriber\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"positionInBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"positionShares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"positionLastUpdateTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"positionSpentIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"positionPurchased\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"positionIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"streamInSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"streamShares\",\"type\":\"uint256\"}],\"name\":\"Subscribed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"factoryAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vestingContract\",\"type\":\"address\"}],\"name\":\"VestingContractDeployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"streamAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"subscriber\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"positionInBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"positionShares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"positionLastUpdateTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"positionSpentIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"positionPurchased\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"positionIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"streamInSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"streamShares\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"cancelStream\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelWithAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exitStream\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalizeStream\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getPosition\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"inBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal\",\"name\":\"index\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateTime\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal\",\"name\":\"pendingReward\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"spentIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"purchased\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"exitDate\",\"type\":\"uint256\"}],\"internalType\":\"struct PositionTypes.Position\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStreamState\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"outRemaining\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal\",\"name\":\"distIndex\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"spentIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal\",\"name\":\"currentStreamedPrice\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdated\",\"type\":\"uint256\"}],\"internalType\":\"struct StreamTypes.StreamState\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStreamStatus\",\"outputs\":[{\"internalType\":\"enum StreamTypes.Status\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"streamOutAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"outSupplyToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bootstrappingStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"streamStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"streamEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"ipfsHash\",\"type\":\"string\"}],\"internalType\":\"struct StreamTypes.StreamMetadata\",\"name\":\"metadata\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"inSupplyToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isVestingEnabled\",\"type\":\"bool\"},{\"internalType\":\"uint32\",\"name\":\"vestingDuration\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"cliffDuration\",\"type\":\"uint32\"}],\"internalType\":\"struct StreamTypes.VestingInfo\",\"name\":\"creatorVesting\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isVestingEnabled\",\"type\":\"bool\"},{\"internalType\":\"uint32\",\"name\":\"vestingDuration\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"cliffDuration\",\"type\":\"uint32\"}],\"internalType\":\"struct StreamTypes.VestingInfo\",\"name\":\"beneficiaryVesting\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"poolOutSupplyAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct StreamTypes.PoolInfo\",\"name\":\"poolInfo\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"tosVersion\",\"type\":\"string\"}],\"internalType\":\"struct StreamTypes.createStreamMessage\",\"name\":\"createStreamMessage\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_positionStorageAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"positionStorageAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"postStreamActions\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"poolOutSupplyAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct StreamTypes.PoolInfo\",\"name\":\"poolInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isVestingEnabled\",\"type\":\"bool\"},{\"internalType\":\"uint32\",\"name\":\"vestingDuration\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"cliffDuration\",\"type\":\"uint32\"}],\"internalType\":\"struct StreamTypes.VestingInfo\",\"name\":\"creatorVesting\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isVestingEnabled\",\"type\":\"bool\"},{\"internalType\":\"uint32\",\"name\":\"vestingDuration\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"cliffDuration\",\"type\":\"uint32\"}],\"internalType\":\"struct StreamTypes.VestingInfo\",\"name\":\"beneficiaryVesting\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"streamMetadata\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"ipfsHash\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"streamState\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"outRemaining\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal\",\"name\":\"distIndex\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"spentIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal\",\"name\":\"currentStreamedPrice\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdated\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"streamStatus\",\"outputs\":[{\"internalType\":\"enum StreamTypes.Status\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"streamTimes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bootstrappingStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"streamStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"streamEndTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"streamTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"inSupplyToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"outSupplyToken\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"subscribe\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"syncPositionExternal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"syncStreamExternal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cap\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getStreamState()\":{\"details\":\"Get the current stream state\",\"returns\":{\"_0\":\"The current stream state\"}},\"getStreamStatus()\":{\"details\":\"Get the current stream status\",\"returns\":{\"_0\":\"The current stream status\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Stream.sol\":\"Stream\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/Clones.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n */\\nlibrary Clones {\\n    /**\\n     * @dev A clone instance deployment failed.\\n     */\\n    error ERC1167FailedCreateClone();\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create(0, 0x09, 0x37)\\n        }\\n        if (instance == address(0)) {\\n            revert ERC1167FailedCreateClone();\\n        }\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create2(0, 0x09, 0x37, salt)\\n        }\\n        if (instance == address(0)) {\\n            revert ERC1167FailedCreateClone();\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(add(ptr, 0x38), deployer)\\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\\n            mstore(add(ptr, 0x14), implementation)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\\n            mstore(add(ptr, 0x58), salt)\\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\\n            predicted := keccak256(add(ptr, 0x43), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt\\n    ) internal view returns (address predicted) {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xd18408af8a91bedb3d56343eeb9b30eb852e6dea93a5e2d5c6db9ca4cb905155\",\"license\":\"MIT\"},\"contracts/Stream.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"./interfaces/IPositionStorage.sol\\\";\\nimport \\\"./types/PositionTypes.sol\\\";\\nimport \\\"./interfaces/IStreamEvents.sol\\\";\\nimport \\\"./interfaces/IStreamErrors.sol\\\";\\nimport \\\"./types/StreamTypes.sol\\\";\\nimport \\\"./StreamFactory.sol\\\";\\nimport \\\"./types/StreamFactoryTypes.sol\\\";\\nimport \\\"./lib/math/DecimalMath.sol\\\";\\nimport \\\"./lib/math/StreamMathLib.sol\\\";\\nimport \\\"./interfaces/IERC20.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\nimport \\\"./lib/helpers/TokenHelpers.sol\\\";\\nimport \\\"./interfaces/IPoolWrapper.sol\\\";\\nimport \\\"./interfaces/IVesting.sol\\\";\\nimport \\\"./types/PoolWrapperTypes.sol\\\";\\n\\ncontract Stream is IStreamErrors, IStreamEvents {\\n    address public creator;\\n    address immutable streamFactoryAddress;\\n    address public positionStorageAddress;\\n    bool private initialized;\\n\\n    StreamTypes.StreamState public streamState;\\n    StreamTypes.StreamTokens public streamTokens;\\n    StreamTypes.StreamMetadata public streamMetadata;\\n    StreamTypes.Status public streamStatus;\\n    StreamTypes.StreamTimes public streamTimes;\\n    StreamTypes.PostStreamActions public postStreamActions;\\n\\n    modifier onlyOnce() {\\n        if (initialized) revert Unauthorized();\\n        _;\\n        initialized = true;\\n    }\\n\\n    modifier onlyAdmin() {\\n        if (msg.sender != streamFactoryAddress) revert Unauthorized();\\n        _;\\n    }\\n\\n    constructor(address _streamFactoryAddress) {\\n        streamFactoryAddress = _streamFactoryAddress;\\n    }\\n\\n    function initialize(\\n        StreamTypes.createStreamMessage memory createStreamMessage,\\n        address _positionStorageAddress\\n    ) external onlyOnce onlyAdmin {\\n        // Validate that output token is a valid ERC20\\n        if (!TokenHelpers.isValidERC20(createStreamMessage.outSupplyToken, msg.sender)) revert InvalidOutSupplyToken();\\n        // Check if the contract has enough balance of output token\\n        uint256 totalRequiredAmount = createStreamMessage.streamOutAmount +\\n            createStreamMessage.poolInfo.poolOutSupplyAmount;\\n        if (!TokenHelpers.hasEnoughBalance(createStreamMessage.outSupplyToken, address(this), totalRequiredAmount))\\n            revert InsufficientOutAmount();\\n        // Validate and set creator vesting info\\n        if (createStreamMessage.creatorVesting.isVestingEnabled) {\\n            // Validate vesting duration\\n            if (createStreamMessage.creatorVesting.vestingDuration == 0) {\\n                revert InvalidVestingDuration();\\n            }\\n            if (createStreamMessage.creatorVesting.cliffDuration == 0) {\\n                revert InvalidVestingCliffDuration();\\n            }\\n            if (\\n                createStreamMessage.creatorVesting.cliffDuration >= createStreamMessage.creatorVesting.vestingDuration\\n            ) {\\n                revert InvalidVestingCliffDuration();\\n            }\\n            // set vesting info\\n            postStreamActions.creatorVesting = createStreamMessage.creatorVesting;\\n        }\\n        // Validate and set beneficiary vesting info\\n        if (createStreamMessage.beneficiaryVesting.isVestingEnabled) {\\n            // Validate vesting duration\\n            if (createStreamMessage.beneficiaryVesting.vestingDuration == 0) {\\n                revert InvalidVestingDuration();\\n            }\\n            if (createStreamMessage.beneficiaryVesting.cliffDuration == 0) {\\n                revert InvalidVestingCliffDuration();\\n            }\\n            if (\\n                createStreamMessage.beneficiaryVesting.cliffDuration >=\\n                createStreamMessage.beneficiaryVesting.vestingDuration\\n            ) {\\n                revert InvalidVestingCliffDuration();\\n            }\\n            // set vesting info\\n            postStreamActions.beneficiaryVesting = createStreamMessage.beneficiaryVesting;\\n        }\\n        // Validate pool config\\n        if (createStreamMessage.poolInfo.poolOutSupplyAmount > 0) {\\n            // Validate pool amount is less than or equal to out amount\\n            if (createStreamMessage.poolInfo.poolOutSupplyAmount > createStreamMessage.streamOutAmount) {\\n                revert InvalidAmount();\\n            }\\n            postStreamActions.poolInfo = createStreamMessage.poolInfo;\\n        }\\n        // Save position storage address\\n        positionStorageAddress = _positionStorageAddress;\\n        // Set creator\\n        creator = createStreamMessage.creator;\\n        // Initialize stream state\\n        streamState = StreamTypes.StreamState({\\n            distIndex: DecimalMath.fromNumber(0),\\n            outRemaining: createStreamMessage.streamOutAmount,\\n            inSupply: 0,\\n            spentIn: 0,\\n            shares: 0,\\n            currentStreamedPrice: DecimalMath.fromNumber(0),\\n            threshold: createStreamMessage.threshold,\\n            outSupply: createStreamMessage.streamOutAmount,\\n            lastUpdated: block.timestamp\\n        });\\n        // Initialize stream tokens\\n        streamTokens = StreamTypes.StreamTokens({\\n            inSupplyToken: createStreamMessage.inSupplyToken,\\n            outSupplyToken: createStreamMessage.outSupplyToken\\n        });\\n        // Initialize stream metadata\\n        streamMetadata = createStreamMessage.metadata;\\n        // Initialize stream status\\n        streamStatus = StreamTypes.Status.Waiting;\\n        // Initialize stream times\\n        streamTimes = StreamTypes.StreamTimes({\\n            bootstrappingStartTime: createStreamMessage.bootstrappingStartTime,\\n            streamStartTime: createStreamMessage.streamStartTime,\\n            streamEndTime: createStreamMessage.streamEndTime\\n        });\\n    }\\n\\n    /**\\n     * @dev Synchronizes the stream state based on the current timestamp\\n     * @param state The current stream state to update\\n     * @return The updated stream state\\n     */\\n    function syncStream(StreamTypes.StreamState memory state) internal returns (StreamTypes.StreamState memory) {\\n        StreamTypes.StreamTimes memory times = loadStreamTimes();\\n\\n        Decimal memory diff = StreamMathLib.calculateDiff(\\n            block.timestamp,\\n            times.streamStartTime,\\n            times.streamEndTime,\\n            state.lastUpdated\\n        );\\n\\n        if (diff.value == 0) {\\n            state.lastUpdated = block.timestamp;\\n            return state;\\n        }\\n\\n        state = StreamMathLib.calculateUpdatedState(state, diff);\\n        state.lastUpdated = block.timestamp;\\n\\n        emit StreamStateUpdated(\\n            address(this),\\n            state.lastUpdated,\\n            state.distIndex.value,\\n            state.outRemaining,\\n            state.inSupply,\\n            state.spentIn,\\n            state.currentStreamedPrice.value\\n        );\\n\\n        return state;\\n    }\\n\\n    function saveStreamState(StreamTypes.StreamState memory state) internal {\\n        streamState = state;\\n    }\\n\\n    function loadStreamState() internal view returns (StreamTypes.StreamState memory) {\\n        return streamState;\\n    }\\n\\n    // ============ Position Validation ============\\n\\n    /**\\n     * @dev Validates a position and reverts if invalid\\n     * @param position The position to validate\\n     * @param user The address of the user whose position is being validated\\n     * @custom:error InvalidPosition if position is invalid or inactive\\n     */\\n    function validatePosition(PositionTypes.Position memory position, address user) internal pure {\\n        if (position.shares == 0) {\\n            revert InvalidPosition(user, position.shares, position.exitDate, \\\"Position has no shares\\\");\\n        }\\n        if (position.exitDate != 0) {\\n            revert InvalidPosition(user, position.shares, position.exitDate, \\\"Position has already exited\\\");\\n        }\\n    }\\n\\n    // ============ Stream State Validation ============\\n\\n    /**\\n     * @dev Validates if an operation is allowed based on the current stream status\\n     * @param currentStatus Current status to check\\n     * @param allowedStatuses Array of allowed statuses for the operation\\n     * @custom:error OperationNotAllowed if current status is not in allowed statuses\\n     */\\n    function validateOperationAllowed(\\n        StreamTypes.Status currentStatus,\\n        StreamTypes.Status[] memory allowedStatuses\\n    ) internal pure {\\n        for (uint256 i = 0; i < allowedStatuses.length; i++) {\\n            if (currentStatus == allowedStatuses[i]) {\\n                return;\\n            }\\n        }\\n        revert OperationNotAllowed();\\n    }\\n\\n    /**\\n     * @dev Validates if the threshold has been reached for stream finalization\\n     * @param state The stream state to check\\n     * @return bool True if the threshold has been reached, false otherwise\\n     */\\n    function isThresholdReached(StreamTypes.StreamState memory state) internal pure returns (bool) {\\n        return state.spentIn >= state.threshold;\\n    }\\n\\n    // ============ Access Control ============\\n\\n    /**\\n     * @dev Ensures sender is the creator\\n     * @custom:error Unauthorized if sender is not the creator\\n     */\\n    function validateIsCreator() internal view {\\n        if (msg.sender != creator) revert Unauthorized();\\n    }\\n\\n    /**\\n     * @dev Ensures sender is the protocol admin\\n     * @custom:error Unauthorized if sender is not the protocol admin\\n     */\\n    function validateIsProtocolAdmin() internal view {\\n        StreamFactory factoryContract = StreamFactory(streamFactoryAddress);\\n        address protocolAdmin = factoryContract.getParams().protocolAdmin;\\n        if (msg.sender != protocolAdmin) revert Unauthorized();\\n    }\\n\\n    // ============ Amount Validation ============\\n\\n    /**\\n     * @dev Ensures amount is not zero\\n     * @param amount Amount to check\\n     * @custom:error InvalidAmount if amount is zero\\n     */\\n    function validateAmountNotZero(uint256 amount) internal pure {\\n        if (amount == 0) revert InvalidAmount();\\n    }\\n\\n    /**\\n     * @dev Ensures withdrawal amount does not exceed balance\\n     * @param cap Amount to withdraw\\n     * @param balance Available balance\\n     * @custom:error WithdrawAmountExceedsBalance if cap exceeds balance\\n     */\\n    function validateWithinBalance(uint256 cap, uint256 balance) internal pure {\\n        if (cap > balance) revert WithdrawAmountExceedsBalance(cap);\\n    }\\n\\n    function subscribe(uint256 amountIn) external payable {\\n        validateAmountNotZero(amountIn);\\n\\n        // Load and validate stream state\\n        StreamTypes.Status status = loadStreamStatus();\\n        StreamTypes.StreamTimes memory times = loadStreamTimes();\\n        status = syncStreamStatus(status, times, block.timestamp);\\n\\n        // Validate operation is allowed\\n        StreamTypes.Status[] memory allowedStatuses = new StreamTypes.Status[](2);\\n        allowedStatuses[0] = StreamTypes.Status.Bootstrapping;\\n        allowedStatuses[1] = StreamTypes.Status.Active;\\n        validateOperationAllowed(status, allowedStatuses);\\n        saveStreamStatus(status);\\n\\n        // Load and sync stream state\\n        StreamTypes.StreamState memory state = loadStream();\\n        state = syncStream(state);\\n\\n        // Load and sync position\\n        // If first time subscribing, sync position will set distIndex and lastUpdated\\n        PositionTypes.Position memory position = loadPosition(msg.sender);\\n        position = StreamMathLib.syncPosition(position, state.distIndex, state.shares, state.inSupply, block.timestamp);\\n\\n        // Transfer tokens\\n        if (!TokenHelpers.safeTransferFrom(streamTokens.inSupplyToken, msg.sender, address(this), amountIn)) {\\n            revert PaymentFailed();\\n        }\\n\\n        // Calculate and update shares\\n        uint256 newShares = StreamMathLib.computeSharesAmount(amountIn, false, state.inSupply, state.shares);\\n\\n        // Update position\\n        position.inBalance += amountIn;\\n        position.shares += newShares;\\n\\n        // Update stream state\\n        state.inSupply += amountIn;\\n        state.shares += newShares;\\n\\n        // Save states\\n        savePosition(msg.sender, position);\\n        saveStream(state);\\n\\n        emit Subscribed(\\n            address(this),\\n            msg.sender,\\n            position.inBalance,\\n            newShares,\\n            position.lastUpdateTime,\\n            position.spentIn,\\n            position.purchased,\\n            position.index.value,\\n            state.inSupply,\\n            state.shares\\n        );\\n    }\\n\\n    function withdraw(uint256 cap) external {\\n        validateAmountNotZero(cap);\\n\\n        // Load position once\\n        PositionTypes.Position memory position = loadPosition(msg.sender);\\n\\n        // Validate position\\n        validatePosition(position, msg.sender);\\n\\n        // load stream times\\n        StreamTypes.StreamTimes memory times = loadStreamTimes();\\n\\n        // Load and update status\\n        StreamTypes.Status status = loadStreamStatus();\\n        status = syncStreamStatus(status, times, block.timestamp);\\n\\n        // Check if operation is allowed\\n        StreamTypes.Status[] memory allowedStatuses = new StreamTypes.Status[](2);\\n        allowedStatuses[0] = StreamTypes.Status.Active;\\n        allowedStatuses[1] = StreamTypes.Status.Bootstrapping;\\n        validateOperationAllowed(status, allowedStatuses);\\n\\n        // Save the updated status\\n        saveStreamStatus(status);\\n\\n        // Load and update stream state\\n        StreamTypes.StreamState memory state = loadStream();\\n        state = syncStream(state);\\n\\n        // Sync position with the updated state\\n        position = StreamMathLib.syncPosition(position, state.distIndex, state.shares, state.inSupply, block.timestamp);\\n\\n        // Check if withdrawal amount exceeds position balance\\n        validateWithinBalance(cap, position.inBalance);\\n\\n        uint256 shareDeduction = 0;\\n\\n        if (cap == position.inBalance) {\\n            shareDeduction = position.shares;\\n        } else {\\n            shareDeduction = StreamMathLib.computeSharesAmount(cap, true, state.inSupply, position.shares);\\n        }\\n\\n        // Update position\\n        position.shares = position.shares - shareDeduction;\\n        position.inBalance = position.inBalance - cap;\\n\\n        // Update stream state\\n        state.inSupply = state.inSupply - cap;\\n        state.shares = state.shares - shareDeduction;\\n\\n        // Save position and stream state\\n        savePosition(msg.sender, position);\\n        saveStream(state);\\n\\n        // Token transfer\\n        TokenHelpers.safeTokenTransfer(streamTokens.inSupplyToken, msg.sender, cap);\\n\\n        emit Withdrawn(\\n            address(this),\\n            msg.sender,\\n            position.inBalance,\\n            position.shares,\\n            position.lastUpdateTime,\\n            position.spentIn,\\n            position.purchased,\\n            position.index.value,\\n            state.inSupply,\\n            state.shares\\n        );\\n    }\\n\\n    function exitStream() external {\\n        // Load position\\n        PositionTypes.Position memory position = loadPosition(msg.sender);\\n\\n        // Check if position is valid and active\\n        validatePosition(position, msg.sender);\\n\\n        // Load and update stream state\\n        StreamTypes.StreamState memory state = loadStream();\\n        state = syncStream(state);\\n\\n        // Sync position with updated state\\n        position = StreamMathLib.syncPosition(position, state.distIndex, state.shares, state.inSupply, block.timestamp);\\n\\n        // Load and update status\\n        StreamTypes.Status status = loadStreamStatus();\\n        StreamTypes.StreamTimes memory times = loadStreamTimes();\\n        status = syncStreamStatus(status, times, block.timestamp);\\n\\n        bool thresholdReached = isThresholdReached(state);\\n\\n        // Handle token distributions based on exit scenario\\n        handleExitDistribution(status, thresholdReached, position, postStreamActions.beneficiaryVesting);\\n\\n        // Set exit date\\n        position.exitDate = block.timestamp;\\n\\n        // Save everything\\n        saveStreamStatus(status);\\n        saveStream(state);\\n        savePosition(msg.sender, position);\\n    }\\n\\n    function handleExitDistribution(\\n        StreamTypes.Status status,\\n        bool thresholdReached,\\n        PositionTypes.Position memory position,\\n        StreamTypes.VestingInfo memory vestingInfo\\n    ) internal {\\n        // Case 1: Successful stream completion\\n        if (isSuccessfulExit(status, thresholdReached)) {\\n            // Return any unused input tokens\\n            if (position.inBalance > 0) {\\n                TokenHelpers.safeTokenTransfer(streamTokens.inSupplyToken, msg.sender, position.inBalance);\\n            }\\n            if (vestingInfo.isVestingEnabled) {\\n                // Distribute earned output tokens\\n                uint256 amountToDistribute = position.purchased;\\n                // Load factory params\\n                StreamFactory factoryContract = StreamFactory(streamFactoryAddress);\\n                StreamFactoryTypes.Params memory params = factoryContract.getParams();\\n                address vestingContractAddress = params.vestingAddress;\\n                IVesting vestingContract = IVesting(vestingContractAddress);\\n                // Create vesting schedule\\n                (uint256 cliffTime, uint256 endTime) = StreamMathLib.calculateVestingSchedule(\\n                    block.timestamp,\\n                    vestingInfo.cliffDuration,\\n                    vestingInfo.vestingDuration\\n                );\\n                // Approve vesting contract\\n                TokenHelpers.safeTokenApprove(streamTokens.outSupplyToken, vestingContractAddress, amountToDistribute);\\n                // Create vesting schedule\\n                vestingContract.stakeFunds(\\n                    msg.sender,\\n                    streamTokens.outSupplyToken,\\n                    cliffTime,\\n                    endTime,\\n                    amountToDistribute\\n                );\\n            } else {\\n                // Direct transfer if vesting is not enabled\\n                TokenHelpers.safeTokenTransfer(streamTokens.outSupplyToken, msg.sender, position.purchased);\\n            }\\n            emit ExitStreamed(address(this), msg.sender, position.purchased, position.spentIn, block.timestamp);\\n            return;\\n        }\\n\\n        // Case 2: Refund scenario\\n        if (isRefundExit(status, thresholdReached)) {\\n            // Full refund of all input tokens (both spent and unspent)\\n            uint256 totalRefund = position.inBalance + position.spentIn;\\n            TokenHelpers.safeTokenTransfer(streamTokens.inSupplyToken, msg.sender, totalRefund);\\n            emit ExitRefunded(address(this), msg.sender, totalRefund, block.timestamp);\\n            return;\\n        }\\n\\n        // If neither condition is met, the exit is not allowed\\n        revert InvalidExitCondition();\\n    }\\n\\n    function isSuccessfulExit(StreamTypes.Status status, bool thresholdReached) internal pure returns (bool) {\\n        return\\n            (status == StreamTypes.Status.Ended && thresholdReached) ||\\n            (status == StreamTypes.Status.FinalizedStreamed);\\n    }\\n\\n    function isRefundExit(StreamTypes.Status status, bool thresholdReached) internal pure returns (bool) {\\n        return\\n            status == StreamTypes.Status.Cancelled ||\\n            status == StreamTypes.Status.FinalizedRefunded ||\\n            (status == StreamTypes.Status.Ended && !thresholdReached);\\n    }\\n\\n    function finalizeStream() external {\\n        validateIsCreator();\\n\\n        // Get factory params\\n        StreamFactory factoryContract = StreamFactory(streamFactoryAddress);\\n        StreamFactoryTypes.Params memory params = factoryContract.getParams();\\n\\n        // Load and update status\\n        StreamTypes.Status status = loadStreamStatus();\\n        StreamTypes.StreamTimes memory times = loadStreamTimes();\\n        status = syncStreamStatus(status, times, block.timestamp);\\n\\n        // Check if operation is allowed\\n        StreamTypes.Status[] memory allowedStatuses = new StreamTypes.Status[](1);\\n        allowedStatuses[0] = StreamTypes.Status.Ended;\\n        validateOperationAllowed(status, allowedStatuses);\\n\\n        // Load and update stream state\\n        StreamTypes.StreamState memory state = loadStream();\\n        state = syncStream(state);\\n\\n        bool thresholdReached = isThresholdReached(state);\\n\\n        if (thresholdReached) {\\n            address feeCollector = params.feeCollector;\\n            Decimal memory exitFeeRatio = params.exitFeeRatio;\\n\\n            // Calculate exit fee\\n            (uint256 feeAmount, uint256 creatorRevenue) = StreamMathLib.calculateExitFee(state.spentIn, exitFeeRatio);\\n            // Transfer fee to fee collector\\n            TokenHelpers.safeTokenTransfer(streamTokens.inSupplyToken, feeCollector, feeAmount);\\n\\n            // Handle pool creation if configured\\n            if (postStreamActions.poolInfo.poolOutSupplyAmount > 0) {\\n                // Calculate pool ratio\\n                Decimal memory poolRatio = DecimalMath.div(\\n                    DecimalMath.fromNumber(postStreamActions.poolInfo.poolOutSupplyAmount),\\n                    DecimalMath.fromNumber(streamState.outSupply)\\n                );\\n\\n                uint256 poolInSupplyAmount = StreamMathLib.calculatePoolAmount(creatorRevenue, poolRatio);\\n                uint256 poolOutSupplyAmount = postStreamActions.poolInfo.poolOutSupplyAmount;\\n                // Calculate remaining revenue\\n                creatorRevenue = creatorRevenue - poolInSupplyAmount;\\n\\n                // Create pool and add liquidity\\n                createPoolAndAddLiquidity(\\n                    streamTokens.inSupplyToken,\\n                    streamTokens.outSupplyToken,\\n                    poolInSupplyAmount,\\n                    poolOutSupplyAmount\\n                );\\n            }\\n\\n            // Handle vesting if enabled\\n            if (postStreamActions.creatorVesting.isVestingEnabled) {\\n                // Create vesting schedule\\n                (uint256 cliffTime, uint256 endTime) = StreamMathLib.calculateVestingSchedule(\\n                    block.timestamp,\\n                    postStreamActions.creatorVesting.cliffDuration,\\n                    postStreamActions.creatorVesting.vestingDuration\\n                );\\n                createVesting(\\n                    creator,\\n                    streamTokens.inSupplyToken,\\n                    params.vestingAddress,\\n                    creatorRevenue,\\n                    cliffTime,\\n                    endTime\\n                );\\n            } else {\\n                // Transfer creator revenue to creator\\n                TokenHelpers.safeTokenTransfer(streamTokens.inSupplyToken, creator, creatorRevenue);\\n            }\\n\\n            // Update status\\n            status = StreamTypes.Status.FinalizedStreamed;\\n\\n            // Refund out tokens to creator if left any\\n            if (state.outRemaining > 0) {\\n                TokenHelpers.safeTokenTransfer(streamTokens.outSupplyToken, creator, state.outRemaining);\\n            }\\n\\n            emit FinalizedStreamed(address(this), creator, creatorRevenue, feeAmount, state.outRemaining);\\n        } else {\\n            // Update status\\n            status = StreamTypes.Status.FinalizedRefunded;\\n\\n            // Refund out tokens to creator\\n            TokenHelpers.safeTokenTransfer(streamTokens.outSupplyToken, creator, state.outSupply);\\n\\n            emit FinalizedRefunded(address(this), creator, state.outSupply);\\n        }\\n\\n        // Save everything\\n        saveStreamStatus(status);\\n        saveStream(state);\\n    }\\n\\n    function syncStreamExternal() external {\\n        // Load, update and save stream state\\n        StreamTypes.StreamState memory state = loadStream();\\n        StreamTypes.StreamTimes memory times = loadStreamTimes();\\n        state = syncStream(state);\\n        saveStream(state);\\n\\n        // Load, update and save status\\n        StreamTypes.Status status = loadStreamStatus();\\n        status = syncStreamStatus(status, times, block.timestamp);\\n        saveStreamStatus(status);\\n\\n        emit StreamSynced(\\n            address(this),\\n            state.lastUpdated,\\n            uint8(status),\\n            state.distIndex.value,\\n            state.outRemaining,\\n            state.inSupply,\\n            state.spentIn,\\n            state.currentStreamedPrice.value\\n        );\\n    }\\n\\n    function syncPositionExternal(address user) external {\\n        PositionTypes.Position memory position = loadPosition(user);\\n        validatePosition(position, user);\\n        StreamTypes.StreamState memory state = loadStream();\\n        state = syncStream(state);\\n        position = StreamMathLib.syncPosition(position, state.distIndex, state.shares, state.inSupply, block.timestamp);\\n        savePosition(user, position);\\n        saveStream(state);\\n        emit PositionSynced(\\n            address(this),\\n            user,\\n            position.inBalance,\\n            position.shares,\\n            position.lastUpdateTime,\\n            position.spentIn,\\n            position.purchased,\\n            position.index.value\\n        );\\n    }\\n\\n    function cancelStream() external {\\n        validateIsCreator();\\n\\n        // Load and update status\\n        StreamTypes.Status status = loadStreamStatus();\\n        StreamTypes.StreamTimes memory times = loadStreamTimes();\\n        status = syncStreamStatus(status, times, block.timestamp);\\n\\n        // Check if operation is allowed\\n        StreamTypes.Status[] memory allowedStatuses = new StreamTypes.Status[](1);\\n        allowedStatuses[0] = StreamTypes.Status.Waiting;\\n        validateOperationAllowed(status, allowedStatuses);\\n\\n        // Refund out tokens to creator\\n        TokenHelpers.safeTokenTransfer(streamTokens.outSupplyToken, creator, streamState.outSupply);\\n\\n        // Update status\\n        status = StreamTypes.Status.Cancelled;\\n        saveStreamStatus(status);\\n\\n        emit StreamCancelled(address(this), creator, streamState.outSupply, uint8(status));\\n    }\\n\\n    function cancelWithAdmin() external {\\n        validateIsProtocolAdmin();\\n\\n        // Load and update status\\n        StreamTypes.Status status = loadStreamStatus();\\n        StreamTypes.StreamTimes memory times = loadStreamTimes();\\n        status = syncStreamStatus(status, times, block.timestamp);\\n\\n        // Check if operation is allowed\\n        StreamTypes.Status[] memory allowedStatuses = new StreamTypes.Status[](3);\\n        allowedStatuses[0] = StreamTypes.Status.Waiting;\\n        allowedStatuses[1] = StreamTypes.Status.Bootstrapping;\\n        allowedStatuses[2] = StreamTypes.Status.Active;\\n        validateOperationAllowed(status, allowedStatuses);\\n\\n        // Refund out tokens to creator\\n        TokenHelpers.safeTokenTransfer(streamTokens.outSupplyToken, creator, streamState.outSupply);\\n\\n        // Update status\\n        status = StreamTypes.Status.Cancelled;\\n        saveStreamStatus(status);\\n\\n        emit StreamCancelled(address(this), creator, streamState.outSupply, uint8(status));\\n    }\\n\\n    // Load helpers\\n    function loadStream() internal view returns (StreamTypes.StreamState memory) {\\n        return streamState;\\n    }\\n\\n    function loadStreamStatus() internal view returns (StreamTypes.Status) {\\n        return streamStatus;\\n    }\\n\\n    function loadPosition(address user) internal view returns (PositionTypes.Position memory) {\\n        PositionStorage positionStorage = PositionStorage(positionStorageAddress);\\n        return positionStorage.getPosition(user);\\n    }\\n\\n    function loadStreamTimes() internal view returns (StreamTypes.StreamTimes memory) {\\n        return streamTimes;\\n    }\\n\\n    // Save helpers\\n    function saveStream(StreamTypes.StreamState memory state) internal {\\n        streamState = state;\\n    }\\n\\n    function saveStreamStatus(StreamTypes.Status status) internal {\\n        streamStatus = status;\\n    }\\n\\n    function savePosition(address user, PositionTypes.Position memory position) internal {\\n        PositionStorage positionStorage = PositionStorage(positionStorageAddress);\\n        positionStorage.updatePosition(user, position);\\n    }\\n\\n    function syncStreamStatus(\\n        StreamTypes.Status status,\\n        StreamTypes.StreamTimes memory times,\\n        uint256 nowTime\\n    ) internal pure returns (StreamTypes.Status) {\\n        status = StreamMathLib.calculateStreamStatus(\\n            status,\\n            nowTime,\\n            times.bootstrappingStartTime,\\n            times.streamStartTime,\\n            times.streamEndTime\\n        );\\n\\n        return status;\\n    }\\n\\n    /**\\n     * @dev Get the current stream status\\n     * @return The current stream status\\n     */\\n    function getStreamStatus() external view returns (StreamTypes.Status) {\\n        return streamStatus;\\n    }\\n\\n    /**\\n     * @dev Get the current stream state\\n     * @return The current stream state\\n     */\\n    function getStreamState() external view returns (StreamTypes.StreamState memory) {\\n        return streamState;\\n    }\\n\\n    function getPosition(address user) external view returns (PositionTypes.Position memory) {\\n        PositionStorage positionStorage = PositionStorage(positionStorageAddress);\\n        return positionStorage.getPosition(user);\\n    }\\n\\n    function createPoolAndAddLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired\\n    ) internal {\\n        StreamFactory factoryContract = StreamFactory(streamFactoryAddress);\\n        StreamFactoryTypes.Params memory params = factoryContract.getParams();\\n\\n        address poolWrapperAddress = params.poolWrapperAddress;\\n        IPoolWrapper poolWrapper = IPoolWrapper(poolWrapperAddress);\\n\\n        PoolWrapperTypes.CreatePoolMsg memory createPoolMsg = PoolWrapperTypes.CreatePoolMsg({\\n            token0: tokenA,\\n            token1: tokenB,\\n            amount0: amountADesired,\\n            amount1: amountBDesired\\n        });\\n        poolWrapper.createPool(createPoolMsg);\\n\\n        // Transfer pool tokens to stream\\n        TokenHelpers.safeTokenTransfer(tokenA, poolWrapperAddress, amountADesired);\\n        TokenHelpers.safeTokenTransfer(tokenB, poolWrapperAddress, amountBDesired);\\n    }\\n\\n    function createVesting(\\n        address beneficiary,\\n        address token,\\n        address vestingAddress,\\n        uint256 amount,\\n        uint256 cliffTime,\\n        uint256 endTime\\n    ) internal {\\n        IVesting vesting = IVesting(vestingAddress);\\n        TokenHelpers.safeTokenTransfer(token, vestingAddress, amount);\\n        vesting.stakeFunds(beneficiary, token, cliffTime, endTime, amount);\\n    }\\n}\\n\",\"keccak256\":\"0xda050a82ea209abbd3503658c512e362e398ea6e4954e896fe01c2e4bf9bd692\",\"license\":\"MIT\"},\"contracts/StreamFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\nimport \\\"./interfaces/IStreamEvents.sol\\\";\\nimport \\\"./interfaces/IStreamFactoryErrors.sol\\\";\\nimport \\\"./Vesting.sol\\\";\\nimport \\\"./types/StreamTypes.sol\\\";\\nimport \\\"./interfaces/IStream.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\nimport \\\"./types/StreamFactoryTypes.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\nimport \\\"./storage/PositionStorage.sol\\\";\\n\\ncontract StreamFactory is IStreamEvents, IStreamFactoryErrors {\\n    mapping(address => bool) public acceptedInSupplyTokens;\\n\\n    address public constant NATIVE_TOKEN = address(0);\\n\\n    uint16 public currentStreamId;\\n\\n    StreamFactoryTypes.Params public params;\\n    mapping(uint16 => address) public streamAddresses;\\n\\n    bool public frozen;\\n    bool public initialized;\\n\\n    constructor(address _protocolAdmin) {\\n        if (_protocolAdmin == address(0)) revert InvalidProtocolAdmin();\\n        params.protocolAdmin = _protocolAdmin;\\n    }\\n\\n    // Only once\\n    modifier onlyOnce() {\\n        require(!initialized, \\\"Already initialized\\\");\\n        _;\\n        initialized = true;\\n    }\\n\\n    function initialize(\\n        StreamFactoryTypes.initializeStreamMessage memory initializeStreamMessage\\n    ) external onlyAdmin onlyOnce {\\n        if (DecimalMath.gt(initializeStreamMessage.exitFeeRatio, DecimalMath.fromNumber(1)))\\n            revert InvalidExitFeeRatio();\\n\\n        // Deploy vesting contract\\n        Vesting vesting = new Vesting();\\n        emit VestingContractDeployed(address(this), address(vesting));\\n\\n        params.streamCreationFee = initializeStreamMessage.streamCreationFee;\\n        params.streamCreationFeeToken = initializeStreamMessage.streamCreationFeeToken;\\n        params.exitFeeRatio = initializeStreamMessage.exitFeeRatio;\\n        params.minWaitingDuration = initializeStreamMessage.minWaitingDuration;\\n        params.minBootstrappingDuration = initializeStreamMessage.minBootstrappingDuration;\\n        params.minStreamDuration = initializeStreamMessage.minStreamDuration;\\n        params.feeCollector = initializeStreamMessage.feeCollector;\\n        params.tosVersion = initializeStreamMessage.tosVersion;\\n        params.vestingAddress = address(vesting);\\n        params.poolWrapperAddress = initializeStreamMessage.poolWrapperAddress;\\n        params.streamImplementationAddress = initializeStreamMessage.streamImplementationAddress;\\n        // Set accepted tokens\\n        for (uint i = 0; i < initializeStreamMessage.acceptedInSupplyTokens.length; i++) {\\n            acceptedInSupplyTokens[initializeStreamMessage.acceptedInSupplyTokens[i]] = true;\\n        }\\n        emit FactoryInitialized(\\n            address(this),\\n            initializeStreamMessage.streamImplementationAddress,\\n            initializeStreamMessage.poolWrapperAddress,\\n            initializeStreamMessage.feeCollector,\\n            initializeStreamMessage.protocolAdmin,\\n            initializeStreamMessage.streamCreationFeeToken,\\n            initializeStreamMessage.streamCreationFee,\\n            initializeStreamMessage.exitFeeRatio.value,\\n            initializeStreamMessage.minWaitingDuration,\\n            initializeStreamMessage.minBootstrappingDuration,\\n            initializeStreamMessage.minStreamDuration,\\n            initializeStreamMessage.tosVersion,\\n            address(vesting)\\n        );\\n    }\\n\\n    modifier onlyAdmin() {\\n        if (msg.sender != params.protocolAdmin) revert NotAdmin();\\n        _;\\n    }\\n\\n    function updateParams(\\n        uint256 _streamCreationFee,\\n        Decimal memory _exitFeeRatio,\\n        uint256 _minWaitingDuration,\\n        uint256 _minBootstrappingDuration,\\n        uint256 _minStreamDuration,\\n        string memory _tosVersion\\n    ) external onlyAdmin {\\n        params.streamCreationFee = _streamCreationFee;\\n        params.exitFeeRatio = _exitFeeRatio;\\n        params.minWaitingDuration = _minWaitingDuration;\\n        params.minBootstrappingDuration = _minBootstrappingDuration;\\n        params.minStreamDuration = _minStreamDuration;\\n        params.tosVersion = _tosVersion;\\n\\n        emit ParamsUpdated(\\n            address(this),\\n            _streamCreationFee,\\n            _exitFeeRatio.value,\\n            _minWaitingDuration,\\n            _minBootstrappingDuration,\\n            _minStreamDuration,\\n            _tosVersion\\n        );\\n    }\\n\\n    function updateFeeCollector(address _feeCollector) external onlyAdmin {\\n        if (_feeCollector == address(0)) revert InvalidFeeCollector();\\n        params.feeCollector = _feeCollector;\\n        emit FeeCollectorUpdated(address(this), _feeCollector);\\n    }\\n\\n    function updateProtocolAdmin(address _protocolAdmin) external onlyAdmin {\\n        if (_protocolAdmin == address(0)) revert InvalidProtocolAdmin();\\n        params.protocolAdmin = _protocolAdmin;\\n        emit ProtocolAdminUpdated(address(this), _protocolAdmin);\\n    }\\n\\n    function updateAcceptedTokens(\\n        address[] calldata tokens_to_add,\\n        address[] calldata tokens_to_remove\\n    ) external onlyAdmin {\\n        for (uint i = 0; i < tokens_to_add.length; i++) {\\n            acceptedInSupplyTokens[tokens_to_add[i]] = true;\\n        }\\n        for (uint i = 0; i < tokens_to_remove.length; i++) {\\n            acceptedInSupplyTokens[tokens_to_remove[i]] = false;\\n        }\\n        emit AcceptedTokensUpdated(address(this), tokens_to_add, tokens_to_remove);\\n    }\\n\\n    function updatePoolWrapper(address _poolWrapper) external onlyAdmin {\\n        if (_poolWrapper == address(0)) revert InvalidPoolWrapper();\\n        params.poolWrapperAddress = _poolWrapper;\\n        emit PoolWrapperUpdated(address(this), _poolWrapper);\\n    }\\n\\n    function createStream(StreamTypes.createStreamMessage memory createStreamMessage) external payable {\\n        // Check if contract is accepting new streams (not frozen)\\n        if (frozen) revert ContractFrozen();\\n        // Validate input parameters\\n        if (createStreamMessage.streamOutAmount == 0) revert ZeroOutSupplyNotAllowed();\\n        if (!acceptedInSupplyTokens[createStreamMessage.inSupplyToken]) revert StreamInputTokenNotAccepted();\\n\\n        // Validate time parameters using validateStreamTimes\\n        validateStreamTimes(\\n            block.timestamp,\\n            createStreamMessage.bootstrappingStartTime,\\n            createStreamMessage.streamStartTime,\\n            createStreamMessage.streamEndTime\\n        );\\n\\n        // Validate TOS version\\n        if (\\n            keccak256(abi.encodePacked(createStreamMessage.tosVersion)) !=\\n            keccak256(abi.encodePacked(params.tosVersion))\\n        ) revert InvalidToSVersion();\\n\\n        // Load creation fee\\n        uint256 creationFee = params.streamCreationFee;\\n        if (creationFee > 0) {\\n            if (params.streamCreationFeeToken == address(0)) {\\n                // Native token\\n                if (msg.value < creationFee) revert InsufficientNativeToken();\\n                // Transfer fee to fee collector\\n                if (!payable(params.feeCollector).send(creationFee)) revert FeeTransferFailed();\\n            } else {\\n                // ERC20 token\\n                if (\\n                    !IERC20(params.streamCreationFeeToken).transferFrom(\\n                        msg.sender,\\n                        address(params.feeCollector),\\n                        creationFee\\n                    )\\n                ) revert TokenTransferFailed();\\n            }\\n        }\\n\\n        // Clone stream contract\\n        address clone = Clones.clone(params.streamImplementationAddress);\\n        IStream stream = IStream(clone);\\n\\n        // Deploy PositionStorage\\n        PositionStorage positionStorage = new PositionStorage(address(stream));\\n\\n        // Transfer tokens before initialization\\n        if (\\n            !IERC20(createStreamMessage.outSupplyToken).transferFrom(\\n                msg.sender,\\n                address(stream),\\n                createStreamMessage.streamOutAmount + createStreamMessage.poolInfo.poolOutSupplyAmount\\n            )\\n        ) revert TokenTransferFailed();\\n\\n        // Initialize the cloned stream\\n        stream.initialize(createStreamMessage, address(positionStorage));\\n\\n        // Store stream address\\n        streamAddresses[currentStreamId] = address(stream);\\n\\n        emit StreamCreated(\\n            address(this),\\n            createStreamMessage.outSupplyToken,\\n            createStreamMessage.inSupplyToken,\\n            address(stream),\\n            address(positionStorage),\\n            createStreamMessage.streamOutAmount,\\n            createStreamMessage.bootstrappingStartTime,\\n            createStreamMessage.streamStartTime,\\n            createStreamMessage.streamEndTime,\\n            createStreamMessage.threshold,\\n            createStreamMessage.metadata.ipfsHash,\\n            params.tosVersion,\\n            currentStreamId\\n        );\\n        currentStreamId++;\\n    }\\n\\n    function getStreams() external view returns (address[] memory) {\\n        address[] memory streams = new address[](currentStreamId);\\n        for (uint16 i = 0; i < currentStreamId; i++) {\\n            streams[i] = streamAddresses[i];\\n        }\\n        return streams;\\n    }\\n\\n    function getStream(uint16 _streamId) external view returns (address) {\\n        return streamAddresses[_streamId];\\n    }\\n\\n    function isStream(address _streamAddress) external view returns (bool) {\\n        for (uint16 i = 0; i < currentStreamId; i++) {\\n            if (streamAddresses[i] == _streamAddress) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function getParams() external view returns (StreamFactoryTypes.Params memory) {\\n        return params;\\n    }\\n\\n    function isAcceptedInSupplyToken(address token) public view returns (bool) {\\n        return acceptedInSupplyTokens[token];\\n    }\\n\\n    function getAcceptedInSupplyTokens() external view returns (address[] memory) {\\n        address[] memory tokens = new address[](currentStreamId);\\n        for (uint16 i = 0; i < currentStreamId; i++) {\\n            if (acceptedInSupplyTokens[streamAddresses[i]]) {\\n                tokens[i] = streamAddresses[i];\\n            }\\n        }\\n        return tokens;\\n    }\\n\\n    function setFrozen(bool _frozen) external onlyAdmin {\\n        frozen = _frozen;\\n        emit FrozenStateUpdated(address(this), _frozen);\\n    }\\n\\n    function validateStreamTimes(\\n        uint256 nowTime,\\n        uint256 _bootstrappingStartTime,\\n        uint256 _startTime,\\n        uint256 _endTime\\n    ) internal view {\\n        if (nowTime > _bootstrappingStartTime) revert InvalidBootstrappingStartTime();\\n        if (_bootstrappingStartTime > _startTime) revert InvalidStreamStartTime();\\n        if (_startTime > _endTime) revert InvalidStreamEndTime();\\n        if (_endTime - _startTime < params.minStreamDuration) revert StreamDurationTooShort();\\n        if (_startTime - _bootstrappingStartTime < params.minBootstrappingDuration)\\n            revert BootstrappingDurationTooShort();\\n        if (_bootstrappingStartTime - nowTime < params.minWaitingDuration) revert WaitingDurationTooShort();\\n    }\\n\\n    function setImplementation(address _implementation) external onlyAdmin {\\n        if (_implementation == address(0)) revert InvalidImplementationAddress();\\n\\n        params.streamImplementationAddress = _implementation;\\n    }\\n\\n    function setStreamCreationFee(uint256 _fee) external onlyAdmin {\\n        params.streamCreationFee = _fee;\\n    }\\n\\n    function setStreamCreationFeeToken(address _token) external onlyAdmin {\\n        params.streamCreationFeeToken = _token;\\n    }\\n\\n    function setExitFeeRatio(Decimal memory _ratio) external onlyAdmin {\\n        if (DecimalMath.gt(_ratio, DecimalMath.fromNumber(1))) revert InvalidExitFeeRatio();\\n        params.exitFeeRatio = _ratio;\\n    }\\n}\\n\",\"keccak256\":\"0xa8b8c62228b32649b63841b68a3c06ef09c039319d667433127d7c5b383f236d\",\"license\":\"MIT\"},\"contracts/Vesting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"./interfaces/IERC20.sol\\\";\\n\\ncontract Vesting {\\n    struct VestingSchedule {\\n        uint256 cliffTime;\\n        uint256 endTime;\\n        uint256 totalAmount;\\n        uint256 releasedAmount;\\n    }\\n\\n    mapping(address => mapping(address => VestingSchedule[])) private tokenVestings;\\n\\n    event FundsStaked(\\n        address indexed beneficiary,\\n        address indexed token,\\n        uint256 totalAmount,\\n        uint256 cliffTime,\\n        uint256 endTime\\n    );\\n\\n    event FundsWithdrawn(address indexed beneficiary, address indexed token, uint256 scheduleIndex, uint256 amount);\\n\\n    function stakeFunds(\\n        address beneficiary,\\n        address tokenAddress,\\n        uint256 cliffTime,\\n        uint256 endTime,\\n        uint256 totalAmount\\n    ) external {\\n        require(cliffTime >= block.timestamp, \\\"Cliff time must be in the future\\\");\\n        require(endTime > cliffTime, \\\"End time must be after cliff time\\\");\\n        require(totalAmount > 0, \\\"Total amount must be greater than zero\\\");\\n\\n        require(IERC20(tokenAddress).transferFrom(msg.sender, address(this), totalAmount), \\\"Token transfer failed\\\");\\n\\n        VestingSchedule[] storage vestingSchedules = tokenVestings[beneficiary][tokenAddress];\\n        vestingSchedules.push(VestingSchedule(cliffTime, endTime, totalAmount, 0));\\n\\n        emit FundsStaked(beneficiary, tokenAddress, totalAmount, cliffTime, endTime);\\n    }\\n\\n    function withdrawFunds(address tokenAddress, uint256 scheduleIndex) external {\\n        VestingSchedule[] storage vestingSchedules = tokenVestings[msg.sender][tokenAddress];\\n        require(scheduleIndex < vestingSchedules.length, \\\"Invalid schedule index\\\");\\n\\n        VestingSchedule storage vestingSchedule = vestingSchedules[scheduleIndex];\\n        require(vestingSchedule.cliffTime <= block.timestamp, \\\"Funds are still in the cliff period\\\");\\n\\n        uint256 withdrawableAmount = calculateWithdrawableAmount(vestingSchedule);\\n        require(withdrawableAmount > 0, \\\"No funds available for withdrawal\\\");\\n\\n        vestingSchedule.releasedAmount += withdrawableAmount;\\n\\n        require(IERC20(tokenAddress).transfer(msg.sender, withdrawableAmount), \\\"Token transfer failed\\\");\\n\\n        emit FundsWithdrawn(msg.sender, tokenAddress, scheduleIndex, withdrawableAmount);\\n\\n        if (vestingSchedule.releasedAmount == vestingSchedule.totalAmount) {\\n            delete vestingSchedules[scheduleIndex];\\n        }\\n    }\\n\\n    function getStakesForBeneficiary(\\n        address beneficiary,\\n        address tokenAddress\\n    ) external view returns (VestingSchedule[] memory) {\\n        return tokenVestings[beneficiary][tokenAddress];\\n    }\\n\\n    function calculateWithdrawableAmount(VestingSchedule storage vestingSchedule) private view returns (uint256) {\\n        uint256 elapsedTime = block.timestamp - vestingSchedule.cliffTime;\\n\\n        if (elapsedTime >= vestingSchedule.endTime - vestingSchedule.cliffTime) {\\n            // Can now access all of the funds minus any that have already been claimed\\n            return vestingSchedule.totalAmount - vestingSchedule.releasedAmount;\\n        } else {\\n            // Calculate what proportion of funds is now available and only return that amount\\n\\n            // How long is the unlock period\\n            uint256 totalUnlockPeriod = vestingSchedule.endTime - vestingSchedule.cliffTime;\\n\\n            // How much should have been unlocked so far\\n            uint256 totalAmountAccessible = (vestingSchedule.totalAmount / totalUnlockPeriod) * elapsedTime;\\n\\n            // Amount available to withdraw is the currently unlocked amount minus anything\\n            // that has already been claimed to prevent repeat counting funds\\n            uint256 actualAccessible = totalAmountAccessible - vestingSchedule.releasedAmount;\\n\\n            return actualAccessible;\\n        }\\n    }\\n\\n    function getBlockTime() external view returns (uint256) {\\n        return block.timestamp;\\n    }\\n}\\n\",\"keccak256\":\"0x87bedfc5ad73e53cd4fe9877e7a7e5e9bf7fa8305ab9e01035f946cd93485f21\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\ninterface IERC20 {\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x5bc9a2a424370ebcf139f2ec42a84672249d81d0d0f20b6d6ce13f58ec5b4138\",\"license\":\"MIT\"},\"contracts/interfaces/IPoolWrapper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"../types/PoolWrapperTypes.sol\\\";\\n\\ninterface IPoolWrapper {\\n    function createPool(\\n        PoolWrapperTypes.CreatePoolMsg calldata createPoolMsg\\n    ) external returns (PoolWrapperTypes.CreatedPoolInfo memory);\\n\\n    function getPoolInfo(address stream) external view returns (PoolWrapperTypes.CreatedPoolInfo memory);\\n}\\n\",\"keccak256\":\"0x2bffc730755204dbc9ae3a4fd97d90aef09c200c2f40d23b510b598089a3d2c5\",\"license\":\"MIT\"},\"contracts/interfaces/IPositionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"../types/PositionTypes.sol\\\";\\nimport \\\"../lib/math/DecimalMath.sol\\\";\\n\\ninterface IPositionStorage {\\n    function getPosition(address _owner) external view returns (PositionTypes.Position memory);\\n\\n    function createPosition(address owner, uint256 inBalance, uint256 shares, Decimal memory index) external;\\n\\n    function updatePosition(address owner, PositionTypes.Position memory position) external;\\n\\n    function setExitDate(address owner, uint256 exitDate) external;\\n}\\n\",\"keccak256\":\"0x386ad6591db4d63b07f86e6701f0c3d579992fe0a51d60729312b35347212315\",\"license\":\"MIT\"},\"contracts/interfaces/IStream.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"../types/StreamTypes.sol\\\";\\nimport \\\"../types/PositionTypes.sol\\\";\\n\\ninterface IStream {\\n    function initialize(\\n        StreamTypes.createStreamMessage memory createStreamMessage,\\n        address positionStorageAddress\\n    ) external;\\n\\n    function withdraw(uint256 cap) external;\\n\\n    function subscribe(uint256 amountIn) external payable;\\n\\n    function exitStream() external;\\n\\n    function finalizeStream() external;\\n\\n    function syncStreamExternal() external;\\n\\n    function syncPositionExternal(address user) external;\\n\\n    function cancelStream() external;\\n\\n    function cancelWithAdmin() external;\\n\\n    // View functions\\n    function getStreamStatus() external view returns (StreamTypes.Status);\\n\\n    function getStreamState() external view returns (StreamTypes.StreamState memory);\\n\\n    function getPosition(address user) external view returns (PositionTypes.Position memory);\\n\\n    // State variables getters (since they're public)\\n    function creator() external view returns (address);\\n\\n    function positionStorageAddress() external view returns (address);\\n\\n    function streamFactoryAddress() external view returns (address);\\n}\\n\",\"keccak256\":\"0xe101806b2a8eeefb7887fa7294fe3efdb1d8d329b2c321a5e00bd65ffa3bec08\",\"license\":\"MIT\"},\"contracts/interfaces/IStreamErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\ninterface IStreamErrors {\\n    // Stream errors\\n    error InsufficientTokenPayment(uint256 requiredTokenAmount, uint256 tokenBalance);\\n    error InvalidOutSupplyToken();\\n    error InvalidInSupplyToken();\\n    error PaymentFailed();\\n    error OperationNotAllowed();\\n    error Unauthorized();\\n    error InvalidWithdrawAmount();\\n    error WithdrawAmountExceedsBalance(uint256 cap);\\n    error InsufficientOutAmount();\\n    error InvalidPosition(address user, uint256 shares, uint256 exitDate, string reason);\\n    error InvalidExitCondition();\\n    error InvalidVestingDuration();\\n    error InvalidVestingCliffDuration();\\n    error InvalidAmount();\\n    error StreamFactoryAddressAlreadySet();\\n    error InvalidStreamFactoryAddress();\\n    error InvalidImplementationAddress();\\n}\\n\",\"keccak256\":\"0xc12fdaf8819ca268d9357bf21b9ab2f436cd94b82e3ad1cfb04b0764929315c4\",\"license\":\"MIT\"},\"contracts/interfaces/IStreamEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"../types/StreamTypes.sol\\\";\\nimport \\\"../lib/math/DecimalMath.sol\\\";\\n\\ninterface IStreamEvents {\\n    event StreamCreated(\\n        address indexed streamFactoryAddress,\\n        address streamOutToken,\\n        address streamInToken,\\n        address streamAddress,\\n        address positionStorageAddress,\\n        uint256 streamOutAmount,\\n        uint256 bootstrappingStartTime,\\n        uint256 streamStartTime,\\n        uint256 streamEndTime,\\n        uint256 threshold,\\n        string metadataIpfsHash,\\n        string tosVersion,\\n        uint16 streamId\\n    );\\n\\n    event StreamSynced(address indexed streamAddress, uint8 mainStatus, uint256 lastUpdated);\\n\\n    event StreamStateUpdated(\\n        address indexed streamAddress,\\n        uint256 lastUpdated,\\n        uint256 distIndex,\\n        uint256 outRemaining,\\n        uint256 inSupply,\\n        uint256 spentIn,\\n        uint256 currentStreamedPrice\\n    );\\n\\n    event Subscribed(\\n        address indexed streamAddress,\\n        address indexed subscriber,\\n        uint256 positionInBalance,\\n        uint256 positionShares,\\n        uint256 positionLastUpdateTime,\\n        uint256 positionSpentIn,\\n        uint256 positionPurchased,\\n        uint256 positionIndex,\\n        uint256 streamInSupply,\\n        uint256 streamShares\\n    );\\n\\n    event StreamSynced(\\n        address indexed streamAddress,\\n        uint256 lastUpdated,\\n        uint8 newStatus,\\n        uint256 distIndex,\\n        uint256 outRemaining,\\n        uint256 inSupply,\\n        uint256 spentIn,\\n        uint256 currentStreamedPrice\\n    );\\n\\n    event PositionSynced(\\n        address indexed streamAddress,\\n        address indexed subscriber,\\n        uint256 positionInBalance,\\n        uint256 positionShares,\\n        uint256 positionLastUpdateTime,\\n        uint256 positionSpentIn,\\n        uint256 positionPurchased,\\n        uint256 positionIndex\\n    );\\n\\n    event Withdrawn(\\n        address indexed streamAddress,\\n        address indexed subscriber,\\n        uint256 positionInBalance,\\n        uint256 positionShares,\\n        uint256 positionLastUpdateTime,\\n        uint256 positionSpentIn,\\n        uint256 positionPurchased,\\n        uint256 positionIndex,\\n        uint256 streamInSupply,\\n        uint256 streamShares\\n    );\\n\\n    event ExitRefunded(\\n        address indexed streamAddress,\\n        address indexed subscriber,\\n        uint256 refundedAmount,\\n        uint256 exitTimestamp\\n    );\\n    event ExitStreamed(\\n        address indexed streamAddress,\\n        address indexed subscriber,\\n        uint256 purchased,\\n        uint256 spentIn,\\n        uint256 exitTimestamp\\n    );\\n\\n    event FinalizedStreamed(\\n        address indexed streamAddress,\\n        address indexed creator,\\n        uint256 creatorRevenue,\\n        uint256 exitFeeAmount,\\n        uint256 refundedOutAmount\\n    );\\n\\n    event FinalizedRefunded(address indexed streamAddress, address indexed creator, uint256 refundedOutAmount);\\n\\n    event FactoryInitialized(\\n        address indexed factory,\\n        address streamImplementationAddress,\\n        address poolWrapperAddress,\\n        address feeCollector,\\n        address protocolAdmin,\\n        address streamCreationFeeToken,\\n        uint256 streamCreationFee,\\n        uint256 exitFeeRatio,\\n        uint256 minWaitingDuration,\\n        uint256 minBootstrappingDuration,\\n        uint256 minStreamDuration,\\n        string tosVersion,\\n        address vestingAddress\\n    );\\n\\n    event ParamsUpdated(\\n        address indexed factory,\\n        uint256 streamCreationFee,\\n        uint256 exitFeeRatio,\\n        uint256 minWaitingDuration,\\n        uint256 minBootstrappingDuration,\\n        uint256 minStreamDuration,\\n        string tosVersion\\n    );\\n\\n    event FeeCollectorUpdated(address indexed factory, address newFeeCollector);\\n\\n    event ProtocolAdminUpdated(address indexed factory, address newProtocolAdmin);\\n\\n    event FrozenStateUpdated(address indexed factory, bool frozen);\\n\\n    event AcceptedTokensUpdated(address indexed factory, address[] tokensAdded, address[] tokensRemoved);\\n\\n    event StreamCancelled(address indexed streamAddress, address creator, uint256 outSupply, uint8 status);\\n\\n    event VestingContractDeployed(address indexed factoryAddress, address vestingContract);\\n\\n    event PoolWrapperUpdated(address indexed factoryAddress, address poolWrapper);\\n}\\n\",\"keccak256\":\"0x19d3f7640ba6fbabdf146d3ee3be08f5a0551ad474f0d5469065796ddea2a898\",\"license\":\"MIT\"},\"contracts/interfaces/IStreamFactoryErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\n// StreamFactory errors\\ninterface IStreamFactoryErrors {\\n    // StreamFactory errors\\n    error InvalidBootstrappingStartTime();\\n    error InvalidStreamStartTime();\\n    error InvalidStreamEndTime();\\n    error StreamDurationTooShort();\\n    error BootstrappingDurationTooShort();\\n    error WaitingDurationTooShort();\\n    error ContractFrozen();\\n    error InvalidExitFeeRatio();\\n    error ZeroOutSupplyNotAllowed();\\n    error StreamInputTokenNotAccepted();\\n    error InvalidBootstrappingTime();\\n    error StreamStartMustBeAfterBootstrapping();\\n    error StreamEndMustBeAfterStart();\\n    error InvalidToSVersion();\\n    error InsufficientNativeToken();\\n    error FeeTransferFailed();\\n    error TokenTransferFailed();\\n    error StreamAddressPredictionFailed();\\n    error InvalidFeeCollector();\\n    error InvalidProtocolAdmin();\\n    error NotAdmin();\\n    error InvalidPoolWrapper();\\n    error InvalidImplementationAddress();\\n}\\n\",\"keccak256\":\"0x3e25ca293a17bc04c5567618f14e0ff791ef5866ca457aa95a0fc6cc63f45a9e\",\"license\":\"MIT\"},\"contracts/interfaces/IVesting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\n/**\\n * @title IVesting\\n * @dev Interface for the Vesting contract that manages token vesting schedules\\n */\\ninterface IVesting {\\n    /**\\n     * @dev Struct representing a vesting schedule for a beneficiary\\n     */\\n    struct VestingSchedule {\\n        uint256 cliffTime; // Timestamp when cliff period ends\\n        uint256 endTime; // Timestamp when vesting period ends\\n        uint256 totalAmount; // Total amount to be vested\\n        uint256 releasedAmount; // Amount already released to beneficiary\\n    }\\n\\n    /**\\n     * @dev Stakes funds for vesting to a beneficiary\\n     * @param beneficiary Address that will receive the vested tokens\\n     * @param tokenAddress Address of the token being vested\\n     * @param cliffTime Timestamp after which the first tokens can be withdrawn\\n     * @param endTime Timestamp when all tokens will be vested\\n     * @param totalAmount Total amount of tokens to vest\\n     */\\n    function stakeFunds(\\n        address beneficiary,\\n        address tokenAddress,\\n        uint256 cliffTime,\\n        uint256 endTime,\\n        uint256 totalAmount\\n    ) external;\\n\\n    /**\\n     * @dev Withdraws available vested funds for the caller\\n     * @param tokenAddress Address of the token to withdraw\\n     * @param scheduleIndex Index of the vesting schedule to withdraw from\\n     */\\n    function withdrawFunds(address tokenAddress, uint256 scheduleIndex) external;\\n\\n    /**\\n     * @dev Retrieves all vesting schedules for a beneficiary for a specific token\\n     * @param beneficiary Address of the beneficiary\\n     * @param tokenAddress Address of the token\\n     * @return Array of vesting schedules\\n     */\\n    function getStakesForBeneficiary(\\n        address beneficiary,\\n        address tokenAddress\\n    ) external view returns (VestingSchedule[] memory);\\n\\n    /**\\n     * @dev Calculates the amount available for withdrawal from a vesting schedule\\n     * @param vestingSchedule The vesting schedule to check\\n     * @return The withdrawable amount\\n     */\\n    function calculateWithdrawableAmount(VestingSchedule memory vestingSchedule) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x413cce156e5966f0f07d5353c3703da331f824ab6543136182682ac1ef33bb74\",\"license\":\"MIT\"},\"contracts/lib/helpers/TokenHelpers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"../../interfaces/IERC20.sol\\\";\\nimport \\\"../../interfaces/IStreamErrors.sol\\\";\\n\\nlibrary TokenHelpers {\\n    /**\\n     * @dev Checks if an address is a valid ERC20 token\\n     * @param tokenAddress The token address to validate\\n     * @param testAccount The account to use for testing the token interface\\n     * @return isValid True if the address implements the ERC20 interface\\n     */\\n    function isValidERC20(address tokenAddress, address testAccount) internal view returns (bool isValid) {\\n        if (tokenAddress == address(0)) {\\n            return false;\\n        }\\n\\n        try IERC20(tokenAddress).balanceOf(testAccount) returns (uint256) {\\n            return true;\\n        } catch {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Checks if an account has sufficient token balance\\n     * @param tokenAddress The ERC20 token address\\n     * @param account The account to check balance for\\n     * @param requiredAmount The minimum required balance\\n     * @return hasEnoughBalance True if the account has sufficient balance\\n     */\\n    function hasEnoughBalance(\\n        address tokenAddress,\\n        address account,\\n        uint256 requiredAmount\\n    ) internal view returns (bool) {\\n        try IERC20(tokenAddress).balanceOf(account) returns (uint256 balance) {\\n            return balance >= requiredAmount;\\n        } catch Error(string memory) {\\n            return false;\\n        } catch {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Safely transfers tokens from the contract to a recipient\\n     * @param tokenAddress Address of the token to transfer\\n     * @param recipient Address of the recipient\\n     * @param amount Amount of tokens to transfer\\n     */\\n    function safeTokenTransfer(address tokenAddress, address recipient, uint256 amount) internal {\\n        if (amount == 0 || recipient == address(0)) {\\n            return;\\n        }\\n\\n        IERC20 token = IERC20(tokenAddress);\\n        bool success = token.transfer(recipient, amount);\\n        if (!success) {\\n            revert IStreamErrors.PaymentFailed();\\n        }\\n    }\\n\\n    /**\\n     * @dev Safely approves a token allowance\\n     * @param tokenAddress The address of the token to approve\\n     * @param spender The address to approve the allowance to\\n     * @param amount The amount of tokens to approve\\n     */\\n    function safeTokenApprove(address tokenAddress, address spender, uint256 amount) internal {\\n        IERC20 token = IERC20(tokenAddress);\\n        bool success = token.approve(spender, amount);\\n        if (!success) {\\n            revert IStreamErrors.PaymentFailed();\\n        }\\n    }\\n\\n    /**\\n     * @dev Safely transfers tokens from one address to another\\n     * @param tokenAddress Address of the token to transfer\\n     * @param from Address to transfer from\\n     * @param to Address to transfer to\\n     * @param amount Amount of tokens to transfer\\n     * @return success True if the transfer was successful\\n     */\\n    function safeTransferFrom(\\n        address tokenAddress,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal returns (bool success) {\\n        if (amount == 0 || to == address(0)) {\\n            return true;\\n        }\\n\\n        IERC20 token = IERC20(tokenAddress);\\n        try token.transferFrom(from, to, amount) returns (bool result) {\\n            return result;\\n        } catch {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x683f8f8dca44e0e7297450425d966cb8c169e7f68de01bcbdc28ff615ddd6859\",\"license\":\"MIT\"},\"contracts/lib/math/DecimalMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\n/**\\n * @title Decimal type and math operations\\n * @dev Library for handling decimal math operations with fixed-point arithmetic\\n */\\n\\nstruct Decimal {\\n    uint256 value; // Value scaled by DECIMAL_PRECISION\\n}\\n\\n/**\\n * @title DecimalMath\\n * @dev Library for handling decimal math operations with fixed-point arithmetic\\n */\\nlibrary DecimalMath {\\n    // We'll use 6 decimal places for precision\\n    uint256 public constant DECIMAL_PRECISION = 1e6;\\n\\n    // Convert a regular number to a Decimal\\n    function fromNumber(uint256 value) internal pure returns (Decimal memory) {\\n        return Decimal({ value: value * DECIMAL_PRECISION });\\n    }\\n\\n    // Convert a Decimal to a regular number while keeping the remainder\\n    function toNumber(Decimal memory d) internal pure returns (uint256, Decimal memory) {\\n        return (d.value / DECIMAL_PRECISION, Decimal({ value: d.value % DECIMAL_PRECISION }));\\n    }\\n\\n    // Floor division for Decimal\\n    function floor(Decimal memory d) internal pure returns (uint256) {\\n        return d.value / DECIMAL_PRECISION;\\n    }\\n\\n    // Ceiling division for Decimal\\n    function ceil(Decimal memory d) internal pure returns (uint256) {\\n        return (d.value + DECIMAL_PRECISION - 1) / DECIMAL_PRECISION;\\n    }\\n\\n    // Multiply two Decimals\\n    function mul(Decimal memory a, Decimal memory b) internal pure returns (Decimal memory) {\\n        return Decimal({ value: (a.value * b.value) / DECIMAL_PRECISION });\\n    }\\n\\n    // Multiply Decimal by a scalar\\n    function mulScalar(Decimal memory a, uint256 scalar) internal pure returns (Decimal memory) {\\n        return Decimal({ value: a.value * scalar });\\n    }\\n\\n    // Divide two Decimals\\n    function div(Decimal memory a, Decimal memory b) internal pure returns (Decimal memory) {\\n        return Decimal({ value: (a.value * DECIMAL_PRECISION) / b.value });\\n    }\\n\\n    // Divide Decimal by a scalar\\n    function divScalar(Decimal memory a, uint256 scalar) internal pure returns (Decimal memory) {\\n        return Decimal({ value: a.value / scalar });\\n    }\\n\\n    // Add two Decimals\\n    function add(Decimal memory a, Decimal memory b) internal pure returns (Decimal memory) {\\n        return Decimal({ value: a.value + b.value });\\n    }\\n\\n    // Subtract two Decimals\\n    function sub(Decimal memory a, Decimal memory b) internal pure returns (Decimal memory) {\\n        return Decimal({ value: a.value - b.value });\\n    }\\n\\n    // From ratio to Decimal\\n    function fromRatio(uint256 num, uint256 denom) internal pure returns (Decimal memory) {\\n        return Decimal({ value: (num * DECIMAL_PRECISION) / denom });\\n    }\\n\\n    // > operator for Decimals\\n    function gt(Decimal memory a, Decimal memory b) internal pure returns (bool) {\\n        return a.value > b.value;\\n    }\\n\\n    // < operator for Decimals\\n    function lt(Decimal memory a, Decimal memory b) internal pure returns (bool) {\\n        return a.value < b.value;\\n    }\\n}\\n\",\"keccak256\":\"0x664491d1766944366e4a8ac0967b13fb7e5dbc8479fbd36b6472819d996c11d2\",\"license\":\"MIT\"},\"contracts/lib/math/StreamMathLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../types/StreamTypes.sol\\\";\\nimport \\\"./DecimalMath.sol\\\";\\nimport \\\"../../types/PositionTypes.sol\\\";\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\nlibrary StreamMathLib {\\n    /**\\n     * @dev Calculates the time difference ratio between current time and last updated time\\n     * @param currentTimestamp Current timestamp\\n     * @param streamStartTime Timestamp when the stream starts\\n     * @param streamEndTime Timestamp when the stream ends\\n     * @param lastUpdated Timestamp when the stream was last updated\\n     * @return The ratio of time elapsed since last update compared to total remaining time (scaled by 1e18)\\n     */\\n    function calculateDiff(\\n        uint256 currentTimestamp,\\n        uint256 streamStartTime,\\n        uint256 streamEndTime,\\n        uint256 lastUpdated\\n    ) internal pure returns (Decimal memory) {\\n        // If the stream is not started yet or already ended, return 0\\n        if (currentTimestamp < streamStartTime || lastUpdated >= streamEndTime) {\\n            return DecimalMath.fromNumber(0);\\n        }\\n\\n        // If lastUpdated is before start time, set it to start time\\n        uint256 effectiveLastUpdated = lastUpdated;\\n        if (effectiveLastUpdated < streamStartTime) {\\n            effectiveLastUpdated = streamStartTime;\\n        }\\n\\n        // If current time is past end time, use end time instead\\n        uint256 effectiveNow = currentTimestamp;\\n        if (effectiveNow > streamEndTime) {\\n            effectiveNow = streamEndTime;\\n        }\\n\\n        uint256 numerator = effectiveNow - effectiveLastUpdated;\\n        uint256 denominator = streamEndTime - effectiveLastUpdated;\\n\\n        if (denominator == 0 || numerator == 0) {\\n            return DecimalMath.fromNumber(0);\\n        }\\n        // Return ratio of time elapsed since last update compared to total remaining time\\n        return DecimalMath.fromRatio(numerator, denominator);\\n    }\\n\\n    /**\\n     * @dev Calculates the stream status based on the current state and timestamp\\n     * @param currentStatus Current status of the stream\\n     * @param currentTime Current timestamp to check against\\n     * @param bootstrappingStartTime Timestamp when bootstrapping phase starts\\n     * @param streamStartTime Timestamp when active streaming starts\\n     * @param streamEndTime Timestamp when streaming ends\\n     * @return IStreamTypes.Status The calculated stream status\\n     */\\n    function calculateStreamStatus(\\n        StreamTypes.Status currentStatus,\\n        uint256 currentTime,\\n        uint256 bootstrappingStartTime,\\n        uint256 streamStartTime,\\n        uint256 streamEndTime\\n    ) internal pure returns (StreamTypes.Status) {\\n        // Don't update if stream is in a final state\\n        if (\\n            currentStatus == StreamTypes.Status.Cancelled ||\\n            currentStatus == StreamTypes.Status.FinalizedRefunded ||\\n            currentStatus == StreamTypes.Status.FinalizedStreamed\\n        ) {\\n            return currentStatus;\\n        }\\n\\n        // Update status based on current timestamp\\n        if (currentTime < bootstrappingStartTime) {\\n            return StreamTypes.Status.Waiting;\\n        } else if (currentTime >= bootstrappingStartTime && currentTime < streamStartTime) {\\n            return StreamTypes.Status.Bootstrapping;\\n        } else if (currentTime >= streamStartTime && currentTime < streamEndTime) {\\n            return StreamTypes.Status.Active;\\n        } else if (currentTime >= streamEndTime) {\\n            return StreamTypes.Status.Ended;\\n        }\\n\\n        // This should never be reached, but return current status as fallback\\n        return currentStatus;\\n    }\\n\\n    /**\\n     * @dev Calculates updated stream state based on time difference\\n     * @param state Current stream state\\n     * @param diff Time difference in seconds\\n     * @return Updated stream state\\n     */\\n    function calculateUpdatedState(\\n        StreamTypes.StreamState memory state,\\n        Decimal memory diff\\n    ) internal pure returns (StreamTypes.StreamState memory) {\\n        // Create a copy of the state to avoid modifying the input\\n        StreamTypes.StreamState memory newState = state;\\n\\n        if (newState.shares > 0 && diff.value > 0) {\\n            // Calculate new distribution balance and spent in amount\\n            Decimal memory newDecimalDistributionBalance = DecimalMath.mul(\\n                DecimalMath.fromNumber(newState.outRemaining),\\n                diff\\n            );\\n            uint256 newDistributionBalance = DecimalMath.floor(newDecimalDistributionBalance);\\n\\n            Decimal memory newDecimalSpentIn = DecimalMath.mul(DecimalMath.fromNumber(newState.inSupply), diff);\\n            uint256 spentIn = DecimalMath.floor(newDecimalSpentIn);\\n\\n            // Update state variables\\n            newState.spentIn += spentIn;\\n            newState.inSupply -= spentIn;\\n\\n            if (newDistributionBalance > 0) {\\n                newState.outRemaining -= newDistributionBalance;\\n                // Increment distribution index\\n                Decimal memory distIndexIncrementAmount = DecimalMath.fromRatio(\\n                    newDistributionBalance,\\n                    newState.shares\\n                );\\n                newState.distIndex = DecimalMath.add(newState.distIndex, distIndexIncrementAmount);\\n                // Update current streamed price\\n                newState.currentStreamedPrice = DecimalMath.fromRatio(spentIn, newDistributionBalance);\\n            }\\n        }\\n        return newState;\\n    }\\n\\n    function computeSharesAmount(\\n        uint256 amountIn,\\n        bool roundUp,\\n        uint256 inSupply,\\n        uint256 totalShares\\n    ) internal pure returns (uint256) {\\n        if (totalShares == 0 || amountIn == 0) {\\n            return amountIn;\\n        }\\n        // 42*21/42\\n        uint256 totalSharesIn = totalShares * amountIn;\\n\\n        if (roundUp) {\\n            return (totalSharesIn + inSupply - 1) / inSupply;\\n        } else {\\n            return totalSharesIn / inSupply;\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates the exit fee amount based on the spent in amount\\n     * @param spentInAmount Amount of tokens spent in the stream\\n     * @return exitFeeAmount The calculated fee amount\\n     * @return remainingAmount The remaining amount after fee deduction\\n     */\\n    function calculateExitFee(\\n        uint256 spentInAmount,\\n        Decimal memory exitFeeRatio\\n    ) internal pure returns (uint256 exitFeeAmount, uint256 remainingAmount) {\\n        Decimal memory decimalSpentIn = DecimalMath.fromNumber(spentInAmount);\\n\\n        // Calculate exit fee amount using DecimalMath\\n        Decimal memory decimalExitFeeAmount = DecimalMath.mul(decimalSpentIn, exitFeeRatio);\\n        exitFeeAmount = DecimalMath.floor(decimalExitFeeAmount);\\n        remainingAmount = spentInAmount - exitFeeAmount;\\n\\n        return (exitFeeAmount, remainingAmount);\\n    }\\n\\n    function calculatePoolAmount(uint256 creatorRevenue, Decimal memory poolRatio) internal pure returns (uint256) {\\n        Decimal memory decimalCreatorRevenue = DecimalMath.fromNumber(creatorRevenue);\\n        Decimal memory decimalPoolAmount = DecimalMath.mul(decimalCreatorRevenue, poolRatio);\\n        return DecimalMath.floor(decimalPoolAmount);\\n    }\\n\\n    function syncPosition(\\n        PositionTypes.Position memory position,\\n        Decimal memory distIndex,\\n        uint256 totalShares,\\n        uint256 inSupply,\\n        uint256 nowTime\\n    ) internal pure returns (PositionTypes.Position memory) {\\n        // Calculate index difference for distributions since last update\\n        Decimal memory indexDiff = DecimalMath.sub(distIndex, position.index);\\n        uint256 spent = 0;\\n        uint256 purchased = 0;\\n\\n        // Only process if there are shares in the stream\\n        if (position.shares > 0) {\\n            // Calculate purchased amount based on position shares and index difference\\n            Decimal memory positionSharesDecimal = DecimalMath.fromNumber(position.shares);\\n            Decimal memory purchasedDecimal = DecimalMath.add(\\n                DecimalMath.mul(positionSharesDecimal, indexDiff),\\n                position.pendingReward\\n            );\\n            (purchased, purchasedDecimal) = DecimalMath.toNumber(purchasedDecimal);\\n            position.purchased += purchased;\\n            position.pendingReward = purchasedDecimal;\\n\\n            // Calculate remaining balance based on current shares ratio\\n            uint256 inRemaining = (inSupply * position.shares) / totalShares;\\n            // Calculate spent amount\\n            spent = position.inBalance - inRemaining;\\n            position.spentIn += spent;\\n            position.inBalance = inRemaining;\\n        }\\n\\n        // Update position tracking\\n        position.index = distIndex;\\n        position.lastUpdateTime = nowTime;\\n\\n        return position;\\n    }\\n\\n    function calculateVestingSchedule(\\n        uint256 nowTime,\\n        uint256 cliffDuration,\\n        uint256 vestingDuration\\n    ) internal pure returns (uint256 cliffTime, uint256 endTime) {\\n        cliffTime = nowTime + cliffDuration;\\n        endTime = nowTime + vestingDuration;\\n        return (cliffTime, endTime);\\n    }\\n}\\n\",\"keccak256\":\"0x2744a3e48189f9fe77583319c711025f74fd2e4da761c964d17151c07a2fb83e\",\"license\":\"MIT\"},\"contracts/storage/PositionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"../types/PositionTypes.sol\\\";\\nimport \\\"../lib/math/DecimalMath.sol\\\";\\n\\ncontract PositionStorage {\\n    using PositionTypes for PositionTypes.Position;\\n\\n    mapping(address => PositionTypes.Position) private positions;\\n    address public immutable streamContractAddress;\\n\\n    constructor(address _streamContractAddress) {\\n        streamContractAddress = _streamContractAddress;\\n    }\\n\\n    function getPosition(address _owner) external view returns (PositionTypes.Position memory) {\\n        return positions[_owner];\\n    }\\n\\n    modifier onlyStreamContract() {\\n        require(msg.sender == streamContractAddress, \\\"Position can only be set by the stream contract\\\");\\n        _;\\n    }\\n\\n    function createPosition(\\n        address owner,\\n        uint256 inBalance,\\n        uint256 shares,\\n        Decimal memory index\\n    ) external onlyStreamContract {\\n        positions[owner] = PositionTypes.Position(\\n            inBalance,\\n            shares,\\n            index,\\n            block.timestamp,\\n            DecimalMath.fromNumber(0),\\n            0,\\n            0,\\n            0\\n        );\\n    }\\n\\n    function updatePosition(address owner, PositionTypes.Position memory position) external onlyStreamContract {\\n        positions[owner] = position;\\n    }\\n\\n    function setExitDate(address owner, uint256 exitDate) external onlyStreamContract {\\n        positions[owner].exitDate = exitDate;\\n    }\\n}\\n\",\"keccak256\":\"0xf90fa78dd55581fbcf46de01c6479df8b982ceea3d72908583821d9bd4ed2a90\",\"license\":\"MIT\"},\"contracts/types/PoolWrapperTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nlibrary PoolWrapperTypes {\\n    struct CreatePoolMsg {\\n        address token0;\\n        address token1;\\n        uint256 amount0;\\n        uint256 amount1;\\n    }\\n\\n    struct CreatedPoolInfo {\\n        address poolAddress;\\n        address token0;\\n        address token1;\\n    }\\n}\\n\",\"keccak256\":\"0xd67fb482e72c55e037334355080ec68627a3b4e307e54023b737e29adc25f58f\",\"license\":\"MIT\"},\"contracts/types/PositionTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"../lib/math/DecimalMath.sol\\\";\\n\\nlibrary PositionTypes {\\n    struct Position {\\n        uint256 inBalance;\\n        uint256 shares;\\n        Decimal index;\\n        uint256 lastUpdateTime;\\n        Decimal pendingReward;\\n        uint256 spentIn;\\n        uint256 purchased;\\n        uint256 exitDate;\\n    }\\n}\\n\",\"keccak256\":\"0x20e3d610c16a5c3c4e245cb129662324aeb6e67e73f836d3325a45e6f52bbb2b\",\"license\":\"MIT\"},\"contracts/types/StreamFactoryTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"../lib/math/DecimalMath.sol\\\";\\n\\nlibrary StreamFactoryTypes {\\n    struct Params {\\n        uint256 streamCreationFee;\\n        address streamCreationFeeToken;\\n        Decimal exitFeeRatio;\\n        uint256 minWaitingDuration;\\n        uint256 minBootstrappingDuration;\\n        uint256 minStreamDuration;\\n        address feeCollector;\\n        address protocolAdmin;\\n        string tosVersion;\\n        address vestingAddress;\\n        address poolWrapperAddress;\\n        address streamImplementationAddress;\\n    }\\n\\n    struct initializeStreamMessage {\\n        uint256 streamCreationFee;\\n        address streamCreationFeeToken;\\n        Decimal exitFeeRatio;\\n        uint256 minWaitingDuration;\\n        uint256 minBootstrappingDuration;\\n        uint256 minStreamDuration;\\n        address feeCollector;\\n        address protocolAdmin;\\n        string tosVersion;\\n        address poolWrapperAddress;\\n        address[] acceptedInSupplyTokens;\\n        address streamImplementationAddress;\\n    }\\n}\\n\",\"keccak256\":\"0xf06c159f59328f62225ce42a6c8f973c95712a68ea54271f993091bbf2dabcf2\",\"license\":\"MIT\"},\"contracts/types/StreamTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"../lib/math/DecimalMath.sol\\\";\\n\\nlibrary StreamTypes {\\n    enum Status {\\n        Waiting,\\n        Bootstrapping,\\n        Active,\\n        Ended,\\n        FinalizedRefunded,\\n        FinalizedStreamed,\\n        Cancelled\\n    }\\n\\n    struct createStreamMessage {\\n        uint256 streamOutAmount;\\n        address outSupplyToken;\\n        uint256 bootstrappingStartTime;\\n        uint256 streamStartTime;\\n        uint256 streamEndTime;\\n        uint256 threshold;\\n        StreamMetadata metadata;\\n        address inSupplyToken;\\n        address creator;\\n        VestingInfo creatorVesting;\\n        VestingInfo beneficiaryVesting;\\n        PoolInfo poolInfo;\\n        bytes32 salt;\\n        string tosVersion;\\n    }\\n    struct StreamTimes {\\n        uint256 bootstrappingStartTime;\\n        uint256 streamStartTime;\\n        uint256 streamEndTime;\\n    }\\n\\n    struct StreamMetadata {\\n        string ipfsHash;\\n    }\\n\\n    struct StreamState {\\n        uint256 outRemaining;\\n        Decimal distIndex;\\n        uint256 spentIn;\\n        uint256 shares;\\n        Decimal currentStreamedPrice;\\n        uint256 threshold;\\n        uint256 inSupply;\\n        uint256 outSupply;\\n        uint256 lastUpdated;\\n    }\\n\\n    struct StreamTokens {\\n        address inSupplyToken;\\n        address outSupplyToken;\\n    }\\n\\n    struct VestingInfo {\\n        bool isVestingEnabled;\\n        uint32 vestingDuration;\\n        uint32 cliffDuration;\\n    }\\n\\n    struct PoolInfo {\\n        uint256 poolOutSupplyAmount;\\n    }\\n\\n    struct PostStreamActions {\\n        PoolInfo poolInfo;\\n        VestingInfo creatorVesting;\\n        VestingInfo beneficiaryVesting;\\n    }\\n}\\n\",\"keccak256\":\"0x72ce32820a25a1c19f00e5f2cccacd9de17d1e85cd4766fadbd47abde5a31653\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nlibrary console {\\n    address constant CONSOLE_ADDRESS =\\n        0x000000000000000000636F6e736F6c652e6c6f67;\\n\\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            pop(\\n                staticcall(\\n                    gas(),\\n                    consoleAddress,\\n                    add(payload, 32),\\n                    mload(payload),\\n                    0,\\n                    0\\n                )\\n            )\\n        }\\n    }\\n\\n    function _castToPure(\\n      function(bytes memory) internal view fnIn\\n    ) internal pure returns (function(bytes memory) pure fnOut) {\\n        assembly {\\n            fnOut := fnIn\\n        }\\n    }\\n\\n    function _sendLogPayload(bytes memory payload) internal pure {\\n        _castToPure(_sendLogPayloadImplementation)(payload);\\n    }\\n\\n    function log() internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n    }\\n\\n    function logInt(int256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n    }\\n\\n    function logUint(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function logString(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function logBool(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function logAddress(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n    }\\n\\n    function log(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function log(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function log(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function log(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function log(uint256 p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n}\\n\",\"keccak256\":\"0xf2560b5386574153057104d19a9e68a32ee912cf23c0c8df1fe9a0607f42d543\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a03461008157601f62002e1738819003918201601f19168301916001600160401b038311848410176100865780849260209460405283398101031261008157516001600160a01b038116810361008157608052604051612d7a90816200009d82396080518181816102cd01528181610867015281816117d901526121d30152f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe608080604052600436101561001357600080fd5b600090813560e01c90816302d05d3f146118e757508063039054741461108f5780630bcc8eba146117ab5780630e5634df146116b05780630f574ba71461151357806316c19739146114e15780632ae4e931146114685780632e1a7d4d1461128f57806334793e05146111b35780636b330b79146110eb5780638a03764f146110b9578063af5c3ac41461108f578063bdf4a94714610fd0578063c0ae398c14610f4e578063cbf0641514610eaa578063d08452c214610e77578063e427d08c14610e4e578063e9a9e14414610d84578063f69e8fba146108345763f920fc09146100fd57600080fd5b346108295760031990604036830112610829576001600160401b036004351161082957610240826004353603011261082957604051916101c083018381106001600160401b0382111761066a57604052600435600401358352610164602460043501611a64565b602084015260043560448101356040850152606481013560608501526084810135608085015260a481013560a085015260c401356001600160401b038111610830576020906004350191823603011261082557604051906101c48261196e565b60048101356001600160401b03811161082c576101e691369101600401611b15565b815260c08301526101fb60e460043501611a64565b60e083015261020f61010460043501611a64565b6101008301526102253661012460043501611b6d565b61012083015261023b3661018460043501611b6d565b610140830152602060043536036101e31901126108295760405161025e8161196e565b6101e460043501358152610160830152610204600435013561018083015261022460043501356001600160401b038111610825576102a3906004369181350101611b15565b6101a08301526024356001600160a01b0381168103610820576001549060ff8260a01c1661080f577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316330361080f5760208401516103149033906001600160a01b03166126e7565b156107fd5761034361032e85516101608701515190611bb9565b602086015130906001600160a01b03166127d0565b156107eb57610120840151805161075c575b5061014084015180516106a9575b506101608401515180610680575b506001600160a01b039081166001600160a01b0319928316176001556101008401518354911691161781556040516000906103ab8161196e565b526040516103b88161196e565b6000815282519060006040516103cd8161196e565b526040516103da8161196e565b6000815260a0850151918551936040516103f3816119b7565b8181528260208201528660408201528660608201528360808201528460a08201528660c08201528560e082015261010042910152600255516003558360045583600555516006556007558160085560095542600a5560018060a01b0360e08301511660018060a01b0360208401511690604051604081018181106001600160401b0382111761066a57839160209160405283815201526bffffffffffffffffffffffff60a01b600b541617600b556bffffffffffffffffffffffff60a01b600c541617600c5560c0820151519182516001600160401b038111610656576104db600d54611934565b601f81116105f3575b506020601f821160011461057257839482939492610567575b50508160011b916000199060031b1c191617600d555b60ff19600e5416600e556040810151906080606082015191015191826040805161053c81611989565b838152602081018590520152600f556010556011556001805460ff60a01b1916600160a01b17905580f35b0151905038806104fd565b600d84527fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb590601f198316855b8181106105db575095836001959697106105c2575b505050811b01600d55610513565b015160001960f88460031b161c191690553880806105b4565b9192602060018192868b01518155019401920161059f565b600d84527fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb5601f830160051c8101916020841061064c575b601f0160051c01905b81811061064157506104e4565b848155600101610634565b909150819061062b565b634e487b7160e01b83526041600452602483fd5b634e487b7160e01b600052604160045260246000fd5b845110610697576101608401515160125538610371565b60405163162908e360e11b8152600490fd5b6020015163ffffffff161561074a5763ffffffff6040610140860151015116156107385761014084015163ffffffff60208160408401511692015116111561073857610140840151805115159060145460ff68ffffffff0000000000604064ffffffff00602086015160081b1694015160281b1693169068ffffffffffffffffff191617171760145538610363565b604051632676310d60e11b8152600490fd5b604051632b39f6cb60e01b8152600490fd5b6020015163ffffffff161561074a5763ffffffff6040610120860151015116156107385761012084015163ffffffff60208160408401511692015116111561073857610120840151805115159060135460ff68ffffffff0000000000604064ffffffff00602086015160081b1694015160281b1693169068ffffffffffffffffff191617171760135538610355565b6040516357084d7360e11b8152600490fd5b6040516372146d6160e11b8152600490fd5b6040516282b42960e81b8152600490fd5b600080fd5b5080fd5b80fd5b8380fd5b8280fd5b503461082957806003193601126108295761084d612417565b604051635e615a6b60e01b80825291906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116918381600481865afa908115610d79578491610d5f575b506108b860ff600e54166108b16125e9565b42916126cc565b926108e66040516108c8816119ef565b6001815260209586368184013760036108e083611bf5565b52611dfb565b6108f66108f161242b565b611c89565b9361090a8560a06040820151910151111590565b15610cff579061094383928560c061094e9601511698610959604086015160408a015190620f424095869161093e846129de565b612b9c565b510497888092611e5b565b9b89600b5416612899565b6012549283610aeb575b505050505060ff60135416600014610ac85760135461099a63ffffffff61098f818460281c1642611bb9565b9260081c1642611bb9565b9184875416908561012081600b541692015116916109b98a8484612899565b823b15610ac45760405162f55c9960e61b81526001600160a01b039182166004820152911660248201526044810192909252606482019290925260848101879052908590829060a490829084905af18015610ab957610a9e575b5090610a7d91610a8294955b7f16d1e1ee4b51bbfbf5d46884cac3a98f673074103d40dfae8a99e5b51457b7d2600593865180610a85575b5088541692865190610a756040519283923096846040919493926060820195825260208201520152565b0390a3611bdc565b612627565b80f35b610a989082600c5416838c541690612899565b38610a4b565b90610a8294610ab0610a7d94936119a4565b94509091610a13565b6040513d87823e3d90fd5b8880fd5b5090610a7d9185610ae6610a82969784600b5416858a541690612899565b610a1f565b610af984959b9293946129de565b610b046009546129de565b908b604051610b128161196e565b52519082820291808304841490151715610ceb57610b39610b5a9392610b51925190612a14565b60405190610b468261196e565b815261093e856129de565b51048092611e5b565b9987600b5416908a89600c54169460046040518094819382525afa908115610ce0578991610140918d91610cbe575b5001511693604051608081018181106001600160401b03821117610caa57604090815283825282820186815281830186815260608085018b815293516302e2616d60e61b815294518e16600486015291518d16602485015251604484015290516064830152816084818f8a5af18015610c9f57610c23575b5050839291610c199594610c1492612899565b612899565b3880808080610963565b6060813d8211610c97575b81610c3b60609383611a0a565b81010312610c935794610c1492819594926040610c8381610c199b9a815194610c6386611989565b610c6c82611f49565b8652610c79818301611f49565b9086015201611f49565b9101529250949581939450610c01565b8b80fd5b3d9150610c2e565b6040513d8e823e3d90fd5b634e487b7160e01b8d52604160045260248dfd5b610cda91503d808f833e610cd28183611a0a565b810190611f7b565b38610b89565b6040513d8d823e3d90fd5b634e487b7160e01b8c52601160045260248cfd5b915050610a82939450610a7d916004917f3f3e233ce59fa3e5f0b479b323538988fd213fa8f3007a95ff330489bf5d40a682600c541692610d4b818a54169460e0890195865191612899565b8854169251916040519283523092a3611bdc565b610d7391503d8086833e610cd28183611a0a565b3861089f565b6040513d86823e3d90fd5b5034610829578060031936011261082957610d9d612417565b610dd3610db160ff600e54166108b16125e9565b60405190610dbe826119ef565b6001825260203681840137836108e083611bf5565b600c5481546009546001600160a01b0392610df2928416908416612899565b600e8054600660ff199091168117909155825460095460408051949092166001600160a01b03168452602084015282015230907febb55ea32d517c9ec85f61357977ac73b84e65ebeaedb528ed791d7e25e30a2b90606090a280f35b50346108295780600319360112610829576001546040516001600160a01b039091168152602090f35b5034610829578060031936011261082957600b54600c54604080516001600160a01b039384168152919092166020820152f35b5034610829578060031936011261082957610a82610ec7336124ff565b610ed13382611e68565b610f48610efa610ee26108f161242b565b926020840151606085015160c0860151914293612c5b565b91610a7d610f1760ff600e54164290610f116125e9565b906126cc565b610f3d610f2d8460a06040820151910151111590565b86610f36611ac5565b91846120ae565b4260e0860152611bdc565b33612670565b5034610829578060031936011261082957610120600254604051610f718161196e565b6003548152600454600554604051610f888161196e565b6006548152600754906008549260095494600a54966040519889525160208901526040880152606087015251608086015260a085015260c084015260e0830152610100820152f35b503461082957806003193601126108295760e0604051610fef8161196e565b601254815261108d60405161100381611989565b60135460ff81161515825263ffffffff90818160081c16602084015260281c166040820152611064611033611ac5565b916040519451855260208501906040908051151583528163ffffffff91826020820151166020860152015116910152565b805115156080840152602081015163ffffffff90811660a08501526040909101511660c0830152565bf35b50346108295780600319360112610829576110b560ff600e54166040519182918261190b565b0390f35b5034610829578060031936011261082957600f5460105460115460408051938452602084019290925290820152606090f35b503461082957602036600319011261082957611105611a4e565b61110e816124ff565b6111188282611e68565b611134611129610ee26108f161242b565b91610a7d8385612670565b805160208083015160608085015160a08087015160c0808901516040998a0151518a51998a5297890196909652978701929092529185015260808401919091528201526001600160a01b039092169130917f776f4c645ad4c2525f2c0862f3c0e3841c03f4fc680c1ceb4ab41b9eadccc4d19190819081015b0390a380f35b50346108295780600319360112610829576111cc61242b565b6111f86111e06111da6125e9565b92611c89565b916111ea83612627565b60ff600e54169042916126cc565b61120181611bdc565b61010082015191600782101561127b57602081015151815160c08301519160ff60806040860151950151519560405197885216602087015260408601526060850152608084015260a083015260c08201527f9a6ce334816e7b4b0cea88e41f3c652ec2e8064e2663e98f6d94d5ed90bc569060e03092a280f35b634e487b7160e01b84526021600452602484fd5b50346108295760208060031936011261082557600435906112af82611e54565b6112b8336124ff565b6112c23382611e68565b61130d6112d06111ea6125e9565b6113086040516112df81611989565b600281526040368783013760026112f582611bf5565b52600161130182611c18565b5282611dfb565b611bdc565b6113186108f161242b565b928284015190611338606086019283519460c08801954292875192612c5b565b948551821161144f577fca17ddd98e8725ab2aa1c70d19c5d777d10bd61a64e2525cf7ead7fe7f1ec2079392916113bd6113d09288518314600014611436576113b1888a0151985b8a019861138e818b51611e5b565b8a5261139b858c51611e5b565b8b526113a8858951611e5b565b88528651611e5b565b8552610a7d8933612670565b600b5433906001600160a01b0316612899565b6111ad855194519560608101519260a082015194604060c0840151930151519051915192604051968796339b309b8994919260e0969399989794919961010087019a8752602087015260408601526060850152608084015260a083015260c08201520152565b6113b161144987518a8c01519086612c15565b98611380565b6040516318928cbf60e31b815260048101839052602490fd5b503461082957806003193601126108295761012061148461242b565b604051908051825260208101515160208301526040810151604083015260608101516060830152608081015151608083015260a081015160a083015260c081015160c083015260e081015160e08301526101008091015190820152f35b503461082957602036600319011261082957610100611506611501611a4e565b6124ff565b61108d6040518092611a78565b5060203660031901126108295760043561152c81611e54565b61157261154060ff600e54166108b16125e9565b61130860405161154f81611989565b600281526040366020830137600161156682611bf5565b52600261130182611c18565b61157d6108f161242b565b611586336124ff565b906020810151916115a7606083019384519260c08501934292855192612c5b565b926115c08560018060a01b03600b54163090339061292f565b1561169e5761163a7fac20383bc611fb24ecfa942ed37ae8648074130276759a168535c23c5cf026c3936116216115fb85518551908a612be8565b97611607818951611bb9565b8852602088016116188a8251611bb9565b90528551611bb9565b845261162e878451611bb9565b8352610a7d8633612670565b6111ad84519460608101519260a082015194604060c0840151930151519051915192604051968796339b309b8994919260e0969399989794919961010087019a8752602087015260408601526060850152608084015260a083015260c08201520152565b6040516307a4ced160e51b8152600490fd5b50346108295780600319360112610829576040518190600d54926116d384611934565b8083526020809581850193600191828116908160001461178b5750600114611732575b50505050611708826040940383611a0a565b6117248351948593818552519283809286015285850190611a2b565b601f01601f19168101030190f35b92919550600d83527fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb55b82841061177857505050820190920191611708846040846116f6565b805486850188015292860192810161175c565b60ff1916865250505090151560051b8301019250611708846040846116f6565b5034610829578060031936011261082957604051635e615a6b60e01b81526001600160a01b039082816004817f000000000000000000000000000000000000000000000000000000000000000086165afa9081156118dc57829160e09185916118c2575b50015116330361080f5761182a60ff600e54166108b16125e9565b60405190608082018281106001600160401b038211176118ae576040526003825260603660208401378361185d83611bf5565b52600161186983611c18565b5281516002101561189a57906118859160026060830152611dfb565b610df281600c54168284541660095491612899565b634e487b7160e01b84526032600452602484fd5b634e487b7160e01b85526041600452602485fd5b6118d691503d8087833e610cd28183611a0a565b3861180f565b6040513d85823e3d90fd5b90503461082557816003193601126108255790546001600160a01b03168152602090f35b91906020830192600782101561191e5752565b634e487b7160e01b600052602160045260246000fd5b90600182811c92168015611964575b602083101461194e57565b634e487b7160e01b600052602260045260246000fd5b91607f1691611943565b602081019081106001600160401b0382111761066a57604052565b606081019081106001600160401b0382111761066a57604052565b6001600160401b03811161066a57604052565b61012081019081106001600160401b0382111761066a57604052565b61010081019081106001600160401b0382111761066a57604052565b604081019081106001600160401b0382111761066a57604052565b90601f801991011681019081106001600160401b0382111761066a57604052565b60005b838110611a3e5750506000910152565b8181015183820152602001611a2e565b600435906001600160a01b038216820361082057565b35906001600160a01b038216820361082057565b60e080918051845260208101516020850152604081015151604085015260608101516060850152608081015151608085015260a081015160a085015260c081015160c08501520151910152565b60405190611ad282611989565b81604060145460ff81161515835263ffffffff90818160081c16602085015260281c16910152565b6001600160401b03811161066a57601f01601f191660200190565b81601f8201121561082057803590611b2c82611afa565b92611b3a6040519485611a0a565b8284526020838301011161082057816000926020809301838601378301015290565b359063ffffffff8216820361082057565b919082606091031261082057604051611b8581611989565b80928035908115158203610820576040611bb49181938552611ba960208201611b5c565b602086015201611b5c565b910152565b91908201809211611bc657565b634e487b7160e01b600052601160045260246000fd5b600781101561191e5760ff8019600e5416911617600e55565b805115611c025760200190565b634e487b7160e01b600052603260045260246000fd5b805160011015611c025760400190565b60405190611c35826119b7565b81610100600091828152604051611c4b8161196e565b8381526020820152826040820152826060820152604051611c6b8161196e565b83815260808201528260a08201528260c08201528260e08201520152565b611c91611c28565b50611c9a6125e9565b611cb7604060208301519201519161010084019283519142612a34565b805115611df457611cc6611c28565b5060608301908151151580611dea575b611d56575b50504290526020810151517ff7f050a5e163dbe15fb695b5b2e83ef129fc3565263dc8fc74049d3739e62fde825160c084015190611d50604086015160808701515190604051948594309842879260a094919796959260c0850198855260208501526040840152606083015260808201520152565b0390a290565b620f42409081611d6a8261093e88516129de565b510491611d7f60c087019261093e84516129de565b51049060408601611d91838251611bb9565b9052611d9e828251611e5b565b905281611dac575b50611cdb565b611dc7611ddd93611dbe848851611e5b565b87525183612ae8565b611dd660208701918251612bcb565b9052612ae8565b6080830152388080611da6565b5080511515611cd6565b5042905290565b91909160005b8351811015611e425760208160051b8501015160078082101561191e5783101561191e578214611e3c576000198114611bc657600101611e01565b50509050565b604051637a851da960e11b8152600490fd5b1561069757565b91908203918211611bc657565b602081019081518015611ee7575060e001519081611e8557505050565b51604051631175404360e11b81526001600160a01b0390931660048401526024830152604482015260806064820152601b60848201527f506f736974696f6e2068617320616c726561647920657869746564000000000060a482015260c49150fd5b60e09190910151604051631175404360e11b81526001600160a01b038516600482015260248101929092526044820152608060648201526016608482015275506f736974696f6e20686173206e6f2073686172657360501b60a482015260c490fd5b51906001600160a01b038216820361082057565b919082602091031261082057604051611f758161196e565b91518252565b60209182828203126108205781516001600160401b0392838211610820570191610180938484840312610820576040519485018581108382111761066a5760405283518552611fcb818501611f49565b81860152611fdc8360408601611f5d565b6040860152606084015160608601526080840151608086015260a084015160a086015261200b60c08501611f49565b60c086015261201c60e08501611f49565b60e0860152610100918285015190811161082057840183601f820112156108205780519061204982611afa565b946120576040519687611a0a565b82865283838301011161082057826120729386019101611a2b565b830152610120612083818301611f49565b90830152610140612095818301611f49565b908301526120a7610160809201611f49565b9082015290565b91929060078310158061191e5760038414928380612410575b8015612402575b61219457508061191e5760068414938415612185575b508315612165575b5050506121055760405163eee2192360e01b8152600490fd5b8060a0612116925191015190611bb9565b600b5461212f90829033906001600160a01b0316612899565b60405190815242602082015233907f974d269dfe471aa7c09788034bef284519056ae9769575104f22c0456456dd0960403092a3565b9091925061191e578161217c575b503880806120ec565b90501538612173565b600414935060009050386120e4565b93505050508151806123e4575b508051156123c25760c082015160408051635e615a6b60e01b8152919290916000916001600160a01b039183816004817f000000000000000000000000000000000000000000000000000000000000000087165afa9081156123b857839161012091869161239e575b500151169061223461222d63ffffffff6020818986015116940151169242611bb9565b9142611bb9565b600c54865163095ea7b360e01b81526001600160a01b03851660048201526024810189905291949190602090829060449082908a9087165af1908115612394578691612366575b501561235557600c5416823b1561235157855162f55c9960e61b81523360048201526001600160a01b03919091166024820152604481019190915260648101929092526084820194909452928190849060a490829084905af1918215612347575050612338575b505b60a060c08201519101517f42c690944bb098e84e7a84f157acef3324928623259330b1ba03ec0495407bb460405180612333339530954291846040919493926060820195825260208201520152565b0390a3565b612341906119a4565b386122e2565b51903d90823e3d90fd5b8480fd5b85516307a4ced160e51b8152600490fd5b612387915060203d811161238d575b61237f8183611a0a565b810190612881565b3861227b565b503d612375565b87513d88823e3d90fd5b6123b291503d8088833e610cd28183611a0a565b3861220a565b85513d86823e3d90fd5b50600c5460c08201516123df9133906001600160a01b0316612899565b6122e4565b600b546123fc919033906001600160a01b0316612899565b386121a1565b5060009150600585146120ce565b50826120c7565b6000546001600160a01b0316330361080f57565b612433611c28565b50604051612440816119b7565b60025481526040516124518161196e565b60035481526020820152600454604082015260055460608201526040516124778161196e565b6006548152608082015260075460a082015260085460c082015260095460e0820152600a5461010082015290565b604051906124b2826119d3565b8160e06000918281528260208201526040516124cd8161196e565b83815260408201528260608201526040516124e78161196e565b83815260808201528260a08201528260c08201520152565b6125076124a5565b506001546040516316c1973960e01b81526001600160a01b0392831660048201529161010091829184916024918391165afa9182156125dd5760009261254c57505090565b9091823d84116125d6575b6125618184611a0a565b82019282840312610829575060e0906125b360405193612580856119d3565b825185526020830151602086015261259b8160408501611f5d565b60408601526060830151606086015260808301611f5d565b608084015260a081015160a084015260c081015160c0840152015160e082015290565b503d612557565b6040513d6000823e3d90fd5b6000604080516125f881611989565b828152826020820152015260405161260f81611989565b600f5481526010546020820152601154604082015290565b80516002556020810151516003556040810151600455606081015160055560808101515160065560a081015160075560c081015160085560e08101516009556101000151600a55565b6001546001600160a01b03908116803b156108205760009283610124926126b260405197889687956360d6081360e11b87521660048601526024850190611a78565b5af180156125dd576126c15750565b6126ca906119a4565b565b906126e4928151906040602084015193015193612b23565b90565b6001600160a01b039081169190821561275a57602460209260405194859384926370a0823160e01b84521660048301525afa908161272f575b5061272a57600090565b600190565b602090813d8111612753575b6127458183611a0a565b810103126108205738612720565b503d61273b565b505050600090565b600060443d106126e457604051600319913d83016004833e81516001600160401b03918282113d6024840111176127bf578184019485519384116127c7573d850101602084870101116127bf57506126e492910160200190611a0a565b949350505050565b50949350505050565b6040516370a0823160e01b81526001600160a01b0392831660048201529160209183916024918391165afa6000918161284e575b50612849575050600060033d1161283b575b6308c379a01461282557600090565b61282d612762565b61283657600090565b600090565b600481803e5160e01c612816565b101590565b90916020823d8211612879575b8161286860209383611a0a565b810103126108295750519038612804565b3d915061285b565b90816020910312610820575180151581036108205790565b918015801561291e575b6129195760405163a9059cbb60e01b81526001600160a01b0390921660048301526024820152906020908290816000816044810103926001600160a01b03165af19081156125dd576000916128fb575b501561169e57565b612913915060203d811161238d5761237f8183611a0a565b386128f3565b505050565b506001600160a01b038216156128a3565b929091811580156129ba575b6129b1576040516323b872dd60e01b81526001600160a01b039384166004820152908316602482015260448101919091529160209183916064918391600091165af160009181612991575b506126e45750600090565b6129aa91925060203d811161238d5761237f8183611a0a565b9038612986565b50505050600190565b506001600160a01b0381161561293b565b81810292918115918404141715611bc657565b60006040516129ec8161196e565b52620f424090818102918183041490151715611bc65760405190612a0f8261196e565b815290565b8115612a1e570490565b634e487b7160e01b600052601260045260246000fd5b929091926000604051612a468161196e565b528281108015612ade575b612acc5782612a7a938310612ac4575b5081848211612abc575b612a7491611e5b565b92611e5b565b80158015612ab4575b612a90576126e491612ae8565b50506000604051612aa08161196e565b52604051612aad8161196e565b6000815290565b508115612a83565b849150612a6b565b915038612a61565b505050506000604051612aa08161196e565b5083821015612a51565b906000604051612af78161196e565b52620f424091828102928184041490151715611bc657612b1691612a14565b60405190612a0f8261196e565b9291909260078110158061191e5760068214908115612b8f575b8115612b7f575b50612b775750821015612b5957505050600090565b811015612b67575050600190565b1015612b7257600290565b600390565b935050505090565b905061191e576005811438612b44565b5050600481146000612b3d565b620f424091612bbd916000604051612bb38161196e565b52519051906129cb565b0460405190612a0f8261196e565b90612b16916000604051612bde8161196e565b5251905190611bb9565b9180158015612c0d575b612c08576126e492612c03916129cb565b612a14565b505090565b508215612bf2565b909180158015612c53575b612c4d57612c32612c379284926129cb565b611bb9565b600019810191908211611bc6576126e491612a14565b50905090565b508115612c20565b9392919091612c686124a5565b506040850191612c8c83516000604051612c818161196e565b528551905190611e5b565b60405190612c998261196e565b8152602087019283519384612cb7575b505050505052606082015290565b612cca612c039361093e612d1c976129de565b612cda60808b0191825190612bcb565b6000604051612ce88161196e565b52519060405191612cf88361196e565b612d128c60c0620f42409182850687520192048251611bb9565b90525251906129cb565b612d27818651611e5b565b612d3660a08701918251611bb9565b905284523880808080612ca956fea2646970667358221220f3fe31008c300a1ea2949a7727e2dbdb57a042ad06c17c2216d60a66e88cc31964736f6c63430008140033",
  "deployedBytecode": "0x608080604052600436101561001357600080fd5b600090813560e01c90816302d05d3f146118e757508063039054741461108f5780630bcc8eba146117ab5780630e5634df146116b05780630f574ba71461151357806316c19739146114e15780632ae4e931146114685780632e1a7d4d1461128f57806334793e05146111b35780636b330b79146110eb5780638a03764f146110b9578063af5c3ac41461108f578063bdf4a94714610fd0578063c0ae398c14610f4e578063cbf0641514610eaa578063d08452c214610e77578063e427d08c14610e4e578063e9a9e14414610d84578063f69e8fba146108345763f920fc09146100fd57600080fd5b346108295760031990604036830112610829576001600160401b036004351161082957610240826004353603011261082957604051916101c083018381106001600160401b0382111761066a57604052600435600401358352610164602460043501611a64565b602084015260043560448101356040850152606481013560608501526084810135608085015260a481013560a085015260c401356001600160401b038111610830576020906004350191823603011261082557604051906101c48261196e565b60048101356001600160401b03811161082c576101e691369101600401611b15565b815260c08301526101fb60e460043501611a64565b60e083015261020f61010460043501611a64565b6101008301526102253661012460043501611b6d565b61012083015261023b3661018460043501611b6d565b610140830152602060043536036101e31901126108295760405161025e8161196e565b6101e460043501358152610160830152610204600435013561018083015261022460043501356001600160401b038111610825576102a3906004369181350101611b15565b6101a08301526024356001600160a01b0381168103610820576001549060ff8260a01c1661080f577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316330361080f5760208401516103149033906001600160a01b03166126e7565b156107fd5761034361032e85516101608701515190611bb9565b602086015130906001600160a01b03166127d0565b156107eb57610120840151805161075c575b5061014084015180516106a9575b506101608401515180610680575b506001600160a01b039081166001600160a01b0319928316176001556101008401518354911691161781556040516000906103ab8161196e565b526040516103b88161196e565b6000815282519060006040516103cd8161196e565b526040516103da8161196e565b6000815260a0850151918551936040516103f3816119b7565b8181528260208201528660408201528660608201528360808201528460a08201528660c08201528560e082015261010042910152600255516003558360045583600555516006556007558160085560095542600a5560018060a01b0360e08301511660018060a01b0360208401511690604051604081018181106001600160401b0382111761066a57839160209160405283815201526bffffffffffffffffffffffff60a01b600b541617600b556bffffffffffffffffffffffff60a01b600c541617600c5560c0820151519182516001600160401b038111610656576104db600d54611934565b601f81116105f3575b506020601f821160011461057257839482939492610567575b50508160011b916000199060031b1c191617600d555b60ff19600e5416600e556040810151906080606082015191015191826040805161053c81611989565b838152602081018590520152600f556010556011556001805460ff60a01b1916600160a01b17905580f35b0151905038806104fd565b600d84527fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb590601f198316855b8181106105db575095836001959697106105c2575b505050811b01600d55610513565b015160001960f88460031b161c191690553880806105b4565b9192602060018192868b01518155019401920161059f565b600d84527fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb5601f830160051c8101916020841061064c575b601f0160051c01905b81811061064157506104e4565b848155600101610634565b909150819061062b565b634e487b7160e01b83526041600452602483fd5b634e487b7160e01b600052604160045260246000fd5b845110610697576101608401515160125538610371565b60405163162908e360e11b8152600490fd5b6020015163ffffffff161561074a5763ffffffff6040610140860151015116156107385761014084015163ffffffff60208160408401511692015116111561073857610140840151805115159060145460ff68ffffffff0000000000604064ffffffff00602086015160081b1694015160281b1693169068ffffffffffffffffff191617171760145538610363565b604051632676310d60e11b8152600490fd5b604051632b39f6cb60e01b8152600490fd5b6020015163ffffffff161561074a5763ffffffff6040610120860151015116156107385761012084015163ffffffff60208160408401511692015116111561073857610120840151805115159060135460ff68ffffffff0000000000604064ffffffff00602086015160081b1694015160281b1693169068ffffffffffffffffff191617171760135538610355565b6040516357084d7360e11b8152600490fd5b6040516372146d6160e11b8152600490fd5b6040516282b42960e81b8152600490fd5b600080fd5b5080fd5b80fd5b8380fd5b8280fd5b503461082957806003193601126108295761084d612417565b604051635e615a6b60e01b80825291906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116918381600481865afa908115610d79578491610d5f575b506108b860ff600e54166108b16125e9565b42916126cc565b926108e66040516108c8816119ef565b6001815260209586368184013760036108e083611bf5565b52611dfb565b6108f66108f161242b565b611c89565b9361090a8560a06040820151910151111590565b15610cff579061094383928560c061094e9601511698610959604086015160408a015190620f424095869161093e846129de565b612b9c565b510497888092611e5b565b9b89600b5416612899565b6012549283610aeb575b505050505060ff60135416600014610ac85760135461099a63ffffffff61098f818460281c1642611bb9565b9260081c1642611bb9565b9184875416908561012081600b541692015116916109b98a8484612899565b823b15610ac45760405162f55c9960e61b81526001600160a01b039182166004820152911660248201526044810192909252606482019290925260848101879052908590829060a490829084905af18015610ab957610a9e575b5090610a7d91610a8294955b7f16d1e1ee4b51bbfbf5d46884cac3a98f673074103d40dfae8a99e5b51457b7d2600593865180610a85575b5088541692865190610a756040519283923096846040919493926060820195825260208201520152565b0390a3611bdc565b612627565b80f35b610a989082600c5416838c541690612899565b38610a4b565b90610a8294610ab0610a7d94936119a4565b94509091610a13565b6040513d87823e3d90fd5b8880fd5b5090610a7d9185610ae6610a82969784600b5416858a541690612899565b610a1f565b610af984959b9293946129de565b610b046009546129de565b908b604051610b128161196e565b52519082820291808304841490151715610ceb57610b39610b5a9392610b51925190612a14565b60405190610b468261196e565b815261093e856129de565b51048092611e5b565b9987600b5416908a89600c54169460046040518094819382525afa908115610ce0578991610140918d91610cbe575b5001511693604051608081018181106001600160401b03821117610caa57604090815283825282820186815281830186815260608085018b815293516302e2616d60e61b815294518e16600486015291518d16602485015251604484015290516064830152816084818f8a5af18015610c9f57610c23575b5050839291610c199594610c1492612899565b612899565b3880808080610963565b6060813d8211610c97575b81610c3b60609383611a0a565b81010312610c935794610c1492819594926040610c8381610c199b9a815194610c6386611989565b610c6c82611f49565b8652610c79818301611f49565b9086015201611f49565b9101529250949581939450610c01565b8b80fd5b3d9150610c2e565b6040513d8e823e3d90fd5b634e487b7160e01b8d52604160045260248dfd5b610cda91503d808f833e610cd28183611a0a565b810190611f7b565b38610b89565b6040513d8d823e3d90fd5b634e487b7160e01b8c52601160045260248cfd5b915050610a82939450610a7d916004917f3f3e233ce59fa3e5f0b479b323538988fd213fa8f3007a95ff330489bf5d40a682600c541692610d4b818a54169460e0890195865191612899565b8854169251916040519283523092a3611bdc565b610d7391503d8086833e610cd28183611a0a565b3861089f565b6040513d86823e3d90fd5b5034610829578060031936011261082957610d9d612417565b610dd3610db160ff600e54166108b16125e9565b60405190610dbe826119ef565b6001825260203681840137836108e083611bf5565b600c5481546009546001600160a01b0392610df2928416908416612899565b600e8054600660ff199091168117909155825460095460408051949092166001600160a01b03168452602084015282015230907febb55ea32d517c9ec85f61357977ac73b84e65ebeaedb528ed791d7e25e30a2b90606090a280f35b50346108295780600319360112610829576001546040516001600160a01b039091168152602090f35b5034610829578060031936011261082957600b54600c54604080516001600160a01b039384168152919092166020820152f35b5034610829578060031936011261082957610a82610ec7336124ff565b610ed13382611e68565b610f48610efa610ee26108f161242b565b926020840151606085015160c0860151914293612c5b565b91610a7d610f1760ff600e54164290610f116125e9565b906126cc565b610f3d610f2d8460a06040820151910151111590565b86610f36611ac5565b91846120ae565b4260e0860152611bdc565b33612670565b5034610829578060031936011261082957610120600254604051610f718161196e565b6003548152600454600554604051610f888161196e565b6006548152600754906008549260095494600a54966040519889525160208901526040880152606087015251608086015260a085015260c084015260e0830152610100820152f35b503461082957806003193601126108295760e0604051610fef8161196e565b601254815261108d60405161100381611989565b60135460ff81161515825263ffffffff90818160081c16602084015260281c166040820152611064611033611ac5565b916040519451855260208501906040908051151583528163ffffffff91826020820151166020860152015116910152565b805115156080840152602081015163ffffffff90811660a08501526040909101511660c0830152565bf35b50346108295780600319360112610829576110b560ff600e54166040519182918261190b565b0390f35b5034610829578060031936011261082957600f5460105460115460408051938452602084019290925290820152606090f35b503461082957602036600319011261082957611105611a4e565b61110e816124ff565b6111188282611e68565b611134611129610ee26108f161242b565b91610a7d8385612670565b805160208083015160608085015160a08087015160c0808901516040998a0151518a51998a5297890196909652978701929092529185015260808401919091528201526001600160a01b039092169130917f776f4c645ad4c2525f2c0862f3c0e3841c03f4fc680c1ceb4ab41b9eadccc4d19190819081015b0390a380f35b50346108295780600319360112610829576111cc61242b565b6111f86111e06111da6125e9565b92611c89565b916111ea83612627565b60ff600e54169042916126cc565b61120181611bdc565b61010082015191600782101561127b57602081015151815160c08301519160ff60806040860151950151519560405197885216602087015260408601526060850152608084015260a083015260c08201527f9a6ce334816e7b4b0cea88e41f3c652ec2e8064e2663e98f6d94d5ed90bc569060e03092a280f35b634e487b7160e01b84526021600452602484fd5b50346108295760208060031936011261082557600435906112af82611e54565b6112b8336124ff565b6112c23382611e68565b61130d6112d06111ea6125e9565b6113086040516112df81611989565b600281526040368783013760026112f582611bf5565b52600161130182611c18565b5282611dfb565b611bdc565b6113186108f161242b565b928284015190611338606086019283519460c08801954292875192612c5b565b948551821161144f577fca17ddd98e8725ab2aa1c70d19c5d777d10bd61a64e2525cf7ead7fe7f1ec2079392916113bd6113d09288518314600014611436576113b1888a0151985b8a019861138e818b51611e5b565b8a5261139b858c51611e5b565b8b526113a8858951611e5b565b88528651611e5b565b8552610a7d8933612670565b600b5433906001600160a01b0316612899565b6111ad855194519560608101519260a082015194604060c0840151930151519051915192604051968796339b309b8994919260e0969399989794919961010087019a8752602087015260408601526060850152608084015260a083015260c08201520152565b6113b161144987518a8c01519086612c15565b98611380565b6040516318928cbf60e31b815260048101839052602490fd5b503461082957806003193601126108295761012061148461242b565b604051908051825260208101515160208301526040810151604083015260608101516060830152608081015151608083015260a081015160a083015260c081015160c083015260e081015160e08301526101008091015190820152f35b503461082957602036600319011261082957610100611506611501611a4e565b6124ff565b61108d6040518092611a78565b5060203660031901126108295760043561152c81611e54565b61157261154060ff600e54166108b16125e9565b61130860405161154f81611989565b600281526040366020830137600161156682611bf5565b52600261130182611c18565b61157d6108f161242b565b611586336124ff565b906020810151916115a7606083019384519260c08501934292855192612c5b565b926115c08560018060a01b03600b54163090339061292f565b1561169e5761163a7fac20383bc611fb24ecfa942ed37ae8648074130276759a168535c23c5cf026c3936116216115fb85518551908a612be8565b97611607818951611bb9565b8852602088016116188a8251611bb9565b90528551611bb9565b845261162e878451611bb9565b8352610a7d8633612670565b6111ad84519460608101519260a082015194604060c0840151930151519051915192604051968796339b309b8994919260e0969399989794919961010087019a8752602087015260408601526060850152608084015260a083015260c08201520152565b6040516307a4ced160e51b8152600490fd5b50346108295780600319360112610829576040518190600d54926116d384611934565b8083526020809581850193600191828116908160001461178b5750600114611732575b50505050611708826040940383611a0a565b6117248351948593818552519283809286015285850190611a2b565b601f01601f19168101030190f35b92919550600d83527fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb55b82841061177857505050820190920191611708846040846116f6565b805486850188015292860192810161175c565b60ff1916865250505090151560051b8301019250611708846040846116f6565b5034610829578060031936011261082957604051635e615a6b60e01b81526001600160a01b039082816004817f000000000000000000000000000000000000000000000000000000000000000086165afa9081156118dc57829160e09185916118c2575b50015116330361080f5761182a60ff600e54166108b16125e9565b60405190608082018281106001600160401b038211176118ae576040526003825260603660208401378361185d83611bf5565b52600161186983611c18565b5281516002101561189a57906118859160026060830152611dfb565b610df281600c54168284541660095491612899565b634e487b7160e01b84526032600452602484fd5b634e487b7160e01b85526041600452602485fd5b6118d691503d8087833e610cd28183611a0a565b3861180f565b6040513d85823e3d90fd5b90503461082557816003193601126108255790546001600160a01b03168152602090f35b91906020830192600782101561191e5752565b634e487b7160e01b600052602160045260246000fd5b90600182811c92168015611964575b602083101461194e57565b634e487b7160e01b600052602260045260246000fd5b91607f1691611943565b602081019081106001600160401b0382111761066a57604052565b606081019081106001600160401b0382111761066a57604052565b6001600160401b03811161066a57604052565b61012081019081106001600160401b0382111761066a57604052565b61010081019081106001600160401b0382111761066a57604052565b604081019081106001600160401b0382111761066a57604052565b90601f801991011681019081106001600160401b0382111761066a57604052565b60005b838110611a3e5750506000910152565b8181015183820152602001611a2e565b600435906001600160a01b038216820361082057565b35906001600160a01b038216820361082057565b60e080918051845260208101516020850152604081015151604085015260608101516060850152608081015151608085015260a081015160a085015260c081015160c08501520151910152565b60405190611ad282611989565b81604060145460ff81161515835263ffffffff90818160081c16602085015260281c16910152565b6001600160401b03811161066a57601f01601f191660200190565b81601f8201121561082057803590611b2c82611afa565b92611b3a6040519485611a0a565b8284526020838301011161082057816000926020809301838601378301015290565b359063ffffffff8216820361082057565b919082606091031261082057604051611b8581611989565b80928035908115158203610820576040611bb49181938552611ba960208201611b5c565b602086015201611b5c565b910152565b91908201809211611bc657565b634e487b7160e01b600052601160045260246000fd5b600781101561191e5760ff8019600e5416911617600e55565b805115611c025760200190565b634e487b7160e01b600052603260045260246000fd5b805160011015611c025760400190565b60405190611c35826119b7565b81610100600091828152604051611c4b8161196e565b8381526020820152826040820152826060820152604051611c6b8161196e565b83815260808201528260a08201528260c08201528260e08201520152565b611c91611c28565b50611c9a6125e9565b611cb7604060208301519201519161010084019283519142612a34565b805115611df457611cc6611c28565b5060608301908151151580611dea575b611d56575b50504290526020810151517ff7f050a5e163dbe15fb695b5b2e83ef129fc3565263dc8fc74049d3739e62fde825160c084015190611d50604086015160808701515190604051948594309842879260a094919796959260c0850198855260208501526040840152606083015260808201520152565b0390a290565b620f42409081611d6a8261093e88516129de565b510491611d7f60c087019261093e84516129de565b51049060408601611d91838251611bb9565b9052611d9e828251611e5b565b905281611dac575b50611cdb565b611dc7611ddd93611dbe848851611e5b565b87525183612ae8565b611dd660208701918251612bcb565b9052612ae8565b6080830152388080611da6565b5080511515611cd6565b5042905290565b91909160005b8351811015611e425760208160051b8501015160078082101561191e5783101561191e578214611e3c576000198114611bc657600101611e01565b50509050565b604051637a851da960e11b8152600490fd5b1561069757565b91908203918211611bc657565b602081019081518015611ee7575060e001519081611e8557505050565b51604051631175404360e11b81526001600160a01b0390931660048401526024830152604482015260806064820152601b60848201527f506f736974696f6e2068617320616c726561647920657869746564000000000060a482015260c49150fd5b60e09190910151604051631175404360e11b81526001600160a01b038516600482015260248101929092526044820152608060648201526016608482015275506f736974696f6e20686173206e6f2073686172657360501b60a482015260c490fd5b51906001600160a01b038216820361082057565b919082602091031261082057604051611f758161196e565b91518252565b60209182828203126108205781516001600160401b0392838211610820570191610180938484840312610820576040519485018581108382111761066a5760405283518552611fcb818501611f49565b81860152611fdc8360408601611f5d565b6040860152606084015160608601526080840151608086015260a084015160a086015261200b60c08501611f49565b60c086015261201c60e08501611f49565b60e0860152610100918285015190811161082057840183601f820112156108205780519061204982611afa565b946120576040519687611a0a565b82865283838301011161082057826120729386019101611a2b565b830152610120612083818301611f49565b90830152610140612095818301611f49565b908301526120a7610160809201611f49565b9082015290565b91929060078310158061191e5760038414928380612410575b8015612402575b61219457508061191e5760068414938415612185575b508315612165575b5050506121055760405163eee2192360e01b8152600490fd5b8060a0612116925191015190611bb9565b600b5461212f90829033906001600160a01b0316612899565b60405190815242602082015233907f974d269dfe471aa7c09788034bef284519056ae9769575104f22c0456456dd0960403092a3565b9091925061191e578161217c575b503880806120ec565b90501538612173565b600414935060009050386120e4565b93505050508151806123e4575b508051156123c25760c082015160408051635e615a6b60e01b8152919290916000916001600160a01b039183816004817f000000000000000000000000000000000000000000000000000000000000000087165afa9081156123b857839161012091869161239e575b500151169061223461222d63ffffffff6020818986015116940151169242611bb9565b9142611bb9565b600c54865163095ea7b360e01b81526001600160a01b03851660048201526024810189905291949190602090829060449082908a9087165af1908115612394578691612366575b501561235557600c5416823b1561235157855162f55c9960e61b81523360048201526001600160a01b03919091166024820152604481019190915260648101929092526084820194909452928190849060a490829084905af1918215612347575050612338575b505b60a060c08201519101517f42c690944bb098e84e7a84f157acef3324928623259330b1ba03ec0495407bb460405180612333339530954291846040919493926060820195825260208201520152565b0390a3565b612341906119a4565b386122e2565b51903d90823e3d90fd5b8480fd5b85516307a4ced160e51b8152600490fd5b612387915060203d811161238d575b61237f8183611a0a565b810190612881565b3861227b565b503d612375565b87513d88823e3d90fd5b6123b291503d8088833e610cd28183611a0a565b3861220a565b85513d86823e3d90fd5b50600c5460c08201516123df9133906001600160a01b0316612899565b6122e4565b600b546123fc919033906001600160a01b0316612899565b386121a1565b5060009150600585146120ce565b50826120c7565b6000546001600160a01b0316330361080f57565b612433611c28565b50604051612440816119b7565b60025481526040516124518161196e565b60035481526020820152600454604082015260055460608201526040516124778161196e565b6006548152608082015260075460a082015260085460c082015260095460e0820152600a5461010082015290565b604051906124b2826119d3565b8160e06000918281528260208201526040516124cd8161196e565b83815260408201528260608201526040516124e78161196e565b83815260808201528260a08201528260c08201520152565b6125076124a5565b506001546040516316c1973960e01b81526001600160a01b0392831660048201529161010091829184916024918391165afa9182156125dd5760009261254c57505090565b9091823d84116125d6575b6125618184611a0a565b82019282840312610829575060e0906125b360405193612580856119d3565b825185526020830151602086015261259b8160408501611f5d565b60408601526060830151606086015260808301611f5d565b608084015260a081015160a084015260c081015160c0840152015160e082015290565b503d612557565b6040513d6000823e3d90fd5b6000604080516125f881611989565b828152826020820152015260405161260f81611989565b600f5481526010546020820152601154604082015290565b80516002556020810151516003556040810151600455606081015160055560808101515160065560a081015160075560c081015160085560e08101516009556101000151600a55565b6001546001600160a01b03908116803b156108205760009283610124926126b260405197889687956360d6081360e11b87521660048601526024850190611a78565b5af180156125dd576126c15750565b6126ca906119a4565b565b906126e4928151906040602084015193015193612b23565b90565b6001600160a01b039081169190821561275a57602460209260405194859384926370a0823160e01b84521660048301525afa908161272f575b5061272a57600090565b600190565b602090813d8111612753575b6127458183611a0a565b810103126108205738612720565b503d61273b565b505050600090565b600060443d106126e457604051600319913d83016004833e81516001600160401b03918282113d6024840111176127bf578184019485519384116127c7573d850101602084870101116127bf57506126e492910160200190611a0a565b949350505050565b50949350505050565b6040516370a0823160e01b81526001600160a01b0392831660048201529160209183916024918391165afa6000918161284e575b50612849575050600060033d1161283b575b6308c379a01461282557600090565b61282d612762565b61283657600090565b600090565b600481803e5160e01c612816565b101590565b90916020823d8211612879575b8161286860209383611a0a565b810103126108295750519038612804565b3d915061285b565b90816020910312610820575180151581036108205790565b918015801561291e575b6129195760405163a9059cbb60e01b81526001600160a01b0390921660048301526024820152906020908290816000816044810103926001600160a01b03165af19081156125dd576000916128fb575b501561169e57565b612913915060203d811161238d5761237f8183611a0a565b386128f3565b505050565b506001600160a01b038216156128a3565b929091811580156129ba575b6129b1576040516323b872dd60e01b81526001600160a01b039384166004820152908316602482015260448101919091529160209183916064918391600091165af160009181612991575b506126e45750600090565b6129aa91925060203d811161238d5761237f8183611a0a565b9038612986565b50505050600190565b506001600160a01b0381161561293b565b81810292918115918404141715611bc657565b60006040516129ec8161196e565b52620f424090818102918183041490151715611bc65760405190612a0f8261196e565b815290565b8115612a1e570490565b634e487b7160e01b600052601260045260246000fd5b929091926000604051612a468161196e565b528281108015612ade575b612acc5782612a7a938310612ac4575b5081848211612abc575b612a7491611e5b565b92611e5b565b80158015612ab4575b612a90576126e491612ae8565b50506000604051612aa08161196e565b52604051612aad8161196e565b6000815290565b508115612a83565b849150612a6b565b915038612a61565b505050506000604051612aa08161196e565b5083821015612a51565b906000604051612af78161196e565b52620f424091828102928184041490151715611bc657612b1691612a14565b60405190612a0f8261196e565b9291909260078110158061191e5760068214908115612b8f575b8115612b7f575b50612b775750821015612b5957505050600090565b811015612b67575050600190565b1015612b7257600290565b600390565b935050505090565b905061191e576005811438612b44565b5050600481146000612b3d565b620f424091612bbd916000604051612bb38161196e565b52519051906129cb565b0460405190612a0f8261196e565b90612b16916000604051612bde8161196e565b5251905190611bb9565b9180158015612c0d575b612c08576126e492612c03916129cb565b612a14565b505090565b508215612bf2565b909180158015612c53575b612c4d57612c32612c379284926129cb565b611bb9565b600019810191908211611bc6576126e491612a14565b50905090565b508115612c20565b9392919091612c686124a5565b506040850191612c8c83516000604051612c818161196e565b528551905190611e5b565b60405190612c998261196e565b8152602087019283519384612cb7575b505050505052606082015290565b612cca612c039361093e612d1c976129de565b612cda60808b0191825190612bcb565b6000604051612ce88161196e565b52519060405191612cf88361196e565b612d128c60c0620f42409182850687520192048251611bb9565b90525251906129cb565b612d27818651611e5b565b612d3660a08701918251611bb9565b905284523880808080612ca956fea2646970667358221220f3fe31008c300a1ea2949a7727e2dbdb57a042ad06c17c2216d60a66e88cc31964736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getStreamState()": {
        "details": "Get the current stream state",
        "returns": {
          "_0": "The current stream state"
        }
      },
      "getStreamStatus()": {
        "details": "Get the current stream status",
        "returns": {
          "_0": "The current stream status"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 107,
        "contract": "contracts/Stream.sol:Stream",
        "label": "creator",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 111,
        "contract": "contracts/Stream.sol:Stream",
        "label": "positionStorageAddress",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 113,
        "contract": "contracts/Stream.sol:Stream",
        "label": "initialized",
        "offset": 20,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 116,
        "contract": "contracts/Stream.sol:Stream",
        "label": "streamState",
        "offset": 0,
        "slot": "2",
        "type": "t_struct(StreamState)5706_storage"
      },
      {
        "astId": 119,
        "contract": "contracts/Stream.sol:Stream",
        "label": "streamTokens",
        "offset": 0,
        "slot": "11",
        "type": "t_struct(StreamTokens)5711_storage"
      },
      {
        "astId": 122,
        "contract": "contracts/Stream.sol:Stream",
        "label": "streamMetadata",
        "offset": 0,
        "slot": "13",
        "type": "t_struct(StreamMetadata)5685_storage"
      },
      {
        "astId": 125,
        "contract": "contracts/Stream.sol:Stream",
        "label": "streamStatus",
        "offset": 0,
        "slot": "14",
        "type": "t_enum(Status)5642"
      },
      {
        "astId": 128,
        "contract": "contracts/Stream.sol:Stream",
        "label": "streamTimes",
        "offset": 0,
        "slot": "15",
        "type": "t_struct(StreamTimes)5682_storage"
      },
      {
        "astId": 131,
        "contract": "contracts/Stream.sol:Stream",
        "label": "postStreamActions",
        "offset": 0,
        "slot": "18",
        "type": "t_struct(PostStreamActions)5731_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(Status)5642": {
        "encoding": "inplace",
        "label": "enum StreamTypes.Status",
        "numberOfBytes": "1"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Decimal)4553_storage": {
        "encoding": "inplace",
        "label": "struct Decimal",
        "members": [
          {
            "astId": 4552,
            "contract": "contracts/Stream.sol:Stream",
            "label": "value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(PoolInfo)5721_storage": {
        "encoding": "inplace",
        "label": "struct StreamTypes.PoolInfo",
        "members": [
          {
            "astId": 5720,
            "contract": "contracts/Stream.sol:Stream",
            "label": "poolOutSupplyAmount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(PostStreamActions)5731_storage": {
        "encoding": "inplace",
        "label": "struct StreamTypes.PostStreamActions",
        "members": [
          {
            "astId": 5724,
            "contract": "contracts/Stream.sol:Stream",
            "label": "poolInfo",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(PoolInfo)5721_storage"
          },
          {
            "astId": 5727,
            "contract": "contracts/Stream.sol:Stream",
            "label": "creatorVesting",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(VestingInfo)5718_storage"
          },
          {
            "astId": 5730,
            "contract": "contracts/Stream.sol:Stream",
            "label": "beneficiaryVesting",
            "offset": 0,
            "slot": "2",
            "type": "t_struct(VestingInfo)5718_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(StreamMetadata)5685_storage": {
        "encoding": "inplace",
        "label": "struct StreamTypes.StreamMetadata",
        "members": [
          {
            "astId": 5684,
            "contract": "contracts/Stream.sol:Stream",
            "label": "ipfsHash",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(StreamState)5706_storage": {
        "encoding": "inplace",
        "label": "struct StreamTypes.StreamState",
        "members": [
          {
            "astId": 5687,
            "contract": "contracts/Stream.sol:Stream",
            "label": "outRemaining",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5690,
            "contract": "contracts/Stream.sol:Stream",
            "label": "distIndex",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(Decimal)4553_storage"
          },
          {
            "astId": 5692,
            "contract": "contracts/Stream.sol:Stream",
            "label": "spentIn",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 5694,
            "contract": "contracts/Stream.sol:Stream",
            "label": "shares",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 5697,
            "contract": "contracts/Stream.sol:Stream",
            "label": "currentStreamedPrice",
            "offset": 0,
            "slot": "4",
            "type": "t_struct(Decimal)4553_storage"
          },
          {
            "astId": 5699,
            "contract": "contracts/Stream.sol:Stream",
            "label": "threshold",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 5701,
            "contract": "contracts/Stream.sol:Stream",
            "label": "inSupply",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 5703,
            "contract": "contracts/Stream.sol:Stream",
            "label": "outSupply",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 5705,
            "contract": "contracts/Stream.sol:Stream",
            "label": "lastUpdated",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_struct(StreamTimes)5682_storage": {
        "encoding": "inplace",
        "label": "struct StreamTypes.StreamTimes",
        "members": [
          {
            "astId": 5677,
            "contract": "contracts/Stream.sol:Stream",
            "label": "bootstrappingStartTime",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5679,
            "contract": "contracts/Stream.sol:Stream",
            "label": "streamStartTime",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5681,
            "contract": "contracts/Stream.sol:Stream",
            "label": "streamEndTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(StreamTokens)5711_storage": {
        "encoding": "inplace",
        "label": "struct StreamTypes.StreamTokens",
        "members": [
          {
            "astId": 5708,
            "contract": "contracts/Stream.sol:Stream",
            "label": "inSupplyToken",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 5710,
            "contract": "contracts/Stream.sol:Stream",
            "label": "outSupplyToken",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(VestingInfo)5718_storage": {
        "encoding": "inplace",
        "label": "struct StreamTypes.VestingInfo",
        "members": [
          {
            "astId": 5713,
            "contract": "contracts/Stream.sol:Stream",
            "label": "isVestingEnabled",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 5715,
            "contract": "contracts/Stream.sol:Stream",
            "label": "vestingDuration",
            "offset": 1,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 5717,
            "contract": "contracts/Stream.sol:Stream",
            "label": "cliffDuration",
            "offset": 5,
            "slot": "0",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}