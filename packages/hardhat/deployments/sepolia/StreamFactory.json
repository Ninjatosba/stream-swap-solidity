{
  "address": "0x132e4E7CC46d0e3607DE161e02453a27C9333874",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_streamCreationFee",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_streamCreationFeeToken",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal",
          "name": "_exitFeeRatio",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "_minWaitingDuration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minBootstrappingDuration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minStreamDuration",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_acceptedInSupplyTokens",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_feeCollector",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_protocolAdmin",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_tosVersion",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "BootstrappingDurationTooShort",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ContractFrozen",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FeeTransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientNativeToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientOutAmount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requiredTokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenBalance",
          "type": "uint256"
        }
      ],
      "name": "InsufficientTokenPayment",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidBootstrappingStartTime",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidBootstrappingTime",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidExitCondition",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidExitFeeRatio",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidFeeCollector",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInSupplyToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidOutSupplyToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidPosition",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidProtocolAdmin",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidStreamEndTime",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidStreamStartTime",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidToSVersion",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidVestingCliffDuration",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidVestingDuration",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidWithdrawAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotAdmin",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OperationNotAllowed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PaymentFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StreamAddressPredictionFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StreamDurationTooShort",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StreamEndMustBeAfterStart",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StreamInputTokenNotAccepted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StreamStartMustBeAfterBootstrapping",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TokenTransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Unauthorized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WaitingDurationTooShort",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "cap",
          "type": "uint256"
        }
      ],
      "name": "WithdrawAmountExceedsBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroOutSupplyNotAllowed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "tokensAdded",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "tokensRemoved",
          "type": "address[]"
        }
      ],
      "name": "AcceptedTokensUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "streamAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "subscriber",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "purchased",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "spentIn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "exitTimestamp",
          "type": "uint256"
        }
      ],
      "name": "Exited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newFeeCollector",
          "type": "address"
        }
      ],
      "name": "FeeCollectorUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "frozen",
          "type": "bool"
        }
      ],
      "name": "FrozenStateUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "streamCreationFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "exitFeeRatio",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minWaitingDuration",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minBootstrappingDuration",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minStreamDuration",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "tosVersion",
          "type": "string"
        }
      ],
      "name": "ParamsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newProtocolAdmin",
          "type": "address"
        }
      ],
      "name": "ProtocolAdminUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "streamAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "outSupply",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum IStreamTypes.Status",
          "name": "status",
          "type": "uint8"
        }
      ],
      "name": "StreamCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "streamOutToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "streamInToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "streamFactoryAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "streamOutAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bootstrappingStartTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "streamStartTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "streamEndTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "threshold",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "streamName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "tosVersion",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "streamAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "streamId",
          "type": "uint16"
        }
      ],
      "name": "StreamCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "streamAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "creatorRevenue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "exitFeeAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum IStreamTypes.Status",
          "name": "status",
          "type": "uint8"
        }
      ],
      "name": "StreamFinalized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "streamAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum IStreamTypes.Status",
          "name": "mainStatus",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lastUpdated",
          "type": "uint256"
        }
      ],
      "name": "StreamSynced",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "streamAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lastUpdated",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "newStatus",
          "type": "uint8"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct Decimal",
          "name": "distIndex",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "outRemaining",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "inSupply",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "spentIn",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct Decimal",
          "name": "currentStreamedPrice",
          "type": "tuple"
        }
      ],
      "name": "StreamSynced",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "streamAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "subscriber",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newShares",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalSharesAfter",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalInSupplyAfter",
          "type": "uint256"
        }
      ],
      "name": "Subscribed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "factoryAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "vestingContract",
          "type": "address"
        }
      ],
      "name": "VestingContractDeployed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "streamAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "subscriber",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "remainingInBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "remainingShares",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalInSupply",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalShares",
          "type": "uint256"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "NATIVE_TOKEN",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "acceptedInSupplyTokens",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_streamOutAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_outSupplyToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_bootstrappingStartTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_streamStartTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_streamEndTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_threshold",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_inSupplyToken",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_tosVersion",
          "type": "string"
        },
        {
          "internalType": "bytes32",
          "name": "_salt",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "isVestingEnabled",
              "type": "bool"
            },
            {
              "internalType": "uint16",
              "name": "vestingDuration",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "cliffDuration",
              "type": "uint16"
            }
          ],
          "internalType": "struct IStreamTypes.VestingInfo",
          "name": "_creatorVestingInfo",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "isVestingEnabled",
              "type": "bool"
            },
            {
              "internalType": "uint16",
              "name": "vestingDuration",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "cliffDuration",
              "type": "uint16"
            }
          ],
          "internalType": "struct IStreamTypes.VestingInfo",
          "name": "_beneficiaryVestingInfo",
          "type": "tuple"
        }
      ],
      "name": "createStream",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentStreamId",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "frozen",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAcceptedInSupplyTokens",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getParams",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "streamCreationFee",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "streamCreationFeeToken",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Decimal",
              "name": "exitFeeRatio",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "minWaitingDuration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minBootstrappingDuration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minStreamDuration",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "feeCollector",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "protocolAdmin",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "tosVersion",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "vestingAddress",
              "type": "address"
            }
          ],
          "internalType": "struct StreamFactory.Params",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_streamId",
          "type": "uint16"
        }
      ],
      "name": "getStream",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStreams",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "isAcceptedInSupplyToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_streamAddress",
          "type": "address"
        }
      ],
      "name": "isStream",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "params",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "streamCreationFee",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "streamCreationFeeToken",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal",
          "name": "exitFeeRatio",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "minWaitingDuration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minBootstrappingDuration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minStreamDuration",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "feeCollector",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "protocolAdmin",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "tosVersion",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "vestingAddress",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_salt",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "bytecodeHash",
          "type": "bytes32"
        }
      ],
      "name": "predictAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_frozen",
          "type": "bool"
        }
      ],
      "name": "setFrozen",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "streamAddresses",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokens_to_add",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "tokens_to_remove",
          "type": "address[]"
        }
      ],
      "name": "updateAcceptedTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeCollector",
          "type": "address"
        }
      ],
      "name": "updateFeeCollector",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_streamCreationFee",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal",
          "name": "_exitFeeRatio",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "_minWaitingDuration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minBootstrappingDuration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minStreamDuration",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_tosVersion",
          "type": "string"
        }
      ],
      "name": "updateParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_protocolAdmin",
          "type": "address"
        }
      ],
      "name": "updateProtocolAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe57cdd760e025efb38dd515d46015427978f77b636df42bd2742805140a13673",
  "receipt": {
    "to": null,
    "from": "0xB4eE189569597EFDB3bB48DB5ede8394d1D48e7b",
    "contractAddress": "0x132e4E7CC46d0e3607DE161e02453a27C9333874",
    "transactionIndex": 81,
    "gasUsed": "4637525",
    "logsBloom": "0x
    "blockHash": "0x7507f3724535945b3c1a1f3dffec4a1ee89ac6322bdc13830b4a530c06effbf3",
    "transactionHash": "0xe57cdd760e025efb38dd515d46015427978f77b636df42bd2742805140a13673",
    "logs": [
      {
        "transactionIndex": 81,
        "blockNumber": 8041084,
        "transactionHash": "0xe57cdd760e025efb38dd515d46015427978f77b636df42bd2742805140a13673",
        "address": "0x132e4E7CC46d0e3607DE161e02453a27C9333874",
        "topics": [
          "0x739fe22b8edefd6ce1fe32460f9cd54bf8e66fc7447f4c8a8131ce078a1988af",
          "0x000000000000000000000000132e4e7cc46d0e3607de161e02453a27c9333874"
        ],
        "data": "0x000000000000000000000000c847f6c7418ed83f6e3b0d7074c0b94b6b0b250a",
        "logIndex": 152,
        "blockHash": "0x7507f3724535945b3c1a1f3dffec4a1ee89ac6322bdc13830b4a530c06effbf3"
      }
    ],
    "blockNumber": 8041084,
    "cumulativeGasUsed": "14993827",
    "status": 1,
    "byzantium": true
  },
  "args": [
    1,
    "0x0000000000000000000000000000000000000000",
    {
      "value": 100000
    },
    1,
    1,
    1,
    [
      "0xA535094F2A638209453BE70Fa533d6a4e878BA7f"
    ],
    "0xB4eE189569597EFDB3bB48DB5ede8394d1D48e7b",
    "0xB4eE189569597EFDB3bB48DB5ede8394d1D48e7b",
    "1.0.0"
  ],
  "numDeployments": 1,
  "solcInputHash": "93eac45bc8008cfba4a279b821e75bdf",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_streamCreationFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_streamCreationFeeToken\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal\",\"name\":\"_exitFeeRatio\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_minWaitingDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minBootstrappingDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minStreamDuration\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_acceptedInSupplyTokens\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_feeCollector\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_protocolAdmin\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_tosVersion\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"BootstrappingDurationTooShort\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ContractFrozen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FeeTransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientNativeToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientOutAmount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requiredTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenBalance\",\"type\":\"uint256\"}],\"name\":\"InsufficientTokenPayment\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidBootstrappingStartTime\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidBootstrappingTime\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidExitCondition\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidExitFeeRatio\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidFeeCollector\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInSupplyToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidOutSupplyToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPosition\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidProtocolAdmin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidStreamEndTime\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidStreamStartTime\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidToSVersion\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidVestingCliffDuration\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidVestingDuration\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidWithdrawAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAdmin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OperationNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PaymentFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StreamAddressPredictionFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StreamDurationTooShort\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StreamEndMustBeAfterStart\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StreamInputTokenNotAccepted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StreamStartMustBeAfterBootstrapping\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenTransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WaitingDurationTooShort\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cap\",\"type\":\"uint256\"}],\"name\":\"WithdrawAmountExceedsBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroOutSupplyNotAllowed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokensAdded\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokensRemoved\",\"type\":\"address[]\"}],\"name\":\"AcceptedTokensUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"streamAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"subscriber\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"purchased\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"spentIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"exitTimestamp\",\"type\":\"uint256\"}],\"name\":\"Exited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newFeeCollector\",\"type\":\"address\"}],\"name\":\"FeeCollectorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenStateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"streamCreationFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"exitFeeRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minWaitingDuration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minBootstrappingDuration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minStreamDuration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"tosVersion\",\"type\":\"string\"}],\"name\":\"ParamsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newProtocolAdmin\",\"type\":\"address\"}],\"name\":\"ProtocolAdminUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"streamAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"outSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum IStreamTypes.Status\",\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"StreamCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"streamOutToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"streamInToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"streamFactoryAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"streamOutAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bootstrappingStartTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"streamStartTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"streamEndTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"streamName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"tosVersion\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"streamAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"streamId\",\"type\":\"uint16\"}],\"name\":\"StreamCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"streamAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"creatorRevenue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"exitFeeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum IStreamTypes.Status\",\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"StreamFinalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"streamAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum IStreamTypes.Status\",\"name\":\"mainStatus\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastUpdated\",\"type\":\"uint256\"}],\"name\":\"StreamSynced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"streamAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastUpdated\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"newStatus\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct Decimal\",\"name\":\"distIndex\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"outRemaining\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"spentIn\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct Decimal\",\"name\":\"currentStreamedPrice\",\"type\":\"tuple\"}],\"name\":\"StreamSynced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"streamAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"subscriber\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newShares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalSharesAfter\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalInSupplyAfter\",\"type\":\"uint256\"}],\"name\":\"Subscribed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"factoryAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vestingContract\",\"type\":\"address\"}],\"name\":\"VestingContractDeployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"streamAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"subscriber\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remainingInBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remainingShares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalInSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalShares\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"NATIVE_TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"acceptedInSupplyTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_streamOutAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_outSupplyToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_bootstrappingStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_streamStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_streamEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_inSupplyToken\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_tosVersion\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"_salt\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isVestingEnabled\",\"type\":\"bool\"},{\"internalType\":\"uint16\",\"name\":\"vestingDuration\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"cliffDuration\",\"type\":\"uint16\"}],\"internalType\":\"struct IStreamTypes.VestingInfo\",\"name\":\"_creatorVestingInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isVestingEnabled\",\"type\":\"bool\"},{\"internalType\":\"uint16\",\"name\":\"vestingDuration\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"cliffDuration\",\"type\":\"uint16\"}],\"internalType\":\"struct IStreamTypes.VestingInfo\",\"name\":\"_beneficiaryVestingInfo\",\"type\":\"tuple\"}],\"name\":\"createStream\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentStreamId\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"frozen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAcceptedInSupplyTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getParams\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"streamCreationFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"streamCreationFeeToken\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal\",\"name\":\"exitFeeRatio\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"minWaitingDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBootstrappingDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minStreamDuration\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"feeCollector\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"protocolAdmin\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"tosVersion\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"vestingAddress\",\"type\":\"address\"}],\"internalType\":\"struct StreamFactory.Params\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_streamId\",\"type\":\"uint16\"}],\"name\":\"getStream\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStreams\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"isAcceptedInSupplyToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_streamAddress\",\"type\":\"address\"}],\"name\":\"isStream\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"params\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"streamCreationFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"streamCreationFeeToken\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal\",\"name\":\"exitFeeRatio\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"minWaitingDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBootstrappingDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minStreamDuration\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"feeCollector\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"protocolAdmin\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"tosVersion\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"vestingAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_salt\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"bytecodeHash\",\"type\":\"bytes32\"}],\"name\":\"predictAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_frozen\",\"type\":\"bool\"}],\"name\":\"setFrozen\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"streamAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens_to_add\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"tokens_to_remove\",\"type\":\"address[]\"}],\"name\":\"updateAcceptedTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeCollector\",\"type\":\"address\"}],\"name\":\"updateFeeCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_streamCreationFee\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal\",\"name\":\"_exitFeeRatio\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_minWaitingDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minBootstrappingDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minStreamDuration\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tosVersion\",\"type\":\"string\"}],\"name\":\"updateParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_protocolAdmin\",\"type\":\"address\"}],\"name\":\"updateProtocolAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/StreamFactory.sol\":\"StreamFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/DecimalMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\n/**\\n * @title Decimal type and math operations\\n * @dev Library for handling decimal math operations with fixed-point arithmetic\\n */\\n\\n// Define the Decimal struct at the top level for easier imports\\nstruct Decimal {\\n    uint256 value; // Value scaled by DECIMAL_PRECISION\\n}\\n\\n/**\\n * @title DecimalMath\\n * @dev Library for handling decimal math operations with fixed-point arithmetic\\n */\\nlibrary DecimalMath {\\n    // We'll use 6 decimal places for precision\\n    uint256 public constant DECIMAL_PRECISION = 1e6;\\n\\n    // Convert a regular number to a Decimal\\n    function fromNumber(uint256 value) internal pure returns (Decimal memory) {\\n        return Decimal({ value: value * DECIMAL_PRECISION });\\n    }\\n\\n    // Convert a Decimal to a regular number while keeping the remainder\\n    function toNumber(Decimal memory d) internal pure returns (uint256, Decimal memory) {\\n        return (d.value / DECIMAL_PRECISION, Decimal({ value: d.value % DECIMAL_PRECISION }));\\n    }\\n\\n    // Floor division for Decimal\\n    function floor(Decimal memory d) internal pure returns (uint256) {\\n        return d.value / DECIMAL_PRECISION;\\n    }\\n\\n    // Ceiling division for Decimal\\n    function ceil(Decimal memory d) internal pure returns (uint256) {\\n        return (d.value + DECIMAL_PRECISION - 1) / DECIMAL_PRECISION;\\n    }\\n\\n    // Multiply two Decimals\\n    function mul(Decimal memory a, Decimal memory b) internal pure returns (Decimal memory) {\\n        return Decimal({ value: (a.value * b.value) / DECIMAL_PRECISION });\\n    }\\n\\n    // Multiply Decimal by a scalar\\n    function mulScalar(Decimal memory a, uint256 scalar) internal pure returns (Decimal memory) {\\n        return Decimal({ value: a.value * scalar });\\n    }\\n\\n    // Divide two Decimals\\n    function div(Decimal memory a, Decimal memory b) internal pure returns (Decimal memory) {\\n        return Decimal({ value: (a.value * DECIMAL_PRECISION) / b.value });\\n    }\\n\\n    // Divide Decimal by a scalar\\n    function divScalar(Decimal memory a, uint256 scalar) internal pure returns (Decimal memory) {\\n        return Decimal({ value: a.value / scalar });\\n    }\\n\\n    // Add two Decimals\\n    function add(Decimal memory a, Decimal memory b) internal pure returns (Decimal memory) {\\n        return Decimal({ value: a.value + b.value });\\n    }\\n\\n    // Subtract two Decimals\\n    function sub(Decimal memory a, Decimal memory b) internal pure returns (Decimal memory) {\\n        return Decimal({ value: a.value - b.value });\\n    }\\n\\n    // From ratio to Decimal\\n    function fromRatio(uint256 num, uint256 denom) internal pure returns (Decimal memory) {\\n        return Decimal({ value: (num * DECIMAL_PRECISION) / denom });\\n    }\\n\\n    // > operator for Decimals\\n    function gt(Decimal memory a, Decimal memory b) internal pure returns (bool) {\\n        return a.value > b.value;\\n    }\\n\\n    // < operator for Decimals\\n    function lt(Decimal memory a, Decimal memory b) internal pure returns (bool) {\\n        return a.value < b.value;\\n    }\\n}\\n\",\"keccak256\":\"0x9b3742b7416da139de7bd5e1f24cf402410c717584a6b1c7372590f2d3f633c1\",\"license\":\"MIT\"},\"contracts/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\ninterface IERC20 {\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n    function balanceOf(address account) external view returns (uint256);\\n} \",\"keccak256\":\"0xfe83f10f7eeab215027ab774b0c6ede99d15c8a1c950f8a5930e8de6196418d1\",\"license\":\"MIT\"},\"contracts/IVesting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\n/**\\n * @title IVesting\\n * @dev Interface for the Vesting contract that manages token vesting schedules\\n */\\ninterface IVesting {\\n    /**\\n     * @dev Struct representing a vesting schedule for a beneficiary\\n     */\\n    struct VestingSchedule {\\n        uint256 cliffTime;      // Timestamp when cliff period ends\\n        uint256 endTime;        // Timestamp when vesting period ends\\n        uint256 totalAmount;    // Total amount to be vested\\n        uint256 releasedAmount; // Amount already released to beneficiary\\n    }\\n    \\n    /**\\n     * @dev Stakes funds for vesting to a beneficiary\\n     * @param beneficiary Address that will receive the vested tokens\\n     * @param tokenAddress Address of the token being vested\\n     * @param cliffTime Timestamp after which the first tokens can be withdrawn\\n     * @param endTime Timestamp when all tokens will be vested\\n     * @param totalAmount Total amount of tokens to vest\\n     */\\n    function stakeFunds(\\n        address beneficiary,\\n        address tokenAddress,\\n        uint256 cliffTime,\\n        uint256 endTime,\\n        uint256 totalAmount\\n    ) external;\\n    \\n    /**\\n     * @dev Withdraws available vested funds for the caller\\n     * @param tokenAddress Address of the token to withdraw\\n     * @param scheduleIndex Index of the vesting schedule to withdraw from\\n     */\\n    function withdrawFunds(address tokenAddress, uint256 scheduleIndex) external;\\n    \\n    /**\\n     * @dev Retrieves all vesting schedules for a beneficiary for a specific token\\n     * @param beneficiary Address of the beneficiary\\n     * @param tokenAddress Address of the token\\n     * @return Array of vesting schedules\\n     */\\n    function getStakesForBeneficiary(\\n        address beneficiary,\\n        address tokenAddress\\n    ) external view returns (VestingSchedule[] memory);\\n    \\n    /**\\n     * @dev Calculates the amount available for withdrawal from a vesting schedule\\n     * @param vestingSchedule The vesting schedule to check\\n     * @return The withdrawable amount\\n     */\\n    function calculateWithdrawableAmount(VestingSchedule memory vestingSchedule) \\n        external \\n        view \\n        returns (uint256);\\n}\\n\",\"keccak256\":\"0xbbe655b16c0fa6b4468e4c4c6266203ee1d38f3deda7a862c05e5043249a2f0f\",\"license\":\"MIT\"},\"contracts/PositionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"./PositionTypes.sol\\\";\\nimport \\\"./DecimalMath.sol\\\";\\n\\ncontract PositionStorage {\\n    using PositionTypes for PositionTypes.Position;\\n\\n    mapping(address => PositionTypes.Position) private positions;\\n    address public immutable streamContractAddress;\\n\\n    constructor() {\\n        streamContractAddress = msg.sender;\\n    }\\n\\n    function getPosition(address _owner) external view returns (PositionTypes.Position memory) {\\n        return positions[_owner];\\n    }\\n\\n    modifier onlySender() {\\n        require(msg.sender == streamContractAddress, \\\"Position can only be set by the stream contract\\\");\\n        _;\\n    }\\n\\n    function createPosition(\\n        address owner,\\n        uint256 inBalance,\\n        uint256 shares,\\n        Decimal memory index\\n    ) external onlySender {\\n        positions[owner] = PositionTypes.Position(\\n            inBalance,\\n            shares,\\n            index,\\n            block.timestamp,\\n            DecimalMath.fromNumber(0),\\n            0,\\n            0,\\n            0\\n        );\\n    }\\n\\n    function updatePosition(address owner, PositionTypes.Position memory position) external onlySender {\\n        positions[owner] = position;\\n    }\\n\\n    function setExitDate(address owner, uint256 exitDate) external onlySender {\\n        positions[owner].exitDate = exitDate;\\n    }\\n}\\n\",\"keccak256\":\"0x0218f4e33af9823c02c2a4de973925f6a4f59a35bd68da3ea268680332b24fef\",\"license\":\"MIT\"},\"contracts/PositionTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"./DecimalMath.sol\\\";\\n\\nlibrary PositionTypes {\\n    struct Position {\\n        uint256 inBalance;\\n        uint256 shares;\\n        Decimal index;\\n        uint256 lastUpdateTime;\\n        Decimal pendingReward;\\n        uint256 spentIn;\\n        uint256 purchased;\\n        uint256 exitDate;\\n    }\\n}\\n\",\"keccak256\":\"0x6991ac31893c9a06dd304a8e5ecd5e123621c8b2deb69d4b26c466489fcfbb82\",\"license\":\"MIT\"},\"contracts/Stream.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"./PositionStorage.sol\\\";\\nimport \\\"./PositionTypes.sol\\\";\\nimport \\\"./StreamEvents.sol\\\";\\nimport \\\"./StreamErrors.sol\\\";\\nimport \\\"./StreamTypes.sol\\\";\\nimport \\\"./StreamFactory.sol\\\";\\nimport \\\"./DecimalMath.sol\\\";\\nimport \\\"./StreamMathLib.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\nimport \\\"./IVesting.sol\\\";\\n\\ncontract Stream is IStreamErrors, IStreamEvents {\\n    address public creator;\\n    address public positionStorageAddress;\\n    string public name;\\n\\n    IStreamTypes.StreamState public streamState;\\n    IStreamTypes.StreamTokens public streamTokens;\\n    IStreamTypes.StreamMetadata public streamMetadata;\\n    IStreamTypes.Status public streamStatus;\\n    IStreamTypes.StreamTimes public streamTimes;\\n    IStreamTypes.VestingInfo public creatorVestingInfo;\\n    IStreamTypes.VestingInfo public beneficiaryVestingInfo;\\n    address public factory;\\n\\n    PositionStorage public positionStorage;\\n\\n    // constructor should return its address\\n    constructor(\\n        uint256 _streamOutAmount,\\n        address _outSupplyToken,\\n        uint256 _bootstrappingStartTime,\\n        uint256 _streamStartTime,\\n        uint256 _streamEndTime,\\n        uint256 _threshold,\\n        string memory _name,\\n        address _inSupplyToken,\\n        address _creator,\\n        IStreamTypes.VestingInfo memory _creatorVestingInfo,\\n        IStreamTypes.VestingInfo memory _beneficiaryVestingInfo\\n    ) {\\n        // Validate that output token is a valid ERC20\\n        if (!isValidERC20(_outSupplyToken, msg.sender)) {\\n            revert InvalidOutSupplyToken();\\n        }\\n\\n        // Check if the contract has enough balance of output token\\n        if (!hasEnoughBalance(_outSupplyToken, address(this), _streamOutAmount)) {\\n            revert InsufficientOutAmount();\\n        }\\n\\n        // Validate that in token is a valid ERC20\\n        if (!isValidERC20(_inSupplyToken, msg.sender)) {\\n            revert InvalidInSupplyToken();\\n        }\\n\\n        // Validate and set creator vesting info\\n        if (_creatorVestingInfo.isVestingEnabled) {\\n            // Validate vesting duration\\n            if (_creatorVestingInfo.vestingDuration == 0) {\\n                revert InvalidVestingDuration();\\n            }\\n            if (_creatorVestingInfo.cliffDuration == 0) {\\n                revert InvalidVestingCliffDuration();\\n            }\\n            if (_creatorVestingInfo.cliffDuration >= _creatorVestingInfo.vestingDuration) {\\n                revert InvalidVestingCliffDuration();\\n            }\\n            // set vesting info\\n            creatorVestingInfo = _creatorVestingInfo;\\n        }\\n\\n        // Validate and set beneficiary vesting info\\n        if (_beneficiaryVestingInfo.isVestingEnabled) {\\n            // Validate vesting duration\\n            if (_beneficiaryVestingInfo.vestingDuration == 0) {\\n                revert InvalidVestingDuration();\\n            }\\n            if (_beneficiaryVestingInfo.cliffDuration == 0) {\\n                revert InvalidVestingCliffDuration();\\n            }\\n            if (_beneficiaryVestingInfo.cliffDuration >= _beneficiaryVestingInfo.vestingDuration) {\\n                revert InvalidVestingCliffDuration();\\n            }\\n            // set vesting info\\n            beneficiaryVestingInfo = _beneficiaryVestingInfo;\\n        }\\n\\n        creator = _creator;\\n        positionStorage = new PositionStorage();\\n        positionStorageAddress = address(positionStorage);\\n\\n        streamState = IStreamTypes.StreamState({\\n            distIndex: DecimalMath.fromNumber(0),\\n            outRemaining: _streamOutAmount,\\n            inSupply: 0,\\n            spentIn: 0,\\n            shares: 0,\\n            currentStreamedPrice: DecimalMath.fromNumber(0),\\n            threshold: _threshold,\\n            outSupply: _streamOutAmount,\\n            lastUpdated: block.timestamp\\n        });\\n\\n        streamTokens = IStreamTypes.StreamTokens({ inSupplyToken: _inSupplyToken, outSupplyToken: _outSupplyToken });\\n\\n        streamMetadata = IStreamTypes.StreamMetadata({ name: _name });\\n\\n        streamStatus = IStreamTypes.Status.Waiting;\\n\\n        streamTimes = IStreamTypes.StreamTimes({\\n            bootstrappingStartTime: _bootstrappingStartTime,\\n            streamStartTime: _streamStartTime,\\n            streamEndTime: _streamEndTime\\n        });\\n\\n        // Store the factory address\\n        factory = msg.sender;\\n    }\\n\\n    function syncStream(\\n        IStreamTypes.StreamState memory state,\\n        IStreamTypes.StreamTimes memory times,\\n        uint256 nowTime\\n    ) internal pure returns (IStreamTypes.StreamState memory) {\\n        Decimal memory diff = StreamMathLib.calculateDiff(\\n            nowTime,\\n            times.streamStartTime,\\n            times.streamEndTime,\\n            state.lastUpdated\\n        );\\n\\n        if (diff.value > 0) {\\n            IStreamTypes.StreamState memory updatedState = StreamMathLib.calculateUpdatedState(state, diff);\\n            return updatedState;\\n        }\\n\\n        return state;\\n    }\\n\\n    function saveStreamState(IStreamTypes.StreamState memory state) internal {\\n        streamState = state;\\n    }\\n\\n    function loadStreamState() internal view returns (IStreamTypes.StreamState memory) {\\n        return streamState;\\n    }\\n\\n    /**\\n     * @dev Validates if an operation is allowed based on the current stream status\\n     * @param allowedStatuses Array of allowed statuses for the operation\\n     * @return bool True if the operation is allowed, false otherwise\\n     */\\n    function isOperationAllowed(\\n        IStreamTypes.Status currentStatus,\\n        IStreamTypes.Status[] memory allowedStatuses\\n    ) internal pure returns (bool) {\\n        for (uint256 i = 0; i < allowedStatuses.length; i++) {\\n            if (currentStatus == allowedStatuses[i]) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @dev Safely transfers tokens from the contract to a recipient\\n     * @param tokenAddress Address of the token to transfer\\n     * @param recipient Address of the recipient\\n     * @param amount Amount of tokens to transfer\\n     * @return bool True if the transfer was successful\\n     */\\n    function safeTokenTransfer(address tokenAddress, address recipient, uint256 amount) internal returns (bool) {\\n        if (amount == 0 || recipient == address(0)) {\\n            return true;\\n        }\\n\\n        IERC20 token = IERC20(tokenAddress);\\n        bool success = token.transfer(recipient, amount);\\n        if (!success) {\\n            revert PaymentFailed();\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Checks if the threshold has been reached for stream finalization\\n     * @return bool True if the threshold has been reached, false otherwise\\n     */\\n    function isThresholdReached(IStreamTypes.StreamState memory state) internal pure returns (bool) {\\n        return state.spentIn >= state.threshold;\\n    }\\n\\n    /**\\n     * @dev Validates a position exists and is active\\n     * @param position The position to validate\\n     * @return bool True if the position is valid and active\\n     */\\n    function isValidActivePosition(PositionTypes.Position memory position) internal pure returns (bool) {\\n        return position.shares > 0 && position.exitDate == 0;\\n    }\\n\\n    function withdraw(uint256 cap) external {\\n        if (cap == 0) {\\n            revert InvalidWithdrawAmount();\\n        }\\n\\n        // Load position once\\n        PositionTypes.Position memory position = loadPosition(msg.sender);\\n\\n        // Check if position is valid and active\\n        if (!isValidActivePosition(position)) {\\n            revert InvalidPosition();\\n        }\\n\\n        if (cap > position.inBalance) {\\n            revert WithdrawAmountExceedsBalance(cap);\\n        }\\n\\n        // load stream times\\n        IStreamTypes.StreamTimes memory times = loadStreamTimes();\\n\\n        // Load and update status\\n        IStreamTypes.Status status = loadStreamStatus();\\n        status = syncStreamStatus(status, times, block.timestamp);\\n\\n        // Check if operation is allowed\\n        IStreamTypes.Status[] memory allowedStatuses = new IStreamTypes.Status[](2);\\n        allowedStatuses[0] = IStreamTypes.Status.Active;\\n        allowedStatuses[1] = IStreamTypes.Status.Bootstrapping;\\n        isOperationAllowed(status, allowedStatuses);\\n\\n        // Save the updated status\\n        saveStreamStatus(status);\\n\\n        // Load and update stream state\\n        IStreamTypes.StreamState memory state = loadStream();\\n        state = syncStream(state, times, block.timestamp);\\n\\n        // Sync position with the updated state\\n        position = StreamMathLib.syncPosition(position, state.distIndex, state.shares, state.inSupply, block.timestamp);\\n\\n        if (cap == position.inBalance) {\\n            position.shares = 0;\\n            position.inBalance = 0;\\n        } else {\\n            position.shares =\\n                position.shares -\\n                StreamMathLib.computeSharesAmount(cap, true, state.inSupply, position.shares);\\n            position.inBalance = position.inBalance - cap;\\n        }\\n\\n        // Update stream state\\n        state.inSupply = state.inSupply - cap;\\n        state.shares = state.shares - StreamMathLib.computeSharesAmount(cap, true, state.inSupply, state.shares);\\n\\n        // Save everything at the end\\n        savePosition(msg.sender, position);\\n        saveStream(state);\\n\\n        // Token transfer\\n        safeTokenTransfer(streamTokens.inSupplyToken, msg.sender, cap);\\n        emit Withdrawn(address(this), msg.sender, position.inBalance, position.shares, state.inSupply, state.shares);\\n    }\\n\\n    function subscribe(uint256 amountIn) external payable {\\n        // Load status once\\n        IStreamTypes.Status status = loadStreamStatus();\\n        IStreamTypes.StreamTimes memory times = loadStreamTimes();\\n        // Update the loaded status\\n        status = syncStreamStatus(status, times, block.timestamp);\\n\\n        // Check if operation is allowed with the updated status\\n        IStreamTypes.Status[] memory allowedStatuses = new IStreamTypes.Status[](2);\\n        allowedStatuses[0] = IStreamTypes.Status.Bootstrapping;\\n        allowedStatuses[1] = IStreamTypes.Status.Active;\\n        isOperationAllowed(status, allowedStatuses);\\n        // Save the updated status\\n        saveStreamStatus(status);\\n\\n        // Validate if sender has enough tokens\\n        IERC20 streamInToken = IERC20(streamTokens.inSupplyToken);\\n        uint256 streamInTokenBalance = streamInToken.balanceOf(msg.sender);\\n        if (streamInTokenBalance < amountIn) {\\n            revert InsufficientTokenPayment(amountIn, streamInTokenBalance);\\n        }\\n\\n        // Transfer tokens from sender to this contract\\n        bool success = streamInToken.transferFrom(msg.sender, address(this), amountIn);\\n        if (!success) {\\n            revert PaymentFailed();\\n        }\\n\\n        // Load position once\\n        PositionTypes.Position memory position = loadPosition(msg.sender);\\n\\n        // Load stream state once\\n        IStreamTypes.StreamState memory state = loadStream();\\n\\n        // Update the stream state\\n        state = syncStream(state);\\n\\n        uint256 newShares = 0;\\n\\n        if (position.shares == 0) {\\n            // New position case\\n            newShares = StreamMathLib.computeSharesAmount(amountIn, false, state.inSupply, state.shares);\\n            position = PositionTypes.Position({\\n                inBalance: amountIn,\\n                shares: newShares,\\n                index: state.distIndex,\\n                lastUpdateTime: block.timestamp,\\n                pendingReward: DecimalMath.fromNumber(0),\\n                spentIn: 0,\\n                purchased: 0,\\n                exitDate: 0\\n            });\\n        } else {\\n            // Update existing position\\n            newShares = StreamMathLib.computeSharesAmount(amountIn, false, state.inSupply, state.shares);\\n            position = StreamMathLib.syncPosition(\\n                position,\\n                state.distIndex,\\n                state.shares,\\n                state.inSupply,\\n                block.timestamp\\n            );\\n            position.inBalance += amountIn;\\n            position.shares += newShares;\\n        }\\n\\n        // Update StreamState\\n        state.inSupply += amountIn;\\n        state.shares += newShares;\\n\\n        // Save everything once we're done modifying\\n        savePosition(msg.sender, position);\\n        saveStream(state);\\n\\n        // Emit event\\n        emit Subscribed(address(this), msg.sender, amountIn, newShares, state.inSupply, state.shares);\\n    }\\n\\n    function exitStream() external {\\n        // Load position\\n        PositionTypes.Position memory position = loadPosition(msg.sender);\\n\\n        // Check if position is valid and active\\n        if (!isValidActivePosition(position)) {\\n            revert InvalidPosition();\\n        }\\n\\n        // Load and update stream state\\n        IStreamTypes.StreamState memory state = loadStream();\\n        state = syncStream(state);\\n\\n        // Sync position with updated state\\n        position = StreamMathLib.syncPosition(position, state.distIndex, state.shares, state.inSupply, block.timestamp);\\n\\n        // Load and update status\\n        IStreamTypes.Status status = loadStreamStatus();\\n        IStreamTypes.StreamTimes memory times = loadStreamTimes();\\n        status = syncStreamStatus(status, times, block.timestamp);\\n\\n        bool thresholdReached = isThresholdReached(state);\\n\\n        // Handle token distributions based on exit scenario\\n        handleExitDistribution(status, thresholdReached, position, beneficiaryVestingInfo);\\n\\n        // Set exit date\\n        position.exitDate = block.timestamp;\\n\\n        // Save everything\\n        saveStreamStatus(status);\\n        saveStream(state);\\n        savePosition(msg.sender, position);\\n\\n        emit Exited(address(this), msg.sender, position.purchased, position.spentIn, block.timestamp);\\n    }\\n\\n    function handleExitDistribution(\\n        IStreamTypes.Status status,\\n        bool thresholdReached,\\n        PositionTypes.Position memory position,\\n        IStreamTypes.VestingInfo memory vestingInfo\\n    ) internal {\\n        // Case 1: Successful stream completion\\n        if (isSuccessfulExit(status, thresholdReached)) {\\n            // Return any unused input tokens\\n            if (position.inBalance > 0) {\\n                safeTokenTransfer(streamTokens.inSupplyToken, msg.sender, position.inBalance);\\n            }\\n            if (vestingInfo.isVestingEnabled) {\\n                // Distribute earned output tokens\\n                uint256 amountToDistribute = position.purchased;\\n                // Load factory params\\n                StreamFactory factoryContract = StreamFactory(factory);\\n                StreamFactory.Params memory params = factoryContract.getParams();\\n                address vestingContractAddress = params.vestingAddress;\\n                IVesting vestingContract = IVesting(vestingContractAddress);\\n                // Create vesting schedule\\n                (uint256 cliffTime, uint256 endTime) = StreamMathLib.calculateVestingSchedule(block.timestamp, vestingInfo.cliffDuration, vestingInfo.vestingDuration);\\n                // Transfer tokens to vesting contract\\n                safeTokenTransfer(streamTokens.outSupplyToken, vestingContractAddress, amountToDistribute);\\n                // Create vesting schedule\\n                vestingContract.stakeFunds(msg.sender, streamTokens.outSupplyToken, cliffTime, endTime, amountToDistribute);\\n            }\\n            return;\\n        }\\n\\n        // Case 2: Refund scenario\\n        if (isRefundExit(status, thresholdReached)) {\\n            // Full refund of all input tokens (both spent and unspent)\\n            uint256 totalRefund = position.inBalance + position.spentIn;\\n            safeTokenTransfer(streamTokens.inSupplyToken, msg.sender, totalRefund);\\n            return;\\n        }\\n\\n        // If neither condition is met, the exit is not allowed\\n        revert InvalidExitCondition();\\n    }\\n\\n    function isSuccessfulExit(IStreamTypes.Status status, bool thresholdReached) internal pure returns (bool) {\\n        return\\n            (status == IStreamTypes.Status.Ended && thresholdReached) ||\\n            (status == IStreamTypes.Status.FinalizedStreamed);\\n    }\\n\\n    function isRefundExit(IStreamTypes.Status status, bool thresholdReached) internal pure returns (bool) {\\n        return\\n            status == IStreamTypes.Status.Cancelled ||\\n            status == IStreamTypes.Status.FinalizedRefunded ||\\n            (status == IStreamTypes.Status.Ended && !thresholdReached);\\n    }\\n\\n    function finalizeStream() external {\\n        assertIsCreator();\\n\\n        // Load and update status\\n        IStreamTypes.Status status = loadStreamStatus();\\n        IStreamTypes.StreamTimes memory times = loadStreamTimes();\\n        status = syncStreamStatus(status, times, block.timestamp);\\n\\n        // Check if operation is allowed\\n        IStreamTypes.Status[] memory allowedStatuses = new IStreamTypes.Status[](1);\\n        allowedStatuses[0] = IStreamTypes.Status.Ended;\\n        isOperationAllowed(status, allowedStatuses);\\n\\n        // Load and update stream state\\n        IStreamTypes.StreamState memory state = loadStream();\\n        state = syncStream(state, times, block.timestamp);\\n\\n        bool thresholdReached = isThresholdReached(state);\\n\\n        if (thresholdReached) {\\n            // Get fee collector from factory\\n            StreamFactory factoryContract = StreamFactory(factory);\\n            StreamFactory.Params memory params = factoryContract.getParams();\\n            address feeCollector = params.feeCollector;\\n            Decimal memory exitFeeRatio = params.exitFeeRatio;\\n\\n            // Calculate exit fee\\n            (uint256 feeAmount, uint256 creatorRevenue) = StreamMathLib.calculateExitFee(state.spentIn, exitFeeRatio);\\n\\n            // Transfer fee to fee collector if needed\\n            if (feeAmount > 0) {\\n                safeTokenTransfer(streamTokens.inSupplyToken, feeCollector, feeAmount);\\n            }\\n\\n            // Send revenue to creator\\n            safeTokenTransfer(streamTokens.inSupplyToken, creator, creatorRevenue);\\n\\n            // Update status\\n            status = IStreamTypes.Status.FinalizedStreamed;\\n\\n            // Refund out tokens to creator if left any\\n            if (state.outRemaining > 0) {\\n                safeTokenTransfer(streamTokens.outSupplyToken, creator, state.outRemaining);\\n            }\\n        } else {\\n            // Update status\\n            status = IStreamTypes.Status.FinalizedRefunded;\\n\\n            // Refund out tokens to creator\\n            safeTokenTransfer(streamTokens.outSupplyToken, creator, state.outSupply);\\n        }\\n\\n        // Save everything\\n        saveStreamStatus(status);\\n        saveStream(state);\\n\\n        emit StreamFinalized(address(this), creator, state.spentIn, state.outRemaining, status);\\n    }\\n\\n    function syncStreamExternal() external {\\n        // Load, update and save stream state\\n        IStreamTypes.StreamState memory state = loadStream();\\n        IStreamTypes.StreamTimes memory times = loadStreamTimes();\\n        state = syncStream(state, times, block.timestamp);\\n        saveStream(state);\\n\\n        // Load, update and save status\\n        IStreamTypes.Status status = loadStreamStatus();\\n        status = syncStreamStatus(status, times, block.timestamp);\\n        saveStreamStatus(status);\\n\\n        emit StreamSynced(\\n            address(this),\\n            state.lastUpdated,\\n            uint8(status),\\n            state.distIndex,\\n            state.outRemaining,\\n            state.inSupply,\\n            state.spentIn,\\n            state.currentStreamedPrice\\n        );\\n    }\\n\\n    function cancelStream() external {\\n        assertIsCreator();\\n\\n        // Load and update status\\n        IStreamTypes.Status status = loadStreamStatus();\\n        IStreamTypes.StreamTimes memory times = loadStreamTimes();\\n        status = syncStreamStatus(status, times, block.timestamp);\\n\\n        // Check if operation is allowed\\n        IStreamTypes.Status[] memory allowedStatuses = new IStreamTypes.Status[](1);\\n        allowedStatuses[0] = IStreamTypes.Status.Waiting;\\n        bool isAllowed = isOperationAllowed(status, allowedStatuses);\\n        if (!isAllowed) {\\n            revert OperationNotAllowed();\\n        }\\n\\n        // Refund out tokens to creator\\n        safeTokenTransfer(streamTokens.outSupplyToken, creator, streamState.outSupply);\\n\\n        // Update status\\n        status = IStreamTypes.Status.Cancelled;\\n        saveStreamStatus(status);\\n\\n        emit StreamCancelled(address(this), creator, streamState.outSupply, status);\\n    }\\n\\n    function cancelWithAdmin() external {\\n        assertIsProtocolAdmin();\\n\\n        // Load and update status\\n        IStreamTypes.Status status = loadStreamStatus();\\n        IStreamTypes.StreamTimes memory times = loadStreamTimes();\\n        status = syncStreamStatus(status, times, block.timestamp);\\n\\n        // Check if operation is allowed\\n        IStreamTypes.Status[] memory allowedStatuses = new IStreamTypes.Status[](3);\\n        allowedStatuses[0] = IStreamTypes.Status.Waiting;\\n        allowedStatuses[1] = IStreamTypes.Status.Bootstrapping;\\n        allowedStatuses[2] = IStreamTypes.Status.Active;\\n        bool isAllowed = isOperationAllowed(status, allowedStatuses);\\n        if (!isAllowed) {\\n            revert OperationNotAllowed();\\n        }\\n\\n        // Refund out tokens to creator\\n        safeTokenTransfer(streamTokens.outSupplyToken, creator, streamState.outSupply);\\n\\n        // Update status\\n        status = IStreamTypes.Status.Cancelled;\\n        saveStreamStatus(status);\\n\\n        emit StreamCancelled(address(this), creator, streamState.outSupply, status);\\n    }\\n\\n    /**\\n     * @dev Checks if an address is a valid ERC20 token\\n     * @param tokenAddress The token address to validate\\n     * @param testAccount The account to use for testing the token interface\\n     * @return isValid True if the address implements the ERC20 interface\\n     */\\n    function isValidERC20(address tokenAddress, address testAccount) internal view returns (bool isValid) {\\n        if (tokenAddress == address(0)) {\\n            return false;\\n        }\\n\\n        try IERC20(tokenAddress).balanceOf(testAccount) returns (uint256) {\\n            return true;\\n        } catch {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Checks if an account has sufficient token balance\\n     * @param tokenAddress The ERC20 token address\\n     * @param account The account to check balance for\\n     * @param requiredAmount The minimum required balance\\n     * @return hasEnoughBalance True if the account has sufficient balance\\n     */\\n    function hasEnoughBalance(\\n        address tokenAddress,\\n        address account,\\n        uint256 requiredAmount\\n    ) internal view returns (bool) {\\n        IERC20 token = IERC20(tokenAddress);\\n        uint256 balance = token.balanceOf(account);\\n        return balance >= requiredAmount;\\n    }\\n\\n    // Load helpers\\n    function loadStream() internal view returns (IStreamTypes.StreamState memory) {\\n        return streamState;\\n    }\\n\\n    function loadStreamStatus() internal view returns (IStreamTypes.Status) {\\n        return streamStatus;\\n    }\\n\\n    function loadPosition(address user) internal view returns (PositionTypes.Position memory) {\\n        return positionStorage.getPosition(user);\\n    }\\n\\n    function loadStreamTimes() internal view returns (IStreamTypes.StreamTimes memory) {\\n        return streamTimes;\\n    }\\n\\n    // Save helpers\\n    function saveStream(IStreamTypes.StreamState memory state) internal {\\n        streamState = state;\\n    }\\n\\n    function saveStreamStatus(IStreamTypes.Status status) internal {\\n        streamStatus = status;\\n    }\\n\\n    function savePosition(address user, PositionTypes.Position memory position) internal {\\n        positionStorage.updatePosition(user, position);\\n    }\\n\\n    // Refactored syncStream to work directly with a provided memory object\\n    function syncStream(IStreamTypes.StreamState memory state) internal view returns (IStreamTypes.StreamState memory) {\\n        IStreamTypes.StreamTimes memory times = loadStreamTimes();\\n\\n        Decimal memory diff = StreamMathLib.calculateDiff(\\n            block.timestamp,\\n            times.streamStartTime,\\n            times.streamEndTime,\\n            state.lastUpdated\\n        );\\n\\n        if (diff.value > 0) {\\n            state = StreamMathLib.calculateUpdatedState(state, diff);\\n            state.lastUpdated = block.timestamp;\\n        }\\n\\n        return state;\\n    }\\n\\n    // Refactored syncStreamStatus to work directly with a provided memory object\\n    function syncStreamStatus(\\n        IStreamTypes.Status status,\\n        IStreamTypes.StreamTimes memory times,\\n        uint256 nowTime\\n    ) internal pure returns (IStreamTypes.Status) {\\n        status = StreamMathLib.calculateStreamStatus(\\n            status,\\n            nowTime,\\n            times.bootstrappingStartTime,\\n            times.streamStartTime,\\n            times.streamEndTime\\n        );\\n\\n        return status;\\n    }\\n\\n    /**\\n     * @dev Ensure value is non-zero\\n     * @param value The value to check\\n     * @param errorMessage The error message to revert with\\n     */\\n    function assertNonZero(uint256 value, string memory errorMessage) internal pure {\\n        if (value == 0) revert(errorMessage);\\n    }\\n\\n    /**\\n     * @dev Ensure sender is the creator\\n     */\\n    function assertIsCreator() internal view {\\n        if (msg.sender != creator) revert Unauthorized();\\n    }\\n\\n    /**\\n     * @dev Ensure sender is the protocol admin\\n     */\\n    function assertIsProtocolAdmin() internal view {\\n        StreamFactory factoryContract = StreamFactory(factory);\\n        address protocolAdmin = factoryContract.getParams().protocolAdmin;\\n        if (msg.sender != protocolAdmin) revert Unauthorized();\\n    }\\n\\n    /**\\n     * @dev Ensure status matches expected value\\n     * @param status Current status to check\\n     * @param expectedStatus Status that is expected\\n     */\\n    function assertStatus(IStreamTypes.Status status, IStreamTypes.Status expectedStatus) internal pure {\\n        if (status != expectedStatus) revert OperationNotAllowed();\\n    }\\n\\n    /**\\n     * @dev Assert that the cap does not exceed balance\\n     * @param cap Amount to withdraw\\n     * @param balance Available balance\\n     */\\n    function assertWithinBalance(uint256 cap, uint256 balance) internal pure {\\n        if (cap > balance) revert WithdrawAmountExceedsBalance(cap);\\n    }\\n\\n    /**\\n     * @dev Get the current stream status\\n     * @return The current stream status\\n     */\\n    function getStreamStatus() external view returns (IStreamTypes.Status) {\\n        return streamStatus;\\n    }\\n\\n    /**\\n     * @dev Get the current stream state\\n     * @return The current stream state\\n     */\\n    function getStreamState() external view returns (IStreamTypes.StreamState memory) {\\n        return streamState;\\n    }\\n}\\n\",\"keccak256\":\"0xbb7a5fff81ff2d2623cce22f960a701d43563c4c5868f51a5f6e18c942e359de\",\"license\":\"MIT\"},\"contracts/StreamErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\ninterface IStreamErrors {\\n    // Stream errors\\n    error InvalidBootstrappingStartTime();\\n    error InvalidStreamStartTime();\\n    error InvalidStreamEndTime();\\n    error StreamDurationTooShort();\\n    error BootstrappingDurationTooShort();\\n    error WaitingDurationTooShort();\\n    error InsufficientTokenPayment(uint256 requiredTokenAmount, uint256 tokenBalance);\\n    error InvalidOutSupplyToken();\\n    error InvalidInSupplyToken();\\n    error PaymentFailed();\\n    error OperationNotAllowed();\\n    error Unauthorized();\\n    error InvalidWithdrawAmount();\\n    error WithdrawAmountExceedsBalance(uint256 cap);\\n    error InsufficientOutAmount();\\n    error InvalidPosition();\\n    error InvalidExitCondition();\\n    error InvalidVestingDuration();\\n    error InvalidVestingCliffDuration();\\n    // StreamFactory errors\\n    error ContractFrozen();\\n    error InvalidExitFeeRatio();\\n    error ZeroOutSupplyNotAllowed();\\n    error StreamInputTokenNotAccepted();\\n    error InvalidBootstrappingTime();\\n    error StreamStartMustBeAfterBootstrapping();\\n    error StreamEndMustBeAfterStart();\\n    error InvalidToSVersion();\\n    error InsufficientNativeToken();\\n    error FeeTransferFailed();\\n    error TokenTransferFailed();\\n    error StreamAddressPredictionFailed();\\n    error InvalidFeeCollector();\\n    error InvalidProtocolAdmin();\\n    error NotAdmin();\\n}\\n\",\"keccak256\":\"0xebdabbcfd90b35ed06e230f2b72256b8cc2502a60f093041af8540262d842ce1\",\"license\":\"MIT\"},\"contracts/StreamEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"./StreamTypes.sol\\\";\\nimport \\\"./DecimalMath.sol\\\";\\n\\ninterface IStreamEvents {\\n    event StreamCreated(\\n        address indexed streamOutToken,\\n        address indexed streamInToken,\\n        address indexed streamFactoryAddress,\\n        uint256 streamOutAmount,\\n        uint256 bootstrappingStartTime,\\n        uint256 streamStartTime,\\n        uint256 streamEndTime,\\n        uint256 threshold,\\n        string streamName,\\n        string tosVersion,\\n        address streamAddress,\\n        uint16 streamId\\n    );\\n\\n    event StreamSynced(address indexed streamAddress, IStreamTypes.Status mainStatus, uint256 lastUpdated);\\n\\n    event Subscribed(\\n        address indexed streamAddress,\\n        address indexed subscriber,\\n        uint256 amountIn,\\n        uint256 newShares,\\n        uint256 totalSharesAfter,\\n        uint256 totalInSupplyAfter\\n    );\\n\\n    event StreamSynced(\\n        address indexed streamAddress,\\n        uint256 lastUpdated,\\n        uint8 newStatus,\\n        Decimal distIndex,\\n        uint256 outRemaining,\\n        uint256 inSupply,\\n        uint256 spentIn,\\n        Decimal currentStreamedPrice\\n    );\\n\\n    event Withdrawn(\\n        address indexed streamAddress,\\n        address indexed subscriber,\\n        uint256 remainingInBalance,\\n        uint256 remainingShares,\\n        uint256 totalInSupply,\\n        uint256 totalShares\\n    );\\n\\n    event Exited(\\n        address indexed streamAddress,\\n        address indexed subscriber,\\n        uint256 purchased,\\n        uint256 spentIn,\\n        uint256 exitTimestamp\\n    );\\n\\n    event StreamFinalized(\\n        address indexed streamAddress,\\n        address indexed creator,\\n        uint256 creatorRevenue,\\n        uint256 exitFeeAmount,\\n        IStreamTypes.Status status\\n    );\\n\\n    event ParamsUpdated(\\n        address indexed factory,\\n        uint256 streamCreationFee,\\n        uint256 exitFeeRatio,\\n        uint256 minWaitingDuration,\\n        uint256 minBootstrappingDuration,\\n        uint256 minStreamDuration,\\n        string tosVersion\\n    );\\n\\n    event FeeCollectorUpdated(address indexed factory, address newFeeCollector);\\n\\n    event ProtocolAdminUpdated(address indexed factory, address newProtocolAdmin);\\n\\n    event FrozenStateUpdated(address indexed factory, bool frozen);\\n\\n    event AcceptedTokensUpdated(address indexed factory, address[] tokensAdded, address[] tokensRemoved);\\n\\n    event StreamCancelled(\\n        address indexed streamAddress,\\n        address creator,\\n        uint256 outSupply,\\n        IStreamTypes.Status status\\n    );\\n\\n    event VestingContractDeployed(address indexed factoryAddress, address vestingContract);\\n}\\n\",\"keccak256\":\"0x4e4f40eb3870b2bfaffbf24d6399b70e5b676f190d44ac03009b29cdc774353a\",\"license\":\"MIT\"},\"contracts/StreamFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"./Stream.sol\\\";\\nimport \\\"./StreamEvents.sol\\\";\\nimport \\\"./StreamErrors.sol\\\";\\nimport \\\"./Vesting.sol\\\";\\nimport \\\"./StreamTypes.sol\\\";\\nimport \\\"./IVesting.sol\\\";\\ncontract StreamFactory is IStreamEvents, IStreamErrors {\\n    struct Params {\\n        uint256 streamCreationFee; // Fixed fee to create a stream\\n        address streamCreationFeeToken; // Token used for creation fee,\\n        Decimal exitFeeRatio; // Fee ratio when exiting a stream\\n        uint256 minWaitingDuration; // Minimum waiting period\\n        uint256 minBootstrappingDuration; // Minimum bootstrapping period\\n        uint256 minStreamDuration; // Minimum duration for a stream\\n        address feeCollector; // Address where fees are collected\\n        address protocolAdmin; // Admin address for protocol\\n        string tosVersion; // Terms of service version\\n        address vestingAddress; // Address of the vesting contract\\n    }\\n\\n    mapping(address => bool) public acceptedInSupplyTokens;\\n\\n    address public constant NATIVE_TOKEN = address(0);\\n\\n    uint16 public currentStreamId;\\n\\n    Params public params;\\n    mapping(uint16 => address) public streamAddresses;\\n\\n    bool public frozen;\\n\\n    constructor(\\n        uint256 _streamCreationFee,\\n        address _streamCreationFeeToken,\\n        Decimal memory _exitFeeRatio,\\n        uint256 _minWaitingDuration,\\n        uint256 _minBootstrappingDuration,\\n        uint256 _minStreamDuration,\\n        address[] memory _acceptedInSupplyTokens,\\n        address _feeCollector,\\n        address _protocolAdmin,\\n        string memory _tosVersion\\n    ) {\\n        if (_feeCollector == address(0)) revert InvalidFeeCollector();\\n        if (_protocolAdmin == address(0)) revert InvalidProtocolAdmin();\\n\\n        // Check if exit fee ratio is between 0 and 1\\n        if (DecimalMath.gt(_exitFeeRatio, DecimalMath.fromNumber(1))) revert InvalidExitFeeRatio();\\n\\n        // Deploy vesting contract\\n        Vesting vesting = new Vesting();\\n\\n        // Emit event for vesting contract deployment\\n        emit VestingContractDeployed(address(this), address(vesting));\\n\\n        params = Params({\\n            streamCreationFee: _streamCreationFee,\\n            streamCreationFeeToken: _streamCreationFeeToken,\\n            exitFeeRatio: _exitFeeRatio,\\n            minWaitingDuration: _minWaitingDuration,\\n            minBootstrappingDuration: _minBootstrappingDuration,\\n            minStreamDuration: _minStreamDuration,\\n            feeCollector: _feeCollector,\\n            protocolAdmin: _protocolAdmin,\\n            tosVersion: _tosVersion,\\n            vestingAddress: address(vesting)\\n        });\\n\\n        // Set accepted tokens\\n        for (uint i = 0; i < _acceptedInSupplyTokens.length; i++) {\\n            acceptedInSupplyTokens[_acceptedInSupplyTokens[i]] = true;\\n        }\\n        currentStreamId = 0;\\n    }\\n\\n    modifier onlyAdmin() {\\n        if (msg.sender != params.protocolAdmin) revert NotAdmin();\\n        _;\\n    }\\n\\n    function updateParams(\\n        uint256 _streamCreationFee,\\n        Decimal memory _exitFeeRatio,\\n        uint256 _minWaitingDuration,\\n        uint256 _minBootstrappingDuration,\\n        uint256 _minStreamDuration,\\n        string memory _tosVersion\\n    ) external onlyAdmin {\\n        params.streamCreationFee = _streamCreationFee;\\n        params.exitFeeRatio = _exitFeeRatio;\\n        params.minWaitingDuration = _minWaitingDuration;\\n        params.minBootstrappingDuration = _minBootstrappingDuration;\\n        params.minStreamDuration = _minStreamDuration;\\n        params.tosVersion = _tosVersion;\\n\\n        emit ParamsUpdated(\\n            address(this),\\n            _streamCreationFee,\\n            _exitFeeRatio.value,\\n            _minWaitingDuration,\\n            _minBootstrappingDuration,\\n            _minStreamDuration,\\n            _tosVersion\\n        );\\n    }\\n\\n    function updateFeeCollector(address _feeCollector) external onlyAdmin {\\n        if (_feeCollector == address(0)) revert InvalidFeeCollector();\\n        params.feeCollector = _feeCollector;\\n        emit FeeCollectorUpdated(address(this), _feeCollector);\\n    }\\n\\n    function updateProtocolAdmin(address _protocolAdmin) external onlyAdmin {\\n        if (_protocolAdmin == address(0)) revert InvalidProtocolAdmin();\\n        params.protocolAdmin = _protocolAdmin;\\n        emit ProtocolAdminUpdated(address(this), _protocolAdmin);\\n    }\\n\\n    function updateAcceptedTokens(\\n        address[] calldata tokens_to_add,\\n        address[] calldata tokens_to_remove\\n    ) external onlyAdmin {\\n        for (uint i = 0; i < tokens_to_add.length; i++) {\\n            acceptedInSupplyTokens[tokens_to_add[i]] = true;\\n        }\\n        for (uint i = 0; i < tokens_to_remove.length; i++) {\\n            acceptedInSupplyTokens[tokens_to_remove[i]] = false;\\n        }\\n        emit AcceptedTokensUpdated(address(this), tokens_to_add, tokens_to_remove);\\n    }\\n\\n    function createStream(\\n        uint256 _streamOutAmount,\\n        address _outSupplyToken,\\n        uint256 _bootstrappingStartTime,\\n        uint256 _streamStartTime,\\n        uint256 _streamEndTime,\\n        uint256 _threshold,\\n        string memory _name,\\n        address _inSupplyToken,\\n        string memory _tosVersion,\\n        bytes32 _salt,\\n        IStreamTypes.VestingInfo memory _creatorVestingInfo,\\n        IStreamTypes.VestingInfo memory _beneficiaryVestingInfo\\n    ) external payable {\\n        // Check if contract is accepting new streams (not frozen)\\n        if (frozen) revert ContractFrozen();\\n\\n        // Validate input parameters\\n        if (_streamOutAmount == 0) revert ZeroOutSupplyNotAllowed();\\n        if (!acceptedInSupplyTokens[_inSupplyToken]) revert StreamInputTokenNotAccepted();\\n\\n        // Validate time parameters using validateStreamTimes\\n        validateStreamTimes(block.timestamp, _bootstrappingStartTime, _streamStartTime, _streamEndTime);\\n\\n        // Validate TOS version\\n        if (keccak256(abi.encodePacked(_tosVersion)) != keccak256(abi.encodePacked(params.tosVersion)))\\n            revert InvalidToSVersion();\\n\\n        // Load creation fee\\n        uint256 creationFee = params.streamCreationFee;\\n        if (creationFee > 0) {\\n            if (params.streamCreationFeeToken == address(0)) {\\n                // Native token\\n                if (msg.value < creationFee) revert InsufficientNativeToken();\\n                // Transfer fee to fee collector\\n                if (!payable(params.feeCollector).send(creationFee)) revert FeeTransferFailed();\\n            } else {\\n                // ERC20 token\\n                if (\\n                    !IERC20(params.streamCreationFeeToken).transferFrom(\\n                        msg.sender,\\n                        address(params.feeCollector),\\n                        creationFee\\n                    )\\n                ) revert TokenTransferFailed();\\n            }\\n        }\\n        // Predict stream address\\n        bytes32 bytecodeHash = keccak256(\\n            abi.encodePacked(\\n                type(Stream).creationCode,\\n                abi.encode(\\n                    _streamOutAmount,\\n                    _outSupplyToken,\\n                    _bootstrappingStartTime,\\n                    _streamStartTime,\\n                    _streamEndTime,\\n                    _threshold,\\n                    _name,\\n                    _inSupplyToken,\\n                    msg.sender,\\n                    _creatorVestingInfo,\\n                    _beneficiaryVestingInfo\\n                )\\n            )\\n        );\\n\\n        address predictedAddress = predictAddress(address(this), _salt, bytecodeHash);\\n        // Transfer out denom to stream contract\\n        if (!IERC20(_outSupplyToken).transferFrom(msg.sender, predictedAddress, _streamOutAmount))\\n            revert TokenTransferFailed();\\n        // Deploy new stream contract with all parameters\\n        Stream newStream = new Stream{ salt: _salt }(\\n            _streamOutAmount,\\n            _outSupplyToken,\\n            _bootstrappingStartTime,\\n            _streamStartTime,\\n            _streamEndTime,\\n            _threshold,\\n            _name,\\n            _inSupplyToken,\\n            msg.sender,\\n            _creatorVestingInfo,\\n            _beneficiaryVestingInfo\\n        );\\n\\n        if (address(newStream) != predictedAddress) revert StreamAddressPredictionFailed();\\n        streamAddresses[currentStreamId] = address(newStream);\\n\\n        emit StreamCreated(\\n            _outSupplyToken,\\n            _inSupplyToken,\\n            address(this),\\n            _streamOutAmount,\\n            _bootstrappingStartTime,\\n            _streamStartTime,\\n            _streamEndTime,\\n            _threshold,\\n            _name,\\n            _tosVersion,\\n            address(newStream),\\n            currentStreamId\\n        );\\n        currentStreamId++;\\n    }\\n\\n    function getStreams() external view returns (address[] memory) {\\n        address[] memory streams = new address[](currentStreamId);\\n        for (uint16 i = 0; i < currentStreamId; i++) {\\n            streams[i] = streamAddresses[i];\\n        }\\n        return streams;\\n    }\\n\\n    function getStream(uint16 _streamId) external view returns (address) {\\n        return streamAddresses[_streamId];\\n    }\\n\\n    function isStream(address _streamAddress) external view returns (bool) {\\n        for (uint16 i = 0; i < currentStreamId; i++) {\\n            if (streamAddresses[i] == _streamAddress) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function getParams() external view returns (Params memory) {\\n        return params;\\n    }\\n\\n    function isAcceptedInSupplyToken(address token) public view returns (bool) {\\n        return acceptedInSupplyTokens[token];\\n    }\\n\\n    function getAcceptedInSupplyTokens() external view returns (address[] memory) {\\n        address[] memory tokens = new address[](currentStreamId);\\n        for (uint16 i = 0; i < currentStreamId; i++) {\\n            if (acceptedInSupplyTokens[streamAddresses[i]]) {\\n                tokens[i] = streamAddresses[i];\\n            }\\n        }\\n        return tokens;\\n    }\\n\\n    function setFrozen(bool _frozen) external onlyAdmin {\\n        frozen = _frozen;\\n        emit FrozenStateUpdated(address(this), _frozen);\\n    }\\n\\n    function predictAddress(address creator, bytes32 _salt, bytes32 bytecodeHash) public pure returns (address) {\\n        return address(uint160(uint(keccak256(abi.encodePacked(bytes1(0xff), creator, _salt, bytecodeHash)))));\\n    }\\n\\n    function validateStreamTimes(\\n        uint256 nowTime,\\n        uint256 _bootstrappingStartTime,\\n        uint256 _startTime,\\n        uint256 _endTime\\n    ) internal view {\\n        if (nowTime > _bootstrappingStartTime) revert InvalidBootstrappingStartTime();\\n        if (_bootstrappingStartTime > _startTime) revert InvalidStreamStartTime();\\n        if (_startTime > _endTime) revert InvalidStreamEndTime();\\n        if (_endTime - _startTime < params.minStreamDuration) revert StreamDurationTooShort();\\n        if (_startTime - _bootstrappingStartTime < params.minBootstrappingDuration)\\n            revert BootstrappingDurationTooShort();\\n        if (_bootstrappingStartTime - nowTime < params.minWaitingDuration) revert WaitingDurationTooShort();\\n    }\\n}\\n\",\"keccak256\":\"0x4f0f8830056deb8fa66eeef088580d973071fad368e26dc4546479b9a5ffbb01\",\"license\":\"MIT\"},\"contracts/StreamMathLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./StreamTypes.sol\\\";\\nimport \\\"./DecimalMath.sol\\\";\\nimport \\\"./PositionTypes.sol\\\";\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\nlibrary StreamMathLib {\\n    /**\\n     * @dev Calculates the time difference ratio between current time and last updated time\\n     * @param currentTimestamp Current timestamp\\n     * @param streamStartTime Timestamp when the stream starts\\n     * @param streamEndTime Timestamp when the stream ends\\n     * @param lastUpdated Timestamp when the stream was last updated\\n     * @return The ratio of time elapsed since last update compared to total remaining time (scaled by 1e18)\\n     */\\n    function calculateDiff(\\n        uint256 currentTimestamp,\\n        uint256 streamStartTime,\\n        uint256 streamEndTime,\\n        uint256 lastUpdated\\n    ) internal pure returns (Decimal memory) {\\n        // If the stream is not started yet or already ended, return 0\\n        if (currentTimestamp < streamStartTime || lastUpdated >= streamEndTime) {\\n            return DecimalMath.fromNumber(0);\\n        }\\n\\n        // If lastUpdated is before start time, set it to start time\\n        uint256 effectiveLastUpdated = lastUpdated;\\n        if (effectiveLastUpdated < streamStartTime) {\\n            effectiveLastUpdated = streamStartTime;\\n        }\\n\\n        // If current time is past end time, use end time instead\\n        uint256 effectiveNow = currentTimestamp;\\n        if (effectiveNow > streamEndTime) {\\n            effectiveNow = streamEndTime;\\n        }\\n\\n        uint256 numerator = effectiveNow - effectiveLastUpdated;\\n        uint256 denominator = streamEndTime - effectiveLastUpdated;\\n\\n        if (denominator == 0 || numerator == 0) {\\n            return DecimalMath.fromNumber(0);\\n        }\\n        // Return ratio of time elapsed since last update compared to total remaining time\\n        return DecimalMath.fromRatio(numerator, denominator);\\n    }\\n\\n    /**\\n     * @dev Calculates the stream status based on the current state and timestamp\\n     * @param currentStatus Current status of the stream\\n     * @param currentTime Current timestamp to check against\\n     * @param bootstrappingStartTime Timestamp when bootstrapping phase starts\\n     * @param streamStartTime Timestamp when active streaming starts\\n     * @param streamEndTime Timestamp when streaming ends\\n     * @return IStreamTypes.Status The calculated stream status\\n     */\\n    function calculateStreamStatus(\\n        IStreamTypes.Status currentStatus,\\n        uint256 currentTime,\\n        uint256 bootstrappingStartTime,\\n        uint256 streamStartTime,\\n        uint256 streamEndTime\\n    ) internal pure returns (IStreamTypes.Status) {\\n        // Don't update if stream is in a final state\\n        if (\\n            currentStatus == IStreamTypes.Status.Cancelled ||\\n            currentStatus == IStreamTypes.Status.FinalizedRefunded ||\\n            currentStatus == IStreamTypes.Status.FinalizedStreamed\\n        ) {\\n            return currentStatus;\\n        }\\n\\n        // Update status based on current timestamp\\n        if (currentTime < bootstrappingStartTime) {\\n            return IStreamTypes.Status.Waiting;\\n        } else if (currentTime >= bootstrappingStartTime && currentTime < streamStartTime) {\\n            return IStreamTypes.Status.Bootstrapping;\\n        } else if (currentTime >= streamStartTime && currentTime < streamEndTime) {\\n            return IStreamTypes.Status.Active;\\n        } else if (currentTime >= streamEndTime) {\\n            return IStreamTypes.Status.Ended;\\n        }\\n\\n        // This should never be reached, but return current status as fallback\\n        return currentStatus;\\n    }\\n\\n    /**\\n     * @dev Calculates updated stream state based on time difference\\n     * @param state Current stream state\\n     * @param diff Time difference in seconds\\n     * @return Updated stream state\\n     */\\n    function calculateUpdatedState(\\n        IStreamTypes.StreamState memory state,\\n        Decimal memory diff\\n    ) internal pure returns (IStreamTypes.StreamState memory) {\\n        // Create a copy of the state to avoid modifying the input\\n        IStreamTypes.StreamState memory newState = state;\\n\\n        if (newState.shares > 0 && diff.value > 0) {\\n            // Calculate new distribution balance and spent in amount\\n            Decimal memory newDecimalDistributionBalance = DecimalMath.mul(\\n                DecimalMath.fromNumber(newState.outRemaining),\\n                diff\\n            );\\n            uint256 newDistributionBalance = DecimalMath.floor(newDecimalDistributionBalance);\\n\\n            Decimal memory newDecimalSpentIn = DecimalMath.mul(DecimalMath.fromNumber(newState.inSupply), diff);\\n            uint256 spentIn = DecimalMath.floor(newDecimalSpentIn);\\n\\n            // Update state variables\\n            newState.spentIn += spentIn;\\n            newState.inSupply -= spentIn;\\n\\n            if (newDistributionBalance > 0) {\\n                newState.outRemaining -= newDistributionBalance;\\n                // Update distribution index (shares are in base units, multiply by 1e18 for precision)\\n                newState.distIndex = DecimalMath.fromRatio(newDistributionBalance, newState.shares);\\n                // Update current streamed price\\n                newState.currentStreamedPrice = DecimalMath.fromRatio(spentIn, newDistributionBalance);\\n            }\\n        }\\n\\n        return newState;\\n    }\\n\\n    function computeSharesAmount(\\n        uint256 amountIn,\\n        bool roundUp,\\n        uint256 inSupply,\\n        uint256 totalShares\\n    ) internal pure returns (uint256) {\\n        if (totalShares == 0 || amountIn == 0) {\\n            return amountIn;\\n        }\\n\\n        uint256 totalSharesIn = totalShares * amountIn;\\n        if (roundUp) {\\n            return (totalSharesIn + inSupply - 1) / inSupply;\\n        } else {\\n            return totalSharesIn / inSupply;\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates the exit fee amount based on the spent in amount\\n     * @param spentInAmount Amount of tokens spent in the stream\\n     * @return exitFeeAmount The calculated fee amount\\n     * @return remainingAmount The remaining amount after fee deduction\\n     */\\n    function calculateExitFee(\\n        uint256 spentInAmount,\\n        Decimal memory exitFeeRatio\\n    ) internal pure returns (uint256 exitFeeAmount, uint256 remainingAmount) {\\n        Decimal memory decimalSpentIn = DecimalMath.fromNumber(spentInAmount);\\n\\n        // Calculate exit fee amount using DecimalMath\\n        Decimal memory decimalExitFeeAmount = DecimalMath.mul(decimalSpentIn, exitFeeRatio);\\n        exitFeeAmount = DecimalMath.floor(decimalExitFeeAmount);\\n        remainingAmount = spentInAmount - exitFeeAmount;\\n\\n        return (exitFeeAmount, remainingAmount);\\n    }\\n\\n    function syncPosition(\\n        PositionTypes.Position memory position,\\n        Decimal memory distIndex,\\n        uint256 totalShares,\\n        uint256 inSupply,\\n        uint256 nowTime\\n    ) internal pure returns (PositionTypes.Position memory) {\\n        // Create a new position in memory to store the updated values\\n        PositionTypes.Position memory updatedPosition = PositionTypes.Position({\\n            inBalance: position.inBalance,\\n            shares: position.shares,\\n            index: position.index,\\n            lastUpdateTime: position.lastUpdateTime,\\n            pendingReward: position.pendingReward,\\n            spentIn: position.spentIn,\\n            purchased: position.purchased,\\n            exitDate: position.exitDate\\n        });\\n\\n        // Calculate index difference for distributions since last update\\n        Decimal memory indexDiff = DecimalMath.sub(distIndex, updatedPosition.index);\\n        uint256 spent = 0;\\n        uint256 purchased = 0;\\n\\n        // Only process if there are shares in the stream\\n        if (totalShares > 0) {\\n            // Calculate purchased amount based on position shares and index difference\\n            Decimal memory positionSharesDecimal = DecimalMath.fromNumber(updatedPosition.shares);\\n            Decimal memory purchasedDecimal = DecimalMath.add(\\n                DecimalMath.mul(positionSharesDecimal, indexDiff),\\n                updatedPosition.pendingReward\\n            );\\n            (purchased, purchasedDecimal) = DecimalMath.toNumber(purchasedDecimal);\\n            updatedPosition.purchased += purchased;\\n            updatedPosition.pendingReward = purchasedDecimal;\\n\\n            // Calculate remaining balance based on current shares ratio\\n            uint256 inRemaining = (inSupply * updatedPosition.shares) / totalShares;\\n            // Calculate spent amount\\n            spent = updatedPosition.inBalance - inRemaining;\\n            updatedPosition.spentIn += spent;\\n            updatedPosition.inBalance = inRemaining;\\n        }\\n\\n        // Update position tracking\\n        updatedPosition.index = distIndex;\\n        updatedPosition.lastUpdateTime = nowTime;\\n\\n        return updatedPosition;\\n    }\\n\\n    function calculateVestingSchedule(\\n        uint256 nowTime,\\n        uint256 cliffDuration,\\n        uint256 vestingDuration\\n    ) internal pure returns (uint256 cliffTime, uint256 endTime) {\\n        cliffTime = nowTime + cliffDuration;\\n        endTime = nowTime + vestingDuration;\\n        return (cliffTime, endTime);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x05837f454e2ab2a06788abb82bc92ecd4e4e52057cbd7ce6e8d943198ebcc9a3\",\"license\":\"MIT\"},\"contracts/StreamTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"./DecimalMath.sol\\\";\\n\\ninterface IStreamTypes {\\n    enum Status {\\n        Waiting,\\n        Bootstrapping,\\n        Active,\\n        Ended,\\n        FinalizedRefunded,\\n        FinalizedStreamed,\\n        Cancelled\\n    }\\n\\n    struct StreamTimes {\\n        uint256 bootstrappingStartTime;\\n        uint256 streamStartTime;\\n        uint256 streamEndTime;\\n    }\\n\\n    struct StreamMetadata {\\n        string name;\\n    }\\n\\n    struct StreamState {\\n        uint256 outRemaining;\\n        Decimal distIndex;\\n        uint256 spentIn;\\n        uint256 shares;\\n        Decimal currentStreamedPrice;\\n        uint256 threshold;\\n        uint256 inSupply;\\n        uint256 outSupply;\\n        uint256 lastUpdated;\\n    }\\n\\n    struct StreamTokens {\\n        address inSupplyToken;\\n        address outSupplyToken;\\n    }\\n    struct VestingInfo {\\n        bool isVestingEnabled;\\n        uint16 vestingDuration;\\n        uint16 cliffDuration;\\n    }\\n}\\n\",\"keccak256\":\"0x2e92db1b4d14c5fb7cb7561bdc8faa93095ee219ed09f058fefcc48d88dd4b0a\",\"license\":\"MIT\"},\"contracts/Vesting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ncontract Vesting {\\n    struct VestingSchedule {\\n        uint256 cliffTime;\\n        uint256 endTime;\\n        uint256 totalAmount;\\n        uint256 releasedAmount;\\n    }\\n\\n    mapping(address => mapping(address => VestingSchedule[])) private tokenVestings;\\n\\n    event FundsStaked(\\n        address indexed beneficiary,\\n        address indexed token,\\n        uint256 totalAmount,\\n        uint256 cliffTime,\\n        uint256 endTime\\n    );\\n\\n    event FundsWithdrawn(address indexed beneficiary, address indexed token, uint256 scheduleIndex, uint256 amount);\\n\\n    function stakeFunds(\\n        address beneficiary,\\n        address tokenAddress,\\n        uint256 cliffTime,\\n        uint256 endTime,\\n        uint256 totalAmount\\n    ) external {\\n        require(cliffTime >= block.timestamp, \\\"Cliff time must be in the future\\\");\\n        require(endTime > cliffTime, \\\"End time must be after cliff time\\\");\\n        require(totalAmount > 0, \\\"Total amount must be greater than zero\\\");\\n\\n        require(IERC20(tokenAddress).transferFrom(msg.sender, address(this), totalAmount), \\\"Token transfer failed\\\");\\n\\n        VestingSchedule[] storage vestingSchedules = tokenVestings[beneficiary][tokenAddress];\\n        vestingSchedules.push(VestingSchedule(cliffTime, endTime, totalAmount, 0));\\n\\n        emit FundsStaked(beneficiary, tokenAddress, totalAmount, cliffTime, endTime);\\n    }\\n\\n    function withdrawFunds(address tokenAddress, uint256 scheduleIndex) external {\\n        VestingSchedule[] storage vestingSchedules = tokenVestings[msg.sender][tokenAddress];\\n        require(scheduleIndex < vestingSchedules.length, \\\"Invalid schedule index\\\");\\n\\n        VestingSchedule storage vestingSchedule = vestingSchedules[scheduleIndex];\\n        require(vestingSchedule.cliffTime <= block.timestamp, \\\"Funds are still in the cliff period\\\");\\n\\n        uint256 withdrawableAmount = calculateWithdrawableAmount(vestingSchedule);\\n        require(withdrawableAmount > 0, \\\"No funds available for withdrawal\\\");\\n\\n        vestingSchedule.releasedAmount += withdrawableAmount;\\n\\n        require(IERC20(tokenAddress).transfer(msg.sender, withdrawableAmount), \\\"Token transfer failed\\\");\\n\\n        emit FundsWithdrawn(msg.sender, tokenAddress, scheduleIndex, withdrawableAmount);\\n\\n        if (vestingSchedule.releasedAmount == vestingSchedule.totalAmount) {\\n            delete vestingSchedules[scheduleIndex];\\n        }\\n    }\\n\\n    function getStakesForBeneficiary(\\n        address beneficiary,\\n        address tokenAddress\\n    ) external view returns (VestingSchedule[] memory) {\\n        return tokenVestings[beneficiary][tokenAddress];\\n    }\\n\\n    function calculateWithdrawableAmount(VestingSchedule storage vestingSchedule) private view returns (uint256) {\\n        uint256 elapsedTime = block.timestamp - vestingSchedule.cliffTime;\\n\\n        if (elapsedTime >= vestingSchedule.endTime - vestingSchedule.cliffTime) {\\n            // Can now access all of the funds minus any that have already been claimed\\n            return vestingSchedule.totalAmount - vestingSchedule.releasedAmount;\\n        } else {\\n            // Calculate what proportion of funds is now available and only return that amount\\n\\n            // How long is the unlock period\\n            uint256 totalUnlockPeriod = vestingSchedule.endTime - vestingSchedule.cliffTime;\\n\\n            // How much should have been unlocked so far\\n            uint256 totalAmountAccessible = (vestingSchedule.totalAmount / totalUnlockPeriod) * elapsedTime;\\n\\n            // Amount available to withdraw is the currently unlocked amount minus anything\\n            // that has already been claimed to prevent repeat counting funds\\n            uint256 actualAccessible = totalAmountAccessible - vestingSchedule.releasedAmount;\\n\\n            return actualAccessible;\\n        }\\n    }\\n\\n    function getBlockTime() external view returns (uint256) {\\n        return block.timestamp;\\n    }\\n}\\n\",\"keccak256\":\"0x9887df25f3532cf5ac3753ed66ad325bc865884b0fd0b6c2d703edb24177c3de\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nlibrary console {\\n    address constant CONSOLE_ADDRESS =\\n        0x000000000000000000636F6e736F6c652e6c6f67;\\n\\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            pop(\\n                staticcall(\\n                    gas(),\\n                    consoleAddress,\\n                    add(payload, 32),\\n                    mload(payload),\\n                    0,\\n                    0\\n                )\\n            )\\n        }\\n    }\\n\\n    function _castToPure(\\n      function(bytes memory) internal view fnIn\\n    ) internal pure returns (function(bytes memory) pure fnOut) {\\n        assembly {\\n            fnOut := fnIn\\n        }\\n    }\\n\\n    function _sendLogPayload(bytes memory payload) internal pure {\\n        _castToPure(_sendLogPayloadImplementation)(payload);\\n    }\\n\\n    function log() internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n    }\\n\\n    function logInt(int256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n    }\\n\\n    function logUint(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function logString(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function logBool(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function logAddress(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n    }\\n\\n    function log(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function log(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function log(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function log(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function log(uint256 p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n}\\n\",\"keccak256\":\"0xf2560b5386574153057104d19a9e68a32ee912cf23c0c8df1fe9a0607f42d543\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2890,
        "contract": "contracts/StreamFactory.sol:StreamFactory",
        "label": "acceptedInSupplyTokens",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2898,
        "contract": "contracts/StreamFactory.sol:StreamFactory",
        "label": "currentStreamId",
        "offset": 0,
        "slot": "1",
        "type": "t_uint16"
      },
      {
        "astId": 2901,
        "contract": "contracts/StreamFactory.sol:StreamFactory",
        "label": "params",
        "offset": 0,
        "slot": "2",
        "type": "t_struct(Params)2886_storage"
      },
      {
        "astId": 2905,
        "contract": "contracts/StreamFactory.sol:StreamFactory",
        "label": "streamAddresses",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint16,t_address)"
      },
      {
        "astId": 2907,
        "contract": "contracts/StreamFactory.sol:StreamFactory",
        "label": "frozen",
        "offset": 0,
        "slot": "13",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint16,t_address)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Decimal)5_storage": {
        "encoding": "inplace",
        "label": "struct Decimal",
        "members": [
          {
            "astId": 4,
            "contract": "contracts/StreamFactory.sol:StreamFactory",
            "label": "value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Params)2886_storage": {
        "encoding": "inplace",
        "label": "struct StreamFactory.Params",
        "members": [
          {
            "astId": 2866,
            "contract": "contracts/StreamFactory.sol:StreamFactory",
            "label": "streamCreationFee",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2868,
            "contract": "contracts/StreamFactory.sol:StreamFactory",
            "label": "streamCreationFeeToken",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 2871,
            "contract": "contracts/StreamFactory.sol:StreamFactory",
            "label": "exitFeeRatio",
            "offset": 0,
            "slot": "2",
            "type": "t_struct(Decimal)5_storage"
          },
          {
            "astId": 2873,
            "contract": "contracts/StreamFactory.sol:StreamFactory",
            "label": "minWaitingDuration",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 2875,
            "contract": "contracts/StreamFactory.sol:StreamFactory",
            "label": "minBootstrappingDuration",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 2877,
            "contract": "contracts/StreamFactory.sol:StreamFactory",
            "label": "minStreamDuration",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 2879,
            "contract": "contracts/StreamFactory.sol:StreamFactory",
            "label": "feeCollector",
            "offset": 0,
            "slot": "6",
            "type": "t_address"
          },
          {
            "astId": 2881,
            "contract": "contracts/StreamFactory.sol:StreamFactory",
            "label": "protocolAdmin",
            "offset": 0,
            "slot": "7",
            "type": "t_address"
          },
          {
            "astId": 2883,
            "contract": "contracts/StreamFactory.sol:StreamFactory",
            "label": "tosVersion",
            "offset": 0,
            "slot": "8",
            "type": "t_string_storage"
          },
          {
            "astId": 2885,
            "contract": "contracts/StreamFactory.sol:StreamFactory",
            "label": "vestingAddress",
            "offset": 0,
            "slot": "9",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}